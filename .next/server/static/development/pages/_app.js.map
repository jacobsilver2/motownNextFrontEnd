{"version":3,"file":"static/development/pages/_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/AdminPanel.js","webpack:///./components/Album.js","webpack:///./components/Button.js","webpack:///./components/Card.js","webpack:///./components/Header.js","webpack:///./components/Meta.js","webpack:///./components/Nav.js","webpack:///./components/Page.js","webpack:///./components/Pagination.js","webpack:///./components/Search.js","webpack:///./components/Signout.js","webpack:///./components/Singles.js","webpack:///./components/styles/Center.js","webpack:///./components/styles/DropDown.js","webpack:///./components/styles/Multilist.js","webpack:///./components/styles/PaginationStyles.js","webpack:///./components/styles/cardStyles.js","webpack:///./components/styles/navStyles.js","webpack:///./components/styles/reactSelectTheme.js","webpack:///./components/styles/song/title.js","webpack:///./config.js","webpack:///./lib/formatDate.js","webpack:///./lib/selectButtons.js","webpack:///./lib/sortByOptions/singlesSortBySelectOptions.js","webpack:///./lib/sortByOptions/sortBySelectReturnLabel.js","webpack:///./lib/withData.js","webpack:///./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack:///./node_modules/@babel/runtime/helpers/interopRequireWildcard.js","webpack:///./node_modules/@babel/runtime/helpers/typeof.js","webpack:///./node_modules/next/app.js","webpack:///./node_modules/next/dist/client/link.js","webpack:///./node_modules/next/dist/client/router.js","webpack:///./node_modules/next/dist/client/with-router.js","webpack:///./node_modules/next/dist/next-server/lib/mitt.js","webpack:///./node_modules/next/dist/next-server/lib/router-context.js","webpack:///./node_modules/next/dist/next-server/lib/router/router.js","webpack:///./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js","webpack:///./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js","webpack:///./node_modules/next/dist/next-server/lib/router/utils/route-regex.js","webpack:///./node_modules/next/dist/next-server/lib/utils.js","webpack:///./node_modules/next/dist/pages/_app.js","webpack:///./node_modules/next/link.js","webpack:///./pages/_app.js","webpack:///./public/fonts/Carbon14LabelerRegular.woff2","webpack:///./public/fonts/radnikanext-medium-webfont.woff2","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"apollo-boost\"","webpack:///external \"downshift\"","webpack:///external \"graphql-tag\"","webpack:///external \"lodash.debounce\"","webpack:///external \"moment\"","webpack:///external \"next-with-apollo\"","webpack:///external \"next/head\"","webpack:///external \"next/router\"","webpack:///external \"nprogress\"","webpack:///external \"primereact/checkbox\"","webpack:///external \"primereact/paginator\"","webpack:///external \"primereact/progressbar\"","webpack:///external \"primereact/selectbutton\"","webpack:///external \"prop-types\"","webpack:///external \"prop-types-exact\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"react-is\"","webpack:///external \"react-select\"","webpack:///external \"styled-components\"","webpack:///external \"url\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport ButtonComponent from \"./Button\";\n// import { CURRENT_USER_QUERY } from \"./Nav\";\n\nexport const Center = styled.div`\n  /* text-align: center; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const AdminPanelWrapper = styled.div`\n  border-top: 10px solid ${(props) => props.theme.black};\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 20px;\n  justify-content: center;\n  align-items: stretch;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: white;\n  height: 150px;\n  overflow: scroll;\n`;\n\nexport const SelectedItemsList = styled.ul`\n  /* align-self: flex-start; */\n`;\n\nexport const CURRENT_USER_QUERY = gql`\n  query {\n    me {\n      id\n      email\n      name\n      permissions\n    }\n  }\n`;\n\nexport const LOCAL_STATE_QUERY = gql`\n  query {\n    selectedIds @client\n  }\n`;\n\nconst TURN_SINGLE_INTO_ALBUM_MUTATION = gql`\n  mutation TURN_SINGLE_INTO_ALBUM_MUTATION($id: ID!) {\n    turnSingleIntoAlbum(id: $id) {\n      id\n      title\n      single\n    }\n  }\n`;\n\nconst JOIN_SINGLES_MUTATION = gql`\n  mutation JOIN_SINGLES_MUTATION($albumOneId: ID!, $albumTwoId: ID!) {\n    joinTwoSingles(albumOneId: $albumOneId, albumTwoId: $albumTwoId) {\n      id\n      title\n    }\n  }\n`;\n\nconst CLEAR_SELECTED_IDS = gql`\n  mutation {\n    clearSelectedIds @client\n  }\n`;\n\nconst AdminPanel = () => {\n  const [\n    turnSingleIntoAlbumMutation,\n    { loading: turnSingleIntoAlbumLoading, error: turnSingleIntoAlbumError },\n  ] = useMutation(TURN_SINGLE_INTO_ALBUM_MUTATION);\n\n  const [\n    joinTwoSinglesMutation,\n    { loading: joinTwoSinglesLoading, error: joinTwoSinglesError },\n  ] = useMutation(JOIN_SINGLES_MUTATION);\n\n  const [\n    clearSelectedIdsMutation,\n    { loading: clearSelectedIdsLoading, error: clearSelectedIdsError },\n  ] = useMutation(CLEAR_SELECTED_IDS);\n\n  async function turnSingleIntoAlbum() {\n    turnSingleIntoAlbumMutation({\n      variables: { id: localStateData.selectedIds[0] },\n    });\n    turnSingleIntoAlbumError && console.log(turnSingleIntoAlbumError);\n    clearSelectedIdsMutation();\n  }\n\n  async function joinASideAndBSide() {\n    joinTwoSinglesMutation({\n      variables: {\n        albumOneId: localStateData.selectedIds[0],\n        albumTwoId: localStateData.selectedIds[1],\n      },\n    });\n    joinTwoSinglesError && console.log(joinTwoSinglesError);\n    clearSelectedIdsMutation();\n  }\n\n  const {\n    loading: currentUserLoading,\n    error: currentUserError,\n    data: currentUserData,\n  } = useQuery(CURRENT_USER_QUERY);\n\n  const {\n    loading: localStateLoading,\n    error: localStateError,\n    data: localStateData,\n  } = useQuery(LOCAL_STATE_QUERY);\n\n  if (currentUserLoading) return \"Loading...\";\n  if (currentUserError) return `Error! ${error.message}`;\n  const { me } = currentUserData;\n  return (\n    me && (\n      <>\n        <AdminPanelWrapper>\n          {/* {localStateData.selectedIds.length > 0 && (\n            <SelectedItemsList>\n              <p>Selected Items:</p>\n              {localStateData.selectedIds.map((selectedId) => (\n                <li key={selectedId}>{selectedId}</li>\n              ))}\n            </SelectedItemsList>\n          )} */}\n          <ButtonComponent\n            marginTop=\"20px\"\n            marginBottom=\"20px\"\n            marginLeft=\"20px\"\n            marginRight=\"20px\"\n            buttonSize=\"large\"\n            onClick={turnSingleIntoAlbum}\n          >\n            Turn Single Into Album\n          </ButtonComponent>\n          <ButtonComponent\n            marginTop=\"20px\"\n            marginBottom=\"20px\"\n            marginLeft=\"20px\"\n            marginRight=\"20px\"\n            onClick={turnSingleIntoAlbum}\n            buttonStyle=\"danger\"\n            buttonSize=\"large\"\n          >\n            Clear Selected Items\n          </ButtonComponent>\n          <ButtonComponent\n            marginTop=\"20px\"\n            marginBottom=\"20px\"\n            marginLeft=\"20px\"\n            marginRight=\"20px\"\n            buttonSize=\"large\"\n            onClick={joinASideAndBSide}\n          >\n            Join A-Side and B-Side\n          </ButtonComponent>\n        </AdminPanelWrapper>\n      </>\n    )\n  );\n};\n\nexport default AdminPanel;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport formatDate from \"../lib/formatDate\";\nimport Link from \"next/link\";\n// import { Card } from \"primereact/card\";\nimport Card from \"./Card\";\n// import { Button } from \"primereact/button\";\nimport Button from \"./Button\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport styled from \"styled-components\";\n\nconst StyledFooter = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nconst StyledFlexStart = styled.div`\n  align-self: center;\n`;\n\nconst StlyedFlexEnd = styled.div`\n  align-self: flex-end;\n`;\n\nexport const ADD_OR_REMOVE_LOCAL_ID_SELECTION_MUTATION = gql`\n  mutation($id: String!) {\n    addOrRemoveLocalIdSelection(id: $id) @client\n  }\n`;\n\nexport const LOCAL_STATE_QUERY = gql`\n  query {\n    selectedIds @client\n  }\n`;\n\nconst Album = ({ album }) => {\n  const { loading, error, data } = useQuery(CURRENT_USER_QUERY);\n  const {\n    loading: localStateQueryLoading,\n    error: localStateQueryError,\n    data: localStateQueryData,\n  } = useQuery(LOCAL_STATE_QUERY);\n  const [\n    addOrRemoveLocalIdSelectionMutation,\n    {\n      loading: addOrRemoveLocalIdSelectionMutationLoading,\n      error: addOrRemoveLocalIdSelectionMutationError,\n    },\n  ] = useMutation(ADD_OR_REMOVE_LOCAL_ID_SELECTION_MUTATION);\n\n  function handleChecked(e) {\n    addOrRemoveLocalIdSelectionMutation({ variables: { id: album.id } });\n  }\n\n  function isChecked(id) {\n    return localStateQueryData.selectedIds.includes(id);\n  }\n\n  const footer = data.me ? (\n    <StyledFooter>\n      <StyledFlexStart>\n        <Link href={{ pathname: \"/updatealbum\", query: { id: album.id } }}>\n          <a>\n            <Button buttonStyle=\"primary\" icon=\"pi pi-pencil\">\n              Edit\n            </Button>\n          </a>\n        </Link>\n      </StyledFlexStart>\n      <StlyedFlexEnd>\n        <Checkbox\n          onChange={(e) => handleChecked(e)}\n          checked={isChecked(album.id)}\n        />\n      </StlyedFlexEnd>\n    </StyledFooter>\n  ) : null;\n  const title = (\n    <span>\n      <Link href={{ pathname: \"/album\", query: { id: album.id } }}>\n        <a>{album.title || \"no title\"}</a>\n      </Link>\n    </span>\n  );\n  const artists =\n    album.artists &&\n    album.artists.map((artist, index) => (\n      <span key={artist.name}>\n        <Link href={{ pathname: \"/artist\", query: { id: artist.id } }}>\n          <a>{artist.name}</a>\n        </Link>\n        {album.artists.length === index + 1 ? \" \" : \", \"}\n      </span>\n    ));\n  return (\n    <Card\n      title={title}\n      footer={footer}\n      subTitle={\n        album.releaseDate\n          ? `released ${formatDate(album.releaseDate)}`\n          : \"no release date information\"\n      }\n    >\n      {/* {album.single && <p>Single</p>} */}\n      {album.format && <div className=\"format\">Format: {album.format}</div>}\n      {album.catalogNumber && (\n        <div className=\"catalognumber\">Catalog #: {album.catalogNumber}</div>\n      )}\n      {artists}\n    </Card>\n  );\n};\n\nexport default Album;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.button`\n  border-radius: 5px;\n  cursor: pointer;\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: translateY(-3px);\n  }\n\n  background-color: ${(props) =>\n    props.danger ? props.theme.red : props.theme.blue};\n  color: ${(props) => props.theme.offWhite};\n  border: none;\n\n  padding: ${(props) => (props.large ? \"10px 20px\" : \"10px 20px\")};\n  font-size: ${(props) => (props.large ? \"2rem\" : \"1.6rem\")};\n  margin-top: ${(props) => (props.marginTop ? `${props.marginTop}` : \"\")};\n  margin-bottom: ${(props) =>\n    props.marginBottom ? `${props.marginBottom}` : \"\"};\n  margin-left: ${(props) => (props.marginLeft ? `${props.marginLeft}` : \"\")};\n  margin-right: ${(props) => (props.marginRight ? `${props.marginRight}` : \"\")};\n`;\n\nconst Button = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize,\n  label,\n  marginTop,\n  marginBottom,\n  marginLeft,\n  marginRight,\n}) => {\n  return (\n    <StyledButton\n      danger={buttonStyle === \"danger\"}\n      large={buttonSize === \"large\"}\n      onClick={onClick}\n      type={type}\n      marginTop={marginTop}\n      marginBottom={marginBottom}\n      marginLeft={marginLeft}\n      marginRight={marginRight}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { CardWrapper } from \"./styles/cardStyles\";\n\nconst Card = ({ title, footer, subTitle, children, isTitle }) => {\n  return (\n    <CardWrapper isTitle={isTitle}>\n      <div className=\"title\">{title}</div>\n      {subTitle && <div className=\"subtitle\">{subTitle}</div>}\n      <div className=\"content\">{children}</div>\n      {footer && <div className=\"footer\">{footer}</div>}\n    </CardWrapper>\n  );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport Nav from \"./Nav\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport NProgress from \"nprogress\";\nimport Router from \"next/router\";\nimport Search from \"./Search\";\nimport { ProgressBar } from \"primereact/progressbar\";\n\nconst Logo = styled.h1`\n  font-size: 4rem;\n  margin-left: 2rem;\n  position: relative;\n  z-index: 2;\n  /* transform: skew(-7deg); */\n  a {\n    padding: 0.5rem 1rem;\n    background: ${(props) => props.theme.blue};\n    color: white;\n    text-transform: uppercase;\n    text-decoration: none;\n  }\n  a:hover {\n    color: ${(props) => props.theme.offWhite};\n  }\n  @media (max-width: 1300px) {\n    margin: 0;\n    text-align: center;\n  }\n`;\n\nconst StyledHeader = styled.header`\n  .bar {\n    border-bottom: 10px solid ${(props) => props.theme.black};\n    display: grid;\n    grid-template-columns: auto 1fr;\n    justify-content: space-between;\n    align-items: stretch;\n    @media (max-width: 1300px) {\n      grid-template-columns: 1fr;\n      justify-content: center;\n    }\n  }\n  .sub-bar {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    border-bottom: 1px solid ${(props) => props.theme.lightgrey};\n  }\n`;\n\nconst Header = () => {\n  const [loadingState, setLoadingState] = useState(false);\n\n  Router.onRouteChangeStart = () => {\n    setLoadingState(true);\n  };\n  Router.onRouteChangeComplete = () => {\n    setLoadingState(false);\n  };\n\n  Router.onRouteChangeError = () => {\n    setLoadingState(false);\n  };\n  return (\n    <StyledHeader>\n      <div className=\"bar\">\n        <Logo>\n          <Link href=\"/\">\n            <a>Motown DB</a>\n          </Link>\n        </Logo>\n        <Nav />\n      </div>\n      {loadingState && (\n        <ProgressBar style={{ height: \"5px\" }} mode=\"indeterminate\" />\n      )}\n      <div className=\"sub-bar\">\n        <Search />\n      </div>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import Head from \"next/head\";\n\nconst Meta = () => (\n  <Head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta charSet=\"utf-8\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/public/nprogress.css\" />\n    <title>Motown DB</title>\n  </Head>\n);\n\nexport default Meta;\n","import React from \"react\";\nimport Link from \"next/link\";\nimport NavStyles from \"./styles/navStyles\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useRouter } from \"next/router\";\nimport gql from \"graphql-tag\";\nimport Signout from \"./Signout\";\nimport styled from \"styled-components\";\n\nexport const CURRENT_USER_QUERY = gql`\n  query {\n    me {\n      id\n      email\n      name\n      permissions\n    }\n  }\n`;\n\nconst Nav = () => {\n  const { loading, error, data } = useQuery(CURRENT_USER_QUERY);\n  const router = useRouter();\n  // console.log(router.pathname);\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n  const { me } = data;\n\n  return (\n    <NavStyles>\n      {me && <p>{me.name}</p>}\n\n      <Link href=\"/songs\">\n        <a style={{ color: router.pathname === \"/songs\" ? \"#017ad9\" : \"\" }}>\n          Songs\n        </a>\n      </Link>\n      <Link href=\"/artists\">\n        <a style={{ color: router.pathname === \"/artists\" ? \"#017ad9\" : \"\" }}>\n          Artists\n        </a>\n      </Link>\n      <Link href=\"/albums\">\n        <a style={{ color: router.pathname === \"/albums\" ? \"#017ad9\" : \"\" }}>\n          Albums (LP)\n        </a>\n      </Link>\n      <Link href=\"/singles\">\n        <a style={{ color: router.pathname === \"/singles\" ? \"#017ad9\" : \"\" }}>\n          Singles (45)\n        </a>\n      </Link>\n      <Link href=\"/composers\">\n        <a style={{ color: router.pathname === \"/composers\" ? \"#017ad9\" : \"\" }}>\n          Composers\n        </a>\n      </Link>\n      {me && <Signout />}\n    </NavStyles>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport styled, { ThemeProvider, createGlobalStyle } from \"styled-components\";\nimport Header from \"./Header\";\nimport Meta from \"./Meta\";\nimport AdminPanel from \"./AdminPanel\";\nimport RadnikaNext from \"../public/fonts/radnikanext-medium-webfont.woff2\";\nimport Carbon14 from \"../public/fonts/Carbon14LabelerRegular.woff2\";\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeicons/primeicons.css\";\n\nexport const theme = {\n  red: \"#FF0000\",\n  blue: \"#017ad9\",\n  black: \"#393939\",\n  grey: \"#3A3A3A\",\n  lightgrey: \"#E1E1E1\",\n  offWhite: \"#EDEDED\",\n  maxWidth: \"1000px\",\n  bs: \"0 12px 24px 0 rgba(0, 0, 0, 0.09)\",\n};\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Radnika Next';\n    src: url(${RadnikaNext}) format('woff2');\n    font-weight: normal;\n    font-style: normal;\n  }\n  \n  html {\n    box-sizing: border-box;\n    font-size: 10px;\n  }\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n  body {\n    padding: 0;\n    margin: 0;\n    font-size: 1.5rem;\n    line-height: 2;\n    font-family: 'Radnika Next';\n  }\n  a {\n    text-decoration: none;\n    color: ${theme.black};\n  }\n  button {  font-family: 'Radnika Next'; }\n`;\n\nconst StyledPage = styled.div`\n  background: white;\n  color: ${(props) => props.theme.black};\n`;\n\nconst Inner = styled.div`\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n  padding: 2rem;\n`;\n\nconst Page = ({ children }) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <StyledPage>\n        <Meta />\n        <Header />\n        <Inner>{children}</Inner>\n        <AdminPanel />\n      </StyledPage>\n    </ThemeProvider>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport PaginationStyles from \"./styles/PaginationStyles\";\nimport { perPage } from \"../config\";\nimport { Paginator } from \"primereact/paginator\";\n\nconst SONGS_PAGINATION_QUERY = gql`\n  query SONGS_PAGINATION_QUERY($letter: String) {\n    songsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst SONGS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query SONGS_PAGINATION_QUERY {\n    songsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY($letter: String) {\n    albumsConnection(where: { single: false, title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY {\n    albumsConnection(\n      where: {\n        single: false\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nconst SINGLES_PAGINATION_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY($letter: String) {\n    albumsConnection(where: { single: true, title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst SINGLES_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY {\n    albumsConnection(\n      where: {\n        single: true\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY($letter: String) {\n    artistsConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY {\n    artistsConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY($letter: String) {\n    composersConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY {\n    composersConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nconst Pagination = ({ page, model, letter }) => {\n  let PAGINATION_QUERY;\n  switch (model) {\n    case \"songs\":\n      letter === \"#\"\n        ? (PAGINATION_QUERY = SONGS_PAGINATION_WITH_NUMBER_QUERY)\n        : (PAGINATION_QUERY = SONGS_PAGINATION_QUERY);\n      break;\n    case \"albums\":\n      letter === \"#\"\n        ? (PAGINATION_QUERY = ALBUMS_PAGINATION_WITH_NUMBER_QUERY)\n        : (PAGINATION_QUERY = ALBUMS_PAGINATION_QUERY);\n      break;\n    case \"singles\":\n      letter === \"#\"\n        ? (PAGINATION_QUERY = SINGLES_PAGINATION_WITH_NUMBER_QUERY)\n        : (PAGINATION_QUERY = SINGLES_PAGINATION_QUERY);\n      break;\n    case \"artists\":\n      PAGINATION_QUERY = ARTISTS_PAGINATION_QUERY;\n      break;\n    case \"composers\":\n      PAGINATION_QUERY = COMPOSERS_PAGINATION_QUERY;\n      break;\n    default:\n      PAGINATION_QUERY = SONGS_PAGINATION_QUERY;\n  }\n\n  const { loading, error, data } = useQuery(PAGINATION_QUERY, {\n    variables: { letter: letter },\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  let count;\n  if (model === \"songs\") count = data.songsConnection.aggregate.count;\n  if (model === \"artists\") count = data.artistsConnection.aggregate.count;\n  if (model === \"albums\") count = data.albumsConnection.aggregate.count;\n  if (model === \"singles\") count = data.albumsConnection.aggregate.count;\n  if (model === \"composers\") count = data.composersConnection.aggregate.count;\n\n  const pages = Math.ceil(count / perPage) || 1;\n  return (\n    <PaginationStyles>\n      <Link href={{ pathname: model, query: { page: page - 1 } }}>\n        <a className=\"prev\" aria-disabled={page <= 1}>\n          Prev\n        </a>\n      </Link>\n      <p className=\"pagination-page-number\">\n        Page {page} of {pages}\n      </p>\n      <p className=\"pagination-count\">\n        {count} {model}\n      </p>\n      <Link href={{ pathname: model, query: { page: page + 1 } }}>\n        <a className=\"next\" aria-disabled={page >= pages}>\n          Next\n        </a>\n      </Link>\n    </PaginationStyles>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport Select from \"react-select\";\n\nimport {\n  DropDown as StyledDropDown,\n  DropDownItem,\n  SearchStyles,\n} from \"./styles/DropDown\";\nimport Title from \"./styles/song/title\";\nimport customTheme from \"./styles/reactSelectTheme\";\nimport styled from \"styled-components\";\n\nconst StyledSearchBar = styled.div`\n  display: grid;\n  grid-template-columns: 5fr 1fr;\n  grid-gap: 1rem;\n`;\n\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_ARTISTS_QUERY = gql`\n  query SEARCH_ARTISTS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nconst SEARCH_ALBUMS_QUERY = gql`\n  query SEARCH_ALBUMS_QUERY($searchTerm: String!) {\n    albums(where: { OR: [{ title_contains: $searchTerm }] }) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_COMPOSERS_QUERY = gql`\n  query SEARCH_COMPOSERS_QUERY($searchTerm: String!) {\n    composers(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nfunction routeToItem(route, item) {\n  item &&\n    Router.push({\n      pathname: `/${route}`,\n      query: {\n        id: item.id,\n      },\n    });\n}\n\nfunction returnQuery(item) {\n  if (item === \"song\") {\n    return SEARCH_SONGS_QUERY;\n  }\n  if (item === \"album\") {\n    return SEARCH_ALBUMS_QUERY;\n  }\n  if (item === \"artist\") {\n    return SEARCH_ARTISTS_QUERY;\n  }\n  if (item === \"composer\") {\n    return SEARCH_COMPOSERS_QUERY;\n  }\n}\n\nconst dropdownSelectItems = [\n  { label: \"Song\", value: \"song\" },\n  { label: \"Artist\", value: \"artist\" },\n  { label: \"Album\", value: \"album\" },\n  { label: \"Composer\", value: \"composer\" },\n];\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false,\n    item: \"song\",\n  };\n\n  handleSelectChange = (event) => this.setState({ item: event.value });\n\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const response =\n      e.target.value &&\n      (await client.query({\n        query: returnQuery(this.state.item),\n        variables: { searchTerm: e.target.value },\n      }));\n    e.target.value &&\n      this.setState({\n        items:\n          response.data.songs ||\n          response.data.albums ||\n          response.data.composers ||\n          response.data.artists,\n        loading: false,\n      });\n  }, 350);\n\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n        <Downshift\n          onChange={(item) => routeToItem(this.state.item, item)}\n          itemToString={(item) =>\n            item === null ? \"\" : item.title || item.name\n          }\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            isOpen,\n            inputValue,\n            highlightedIndex,\n          }) => (\n            <div>\n              <ApolloConsumer>\n                {(client) => (\n                  <StyledSearchBar>\n                    <input\n                      {...getInputProps({\n                        type: \"search\",\n                        placeholder: \"Search\",\n                        id: \"search\",\n                        className: this.state.loading ? \"loading\" : \"\",\n                        onChange: (e) => {\n                          e.persist();\n                          this.onChange(e, client);\n                        },\n                      })}\n                    />\n                    <Select\n                      theme={customTheme}\n                      value={this.state.item}\n                      options={dropdownSelectItems}\n                      onChange={this.handleSelectChange}\n                      placeholder={`Search for a${\n                        this.state.item.toLowerCase().includes(\"a\", 0)\n                          ? \"n\"\n                          : \"\"\n                      } ${this.state.item.toLowerCase()}`}\n                    />\n                  </StyledSearchBar>\n                )}\n              </ApolloConsumer>\n              {isOpen ? (\n                <StyledDropDown>\n                  {this.state.items.map((item, index) => (\n                    <DropDownItem\n                      {...getItemProps({ key: item.id, index, item })}\n                      highlighted={index === highlightedIndex}\n                    >\n                      <Title>{item.title || item.name}</Title>\n                    </DropDownItem>\n                  ))}\n                </StyledDropDown>\n              ) : null}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n","import React from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\n\nconst SIGNOUT_MUTATION = gql`\n  mutation SIGNOUT_MUTATION {\n    signout {\n      message\n    }\n  }\n`;\n\nconst Signout = props => {\n  const [\n    signoutMutation,\n    { loading: mutationLoading, error: mutationError }\n  ] = useMutation(SIGNOUT_MUTATION);\n  return (\n    <button\n      onClick={() =>\n        signoutMutation({\n          refetchQueries: [{ query: CURRENT_USER_QUERY }]\n        })\n      }\n    >\n      Sign Out\n    </button>\n  );\n};\n\nexport default Signout;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport { gql } from \"apollo-boost\";\nimport Select from \"react-select\";\n\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nimport Multilist from \"./styles/Multilist\";\nimport Center from \"./styles/Center\";\nimport sortBySelectItems from \"../lib/sortByOptions/singlesSortBySelectOptions\";\nimport getSelectLabel from \"../lib/sortByOptions/sortBySelectReturnLabel\";\nimport customTheme from \"./styles/reactSelectTheme\";\n\nexport const LOCAL_STATE_QUERY = gql`\n  query {\n    selectedIds @client\n  }\n`;\n\nexport const ALL_SINGLES_QUERY = gql`\n  query ALL_SINGLES_QUERY($first: Int = ${perPage}, $skip: Int = 0, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: true}, first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_SINGLES_BEGINNING_WITH_QUERY = gql`\n  query ALL_SINGLES_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: true, title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_SINGLES_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_SINGLES_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: true, OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst Singles = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"title_ASC\");\n  const [checkedItems, setCheckedItems] = useState([]);\n  const {\n    loading: localStateLoading,\n    error: localStateError,\n    data: localStateData,\n  } = useQuery(LOCAL_STATE_QUERY);\n\n  const {\n    loading: allSinglesLoading,\n    error: allSinglesError,\n    data: allSinglesData,\n  } = useQuery(ALL_SINGLES_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, sortBy },\n  });\n  const {\n    loading: singlesBeginningWithLoading,\n    error: singlesBeginningWithError,\n    data: singlesBeginningWithData,\n  } = useQuery(ALL_SINGLES_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy,\n    },\n  });\n  const {\n    loading: singlesBeginningWithNumberLoading,\n    error: singlesBeginningWithNumberError,\n    data: singlesBeginningWithNumberData,\n  } = useQuery(ALL_SINGLES_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy,\n    },\n  });\n  if (\n    singlesBeginningWithLoading ||\n    allSinglesLoading ||\n    singlesBeginningWithNumberLoading\n  )\n    return <p>Loading...</p>;\n  if (\n    singlesBeginningWithError ||\n    allSinglesError ||\n    singlesBeginningWithNumberError\n  )\n    return <p>Error :(</p>;\n\n  function getSingles() {\n    if (letter === \"\" || !letter) {\n      return allSinglesData.albums\n        .filter((album) => album.single)\n        .map((album) => <Album key={album.id} album={album} />);\n    } else if (letter === \"#\") {\n      return singlesBeginningWithNumberData.albums\n        .filter((album) => album.single)\n        .map((single) => <Album key={single.id} album={single} />);\n    } else {\n      return singlesBeginningWithData.albums\n        .filter((album) => album.single)\n        .map((single) => <Album key={single.id} album={single} />);\n    }\n  }\n\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZWithNumber}\n        onChange={(e) => {\n          setLetter(e.value);\n          Router.push({ pathname: \"/singles\", query: { page: 1 } });\n        }}\n      />\n      <br />\n      <Select\n        options={sortBySelectItems}\n        theme={customTheme}\n        placeholder={`Sort by ${getSelectLabel(sortBySelectItems, sortBy)}`}\n        onChange={(e) => setSortBy(e.value)}\n        isSearchable\n      />\n      <br />\n      <Pagination page={page} model=\"singles\" letter={letter} />\n      <Multilist>{getSingles()}</Multilist>\n      <Pagination page={page} model=\"singles\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Singles;\n","import styled from \"styled-components\";\n\nexport const Center = styled.div`\n  text-align: center;\n`;\n\nexport default Center;\n","import styled, { keyframes } from \"styled-components\";\n\nconst DropDown = styled.div`\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n  border: 1px solid ${props => props.theme.lightgrey};\n`;\n\nconst DropDownItem = styled.div`\n  border-bottom: 1px solid ${props => props.theme.lightgrey};\n  background: ${props => (props.highlighted ? \"#f7f7f7\" : \"white\")};\n  padding: 1rem;\n  transition: all 0.2s;\n  ${props => (props.highlighted ? \"padding-left: 2rem;\" : null)};\n  display: flex;\n  align-items: center;\n  border-left: 10px solid\n    ${props => (props.highlighted ? props.theme.lightgrey : \"white\")};\n  img {\n    margin-right: 10px;\n  }\n`;\n\nconst glow = keyframes`\n  from {\n    box-shadow: 0 0 0px yellow;\n  }\n\n  to {\n    box-shadow: 0 0 10px 1px yellow;\n  }\n`;\n\nconst SearchStyles = styled.div`\n  position: relative;\n  input {\n    width: 100%;\n    padding: 10px;\n    border: 0;\n    font-size: 2rem;\n    &.loading {\n      animation: ${glow} 0.5s ease-in-out infinite alternate;\n    }\n  }\n`;\n\nexport { DropDown, DropDownItem, SearchStyles };\n","import styled from \"styled-components\";\n\nconst MultiList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport default MultiList;\n","import styled from \"styled-components\";\n\nconst PaginationStyles = styled.div`\n  /* height: 50px; */\n  text-align: center;\n  display: inline-grid;\n  grid-template-columns: repeat(4, auto);\n  align-items: stretch;\n  justify-content: center;\n  align-content: center;\n  margin: 2rem 0;\n  border: 1px solid ${(props) => props.theme.lightgrey};\n  border-radius: 10px;\n  & > * {\n    margin: 0;\n    padding: 15px 30px;\n    border-right: 1px solid ${(props) => props.theme.lightgrey};\n    &:last-child {\n      border-right: 0;\n    }\n  }\n  a[aria-disabled=\"true\"] {\n    color: grey;\n    pointer-events: none;\n  }\n\n  @media screen and (max-width: 600px) {\n    .pagination-page-number {\n      display: none;\n    }\n    .pagination-count {\n      display: none;\n    }\n  }\n`;\n\nexport default PaginationStyles;\n","import styled from \"styled-components\";\n\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.theme.lightgrey};\n  transition: all 0.3s ease 0s;\n  padding: 20px;\n  box-shadow: ${(props) => props.theme.bs};\n  text-align: ${(props) => (props.isTitle ? \"center\" : \"left\")};\n\n  .title {\n    font-size: 2rem;\n    font-weight: bold;\n  }\n\n  .subtitle {\n    font-size: 1.5rem;\n    font-weight: lighter;\n    font-style: italic;\n  }\n\n  .content {\n    color: ${(props) => props.theme.black};\n    padding-bottom: 10px;\n    flex: 1 0 auto;\n  }\n\n  .format {\n    font-style: italic;\n  }\n\n  .catalognumber {\n    font-style: italic;\n  }\n\n  .publishedby {\n    font-style: italic;\n  }\n\n  .publisheddate {\n    font-style: italic;\n  }\n\n  .releaseddate {\n    font-style: italic;\n  }\n\n  .recordlabel {\n    font-style: italic;\n  }\n\n  .additionalinfo {\n    font-style: italic;\n  }\n\n  .alttitle {\n    font-style: italic;\n  }\n\n  .publisher {\n    font-style: italic;\n  }\n\n  .publisheddate {\n    font-style: italic;\n  }\n\n  .instrumental {\n    font-style: italic;\n  }\n\n  .fromfilm {\n    font-style: italic;\n  }\n\n  .footer {\n    border-top: 2px solid ${(props) => props.theme.black};\n    padding-top: 20px;\n    flex-shrink: 0;\n  }\n`;\n\nexport { CardWrapper };\n","import styled from \"styled-components\";\n\nconst NavStyles = styled.ul`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-self: end;\n  font-size: 2rem;\n  a,\n  button {\n    padding: 1rem 3rem;\n    display: flex;\n    align-items: center;\n    position: relative;\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: 1em;\n    background: none;\n    border: 0;\n    cursor: pointer;\n    color: ${(props) => props.theme.black};\n    font-weight: 800;\n    @media (max-width: 700px) {\n      font-size: 10px;\n      padding: 0 10px;\n    }\n    &:before {\n      content: \"\";\n      width: 2px;\n      background: ${(props) => props.theme.lightgrey};\n      height: 100%;\n      left: 0;\n      position: absolute;\n      /* transform: skew(-20deg); */\n      top: 0;\n      bottom: 0;\n    }\n    &:after {\n      height: 2px;\n      background: ${(props) => props.theme.blue};\n      content: \"\";\n      width: 0;\n      position: absolute;\n      transform: translateX(-50%);\n      transition: width 0.4s;\n      transition-timing-function: cubic-bezier(1, -0.65, 0, 2.31);\n      left: 50%;\n      margin-top: 2rem;\n    }\n\n    &:hover,\n    &:focus {\n      outline: none;\n      &:after {\n        width: calc(100% - 60px);\n      }\n    }\n  }\n  @media (max-width: 1300px) {\n    border-top: 1px solid ${(props) => props.theme.lightgrey};\n    width: 100%;\n    justify-content: center;\n    font-size: 1.5rem;\n  }\n`;\n\nexport default NavStyles;\n","function customTheme(theme) {\n  return {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      primary25: \"#017ad9\",\n      primary: \"#017ad9\",\n    },\n  };\n}\n\nexport default customTheme;\n","import styled from \"styled-components\";\n\nconst Title = styled.h3`\n  margin: 0 1rem;\n  text-align: center;\n  /* transform: skew(-5deg) rotate(-1deg); */\n  /* margin-top: -3rem; */\n  text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);\n  a {\n    background: ${props => props.theme.red};\n    display: inline;\n    line-height: 1;\n    font-size: 2rem;\n    text-align: center;\n    color: white;\n    /* padding: 0 1rem; */\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n  }\n`;\n\nexport default Title;\n","//this is client side config ony. don't put anything in here that\n// shouldn't be public\n\nexport const endpoint = \"http://localhost:4000\";\nexport const prodEndpoint = \"http://www.motowndb.com:4747\";\nexport const perPage = 50;\n","import moment from \"moment\";\n\nexport default function formattedDate(date) {\n  // if the record was released on Jan 1, it probably wasn't and only\n  // the year was available.  So we return true and format just the year.\n  if (moment(date).month() === 0 && moment(date).dayOfYear() === 1) {\n    return moment(date).format(\"YYYY\");\n  }\n  return moment(date).format(\"MMMM Do, YYYY\");\n}\n","export const selectButtonsAthruZWithNumber = [\n  { label: \"A\", value: \"A\" },\n  { label: \"B\", value: \"B\" },\n  { label: \"C\", value: \"C\" },\n  { label: \"D\", value: \"D\" },\n  { label: \"E\", value: \"E\" },\n  { label: \"F\", value: \"F\" },\n  { label: \"G\", value: \"G\" },\n  { label: \"H\", value: \"H\" },\n  { label: \"I\", value: \"I\" },\n  { label: \"J\", value: \"J\" },\n  { label: \"K\", value: \"K\" },\n  { label: \"L\", value: \"L\" },\n  { label: \"M\", value: \"M\" },\n  { label: \"N\", value: \"N\" },\n  { label: \"O\", value: \"O\" },\n  { label: \"P\", value: \"P\" },\n  { label: \"Q\", value: \"Q\" },\n  { label: \"R\", value: \"R\" },\n  { label: \"S\", value: \"S\" },\n  { label: \"T\", value: \"T\" },\n  { label: \"U\", value: \"U\" },\n  { label: \"V\", value: \"V\" },\n  { label: \"W\", value: \"W\" },\n  { label: \"X\", value: \"X\" },\n  { label: \"Y\", value: \"Y\" },\n  { label: \"Z\", value: \"Z\" },\n  { label: \"#\", value: \"#\" },\n  { label: \"All\", value: \"\" },\n];\n\nexport const selectButtonsAthruZ = [\n  { label: \"A\", value: \"A\" },\n  { label: \"B\", value: \"B\" },\n  { label: \"C\", value: \"C\" },\n  { label: \"D\", value: \"D\" },\n  { label: \"E\", value: \"E\" },\n  { label: \"F\", value: \"F\" },\n  { label: \"G\", value: \"G\" },\n  { label: \"H\", value: \"H\" },\n  { label: \"I\", value: \"I\" },\n  { label: \"J\", value: \"J\" },\n  { label: \"K\", value: \"K\" },\n  { label: \"L\", value: \"L\" },\n  { label: \"M\", value: \"M\" },\n  { label: \"N\", value: \"N\" },\n  { label: \"O\", value: \"O\" },\n  { label: \"P\", value: \"P\" },\n  { label: \"Q\", value: \"Q\" },\n  { label: \"R\", value: \"R\" },\n  { label: \"S\", value: \"S\" },\n  { label: \"T\", value: \"T\" },\n  { label: \"U\", value: \"U\" },\n  { label: \"V\", value: \"V\" },\n  { label: \"W\", value: \"W\" },\n  { label: \"X\", value: \"X\" },\n  { label: \"Y\", value: \"Y\" },\n  { label: \"Z\", value: \"Z\" },\n  { label: \"All\", value: \"\" },\n];\n","const sortBySelectItems = [\n  { label: \"Title, ascending\", value: \"title_ASC\" },\n  { label: \"Title, descending\", value: \"title_DESC\" },\n  { label: \"Format, ascending\", value: \"format_DESC\" },\n  { label: \"Format, descending\", value: \"format_ASC\" },\n  { label: \"Release Date, ascending\", value: \"releaseDate_ASC\" },\n  { label: \"Release Date, descending\", value: \"releaseDate_DESC\" },\n  { label: \"Record Label, ascending\", value: \"recordLabel_ASC\" },\n  { label: \"Record Label, descending\", value: \"recordLabel_DESC\" },\n  { label: \"Catalog Number, ascending\", value: \"catalogNumber_ASC\" },\n  { label: \"Catalog Number, descending\", value: \"catalogNumber_DESC\" },\n];\n\nexport default sortBySelectItems;\n","function getSelectLabel(sortBySelectItems, sortBy) {\n  const filteredSelectItem = sortBySelectItems.filter(\n    (item) => item.value === sortBy\n  );\n  return filteredSelectItem[0].label;\n}\n\nexport default getSelectLabel;\n","import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint, prodEndpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    //    uri: process.env.NODE_ENV === \"development\" ? endpoint : endpoint,\n    uri: endpoint,\n    onError: ({ networkError, graphQLErrors }) => {\n      graphQLErrors && graphQLErrors.forEach((gqlErr) => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: (operation) => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\",\n        },\n        headers,\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addOrRemoveLocalIdSelection(_, variables, { cache }) {\n            // read the selectedIds value from the cache\n            const { selectedIds } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            // remove id from local state\n            if (selectedIds.includes(variables.id)) {\n              const newData = selectedIds.filter((id) => id !== variables.id);\n              const data = { data: { selectedIds: newData } };\n              cache.writeData(data);\n              return null;\n            }\n            // add id to local state\n            const newData = [...selectedIds, variables.id];\n            const data = { data: { selectedIds: newData } };\n            cache.writeData(data);\n            return null;\n          },\n          clearSelectedIds(_, variables, { cache }) {\n            const { selectedIds } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            const data = { data: { selectedIds: [] } };\n            cache.writeData(data);\n            return null;\n          },\n        },\n      },\n      defaults: {\n        selectedIds: [],\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nmodule.exports = _interopRequireWildcard;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require('./dist/pages/_app')\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");exports.__esModule=true;exports.default=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _url=require(\"url\");var _utils=require(\"../next-server/lib/utils\");var _router=_interopRequireDefault(require(\"./router\"));function isLocal(href){var url=(0,_url.parse)(href,false,true);var origin=(0,_url.parse)((0,_utils.getLocationOrigin)(),false,true);return!url.host||url.protocol===origin.protocol&&url.host===origin.host;}function memoizedFormatUrl(formatFunc){var lastHref=null;var lastAs=null;var lastResult=null;return(href,as)=>{if(lastResult&&href===lastHref&&as===lastAs){return lastResult;}var result=formatFunc(href,as);lastHref=href;lastAs=as;lastResult=result;return result;};}function formatUrl(url){return url&&typeof url==='object'?(0,_utils.formatWithValidation)(url):url;}var observer;var listeners=new Map();var IntersectionObserver=typeof window!=='undefined'?window.IntersectionObserver:null;var prefetched={};function getObserver(){// Return shared instance of IntersectionObserver if already created\nif(observer){return observer;}// Only create shared IntersectionObserver if supported in browser\nif(!IntersectionObserver){return undefined;}return observer=new IntersectionObserver(entries=>{entries.forEach(entry=>{if(!listeners.has(entry.target)){return;}var cb=listeners.get(entry.target);if(entry.isIntersecting||entry.intersectionRatio>0){observer.unobserve(entry.target);listeners.delete(entry.target);cb();}});},{rootMargin:'200px'});}var listenToIntersections=(el,cb)=>{var observer=getObserver();if(!observer){return()=>{};}observer.observe(el);listeners.set(el,cb);return()=>{try{observer.unobserve(el);}catch(err){console.error(err);}listeners.delete(el);};};class Link extends _react.Component{constructor(props){super(props);this.p=void 0;this.cleanUpListeners=()=>{};this.formatUrls=memoizedFormatUrl((href,asHref)=>{return{href:formatUrl(href),as:asHref?formatUrl(asHref):asHref};});this.linkClicked=e=>{var{nodeName,target}=e.currentTarget;if(nodeName==='A'&&(target&&target!=='_self'||e.metaKey||e.ctrlKey||e.shiftKey||e.nativeEvent&&e.nativeEvent.which===2)){// ignore click for new tab / new window behavior\nreturn;}var{href,as}=this.formatUrls(this.props.href,this.props.as);if(!isLocal(href)){// ignore click if it's outside our scope (e.g. https://google.com)\nreturn;}var{pathname}=window.location;href=(0,_url.resolve)(pathname,href);as=as?(0,_url.resolve)(pathname,as):href;e.preventDefault();//  avoid scroll for urls with anchor refs\nvar{scroll}=this.props;if(scroll==null){scroll=as.indexOf('#')<0;}// replace state instead of push if prop is present\n_router.default[this.props.replace?'replace':'push'](href,as,{shallow:this.props.shallow}).then(success=>{if(!success)return;if(scroll){window.scrollTo(0,0);document.body.focus();}});};if(process.env.NODE_ENV!=='production'){if(props.prefetch){console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/zeit/next.js/prefetch-true-deprecated');}}this.p=props.prefetch!==false;}componentWillUnmount(){this.cleanUpListeners();}getPaths(){var{pathname}=window.location;var{href:parsedHref,as:parsedAs}=this.formatUrls(this.props.href,this.props.as);var resolvedHref=(0,_url.resolve)(pathname,parsedHref);return[resolvedHref,parsedAs?(0,_url.resolve)(pathname,parsedAs):resolvedHref];}handleRef(ref){if(this.p&&IntersectionObserver&&ref&&ref.tagName){this.cleanUpListeners();var isPrefetched=prefetched[this.getPaths().join(// Join on an invalid URI character\n'%')];if(!isPrefetched){this.cleanUpListeners=listenToIntersections(ref,()=>{this.prefetch();});}}}// The function is memoized so that no extra lifecycles are needed\n// as per https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\nprefetch(options){if(!this.p||typeof window==='undefined')return;// Prefetch the JSON page if asked (only in the client)\nvar paths=this.getPaths();// We need to handle a prefetch error here since we may be\n// loading with priority which can reject but we don't\n// want to force navigation since this is only a prefetch\n_router.default.prefetch(paths[/* href */0],paths[/* asPath */1],options).catch(err=>{if(process.env.NODE_ENV!=='production'){// rethrow to show invalid URL errors\nthrow err;}});prefetched[paths.join(// Join on an invalid URI character\n'%')]=true;}render(){var{children}=this.props;var{href,as}=this.formatUrls(this.props.href,this.props.as);// Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag\nif(typeof children==='string'){children=_react.default.createElement(\"a\",null,children);}// This will return the first child, if multiple are provided it will throw an error\nvar child=_react.Children.only(children);var props={ref:el=>{this.handleRef(el);if(child&&typeof child==='object'&&child.ref){if(typeof child.ref==='function')child.ref(el);else if(typeof child.ref==='object'){child.ref.current=el;}}},onMouseEnter:e=>{if(child.props&&typeof child.props.onMouseEnter==='function'){child.props.onMouseEnter(e);}this.prefetch({priority:true});},onClick:e=>{if(child.props&&typeof child.props.onClick==='function'){child.props.onClick(e);}if(!e.defaultPrevented){this.linkClicked(e);}}};// If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n// defined, we specify the current 'href', so that repetition is not needed by the user\nif(this.props.passHref||child.type==='a'&&!('href'in child.props)){props.href=as||href;}// Add the ending slash to the paths. So, we can serve the\n// \"<page>/index.html\" directly.\nif(process.env.__NEXT_EXPORT_TRAILING_SLASH){var rewriteUrlForNextExport=require('../next-server/lib/router/rewrite-url-for-export').rewriteUrlForNextExport;if(props.href&&typeof __NEXT_DATA__!=='undefined'&&__NEXT_DATA__.nextExport){props.href=rewriteUrlForNextExport(props.href);}}return _react.default.cloneElement(child,props);}}if(process.env.NODE_ENV==='development'){var warn=(0,_utils.execOnce)(console.error);// This module gets removed by webpack.IgnorePlugin\nvar PropTypes=require('prop-types');var exact=require('prop-types-exact');// @ts-ignore the property is supported, when declaring it on the class it outputs an extra bit of code which is not needed.\nLink.propTypes=exact({href:PropTypes.oneOfType([PropTypes.string,PropTypes.object]).isRequired,as:PropTypes.oneOfType([PropTypes.string,PropTypes.object]),prefetch:PropTypes.bool,replace:PropTypes.bool,shallow:PropTypes.bool,passHref:PropTypes.bool,scroll:PropTypes.bool,children:PropTypes.oneOfType([PropTypes.element,(props,propName)=>{var value=props[propName];if(typeof value==='string'){warn(\"Warning: You're using a string directly inside <Link>. This usage has been deprecated. Please add an <a> tag as child of <Link>\");}return null;}]).isRequired});}var _default=Link;exports.default=_default;","\"use strict\";var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");exports.__esModule=true;exports.useRouter=useRouter;exports.makePublicRouterInstance=makePublicRouterInstance;exports.createRouter=exports.withRouter=exports.default=void 0;var _react=_interopRequireDefault(require(\"react\"));var _router2=_interopRequireWildcard(require(\"../next-server/lib/router/router\"));exports.Router=_router2.default;exports.NextRouter=_router2.NextRouter;var _routerContext=require(\"../next-server/lib/router-context\");var _withRouter=_interopRequireDefault(require(\"./with-router\"));exports.withRouter=_withRouter.default;/* global window */var singletonRouter={router:null,// holds the actual router instance\nreadyCallbacks:[],ready(cb){if(this.router)return cb();if(typeof window!=='undefined'){this.readyCallbacks.push(cb);}}};// Create public properties and methods of the router in the singletonRouter\nvar urlPropertyFields=['pathname','route','query','asPath','components','isFallback'];var routerEvents=['routeChangeStart','beforeHistoryChange','routeChangeComplete','routeChangeError','hashChangeStart','hashChangeComplete'];var coreMethodFields=['push','replace','reload','back','prefetch','beforePopState'];// Events is a static property on the router, the router doesn't have to be initialized to use it\nObject.defineProperty(singletonRouter,'events',{get(){return _router2.default.events;}});urlPropertyFields.forEach(field=>{// Here we need to use Object.defineProperty because, we need to return\n// the property assigned to the actual router\n// The value might get changed as we change routes and this is the\n// proper way to access it\nObject.defineProperty(singletonRouter,field,{get(){var router=getRouter();return router[field];}});});coreMethodFields.forEach(field=>{// We don't really know the types here, so we add them later instead\n;singletonRouter[field]=function(){var router=getRouter();return router[field](...arguments);};});routerEvents.forEach(event=>{singletonRouter.ready(()=>{_router2.default.events.on(event,function(){var eventField=\"on\"+event.charAt(0).toUpperCase()+event.substring(1);var _singletonRouter=singletonRouter;if(_singletonRouter[eventField]){try{_singletonRouter[eventField](...arguments);}catch(err){// tslint:disable-next-line:no-console\nconsole.error(\"Error when running the Router event: \"+eventField);// tslint:disable-next-line:no-console\nconsole.error(err.message+\"\\n\"+err.stack);}}});});});function getRouter(){if(!singletonRouter.router){var message='No router instance found.\\n'+'You should only use \"next/router\" inside the client side of your app.\\n';throw new Error(message);}return singletonRouter.router;}// Export the singletonRouter and this is the public API.\nvar _default=singletonRouter;// Reexport the withRoute HOC\nexports.default=_default;function useRouter(){return _react.default.useContext(_routerContext.RouterContext);}// INTERNAL APIS\n// -------------\n// (do not use following exports inside the app)\n// Create a router and assign it as the singleton instance.\n// This is used in client side when we are initilizing the app.\n// This should **not** use inside the server.\nvar createRouter=function createRouter(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}singletonRouter.router=new _router2.default(...args);singletonRouter.readyCallbacks.forEach(cb=>cb());singletonRouter.readyCallbacks=[];return singletonRouter.router;};// This function is used to create the `withRouter` router instance\nexports.createRouter=createRouter;function makePublicRouterInstance(router){var _router=router;var instance={};for(var property of urlPropertyFields){if(typeof _router[property]==='object'){instance[property]=Object.assign({},_router[property]);// makes sure query is not stateful\ncontinue;}instance[property]=_router[property];}// Events is a static property on the router, the router doesn't have to be initialized to use it\ninstance.events=_router2.default.events;coreMethodFields.forEach(field=>{instance[field]=function(){return _router[field](...arguments);};});return instance;}","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");exports.__esModule=true;exports.default=withRouter;var _react=_interopRequireDefault(require(\"react\"));var _router=require(\"./router\");function withRouter(ComposedComponent){function WithRouterWrapper(props){return _react.default.createElement(ComposedComponent,Object.assign({router:(0,_router.useRouter)()},props));}WithRouterWrapper.getInitialProps=ComposedComponent.getInitialProps// This is needed to allow checking for custom getInitialProps in _app\n;WithRouterWrapper.origGetInitialProps=ComposedComponent.origGetInitialProps;if(process.env.NODE_ENV!=='production'){var name=ComposedComponent.displayName||ComposedComponent.name||'Unknown';WithRouterWrapper.displayName=\"withRouter(\"+name+\")\";}return WithRouterWrapper;}","\"use strict\";\n/*\nMIT License\n\nCopyright (c) Jason Miller (https://jasonformat.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction mitt() {\n    const all = Object.create(null);\n    return {\n        on(type, handler) {\n            ;\n            (all[type] || (all[type] = [])).push(handler);\n        },\n        off(type, handler) {\n            if (all[type]) {\n                // tslint:disable-next-line:no-bitwise\n                all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n            }\n        },\n        emit(type, ...evts) {\n            // eslint-disable-next-line array-callback-return\n            ;\n            (all[type] || []).slice().map((handler) => {\n                handler(...evts);\n            });\n        },\n    };\n}\nexports.default = mitt;\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = __importStar(require(\"react\"));\nexports.RouterContext = React.createContext(null);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nfunction addBasePath(path) {\n    // variable is always a string\n    const p = process.env.__NEXT_ROUTER_BASEPATH;\n    return path.indexOf(p) !== 0 ? p + path : path;\n}\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nconst prepareRoute = (path) => toRoute(!path || path === '/' ? '/index' : path);\nfunction fetchNextData(pathname, query, isServerRender, cb) {\n    let attempts = isServerRender ? 3 : 1;\n    function getResponse() {\n        return fetch(utils_1.formatWithValidation({\n            // @ts-ignore __NEXT_DATA__\n            pathname: `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`,\n            query,\n        }), {\n            // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n            // Cookies may also be required for `getServerSideProps`.\n            //\n            // > `fetch` won’t send cookies, unless you set the credentials init\n            // > option.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n            //\n            // > For maximum browser compatibility when it comes to sending &\n            // > receiving cookies, always supply the `credentials: 'same-origin'`\n            // > option instead of relying on the default.\n            // https://github.com/github/fetch#caveats\n            credentials: 'same-origin',\n        }).then(res => {\n            if (!res.ok) {\n                if (--attempts > 0 && res.status >= 500) {\n                    return getResponse();\n                }\n                throw new Error(`Failed to load static props`);\n            }\n            return res.json();\n        });\n    }\n    return getResponse()\n        .then(data => {\n        return cb ? cb(data) : data;\n    })\n        .catch((err) => {\n        // We should only trigger a server-side transition if this was caused\n        // on a client-side transition. Otherwise, we'd get into an infinite\n        // loop.\n        if (!isServerRender) {\n            ;\n            err.code = 'PAGE_LOAD_ERROR';\n        }\n        throw err;\n    });\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, isFallback, }) {\n        // Static Data Cache\n        this.sdc = {};\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state &&\n                this.isSsr &&\n                e.state.as === this.asPath &&\n                url_1.parse(e.state.url).pathname === this.pathname) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        this._getStaticData = (asPath) => {\n            const pathname = prepareRoute(url_1.parse(asPath).pathname);\n            return process.env.NODE_ENV === 'production' && this.sdc[pathname]\n                ? Promise.resolve(this.sdc[pathname])\n                : fetchNextData(pathname, null, this.isSsr, data => (this.sdc[pathname] = data));\n        };\n        this._getServerData = (asPath) => {\n            let { pathname, query } = url_1.parse(asPath, true);\n            pathname = prepareRoute(pathname);\n            return fetchNextData(pathname, query, this.isSsr);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = {\n                Component,\n                props: initialProps,\n                err,\n                __N_SSG: initialProps && initialProps.__N_SSG,\n                __N_SSP: initialProps && initialProps.__N_SSP,\n            };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        this.asPath =\n            // @ts-ignore this is temporarily global (attached to window)\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        // make sure to ignore extra popState in safari on navigating\n        // back from external site\n        this.isSsr = true;\n        this.isFallback = isFallback;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n        }\n    }\n    // @deprecated backwards compatibility even though it's a private method.\n    static _rewriteUrlForNextExport(url) {\n        if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n            const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n                .rewriteUrlForNextExport;\n            return rewriteUrlForNextExport(url);\n        }\n        else {\n            return url;\n        }\n    }\n    update(route, mod) {\n        const Component = mod.default || mod;\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign(Object.assign({}, data), { Component, __N_SSG: mod.__N_SSG, __N_SSP: mod.__N_SSP });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            if (!options._h) {\n                this.isSsr = false;\n            }\n            // marking route changes as a navigation start entry\n            if (utils_1.ST) {\n                performance.mark('routeChange');\n            }\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n                    .rewriteUrlForNextExport;\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, addBasePath(as), options);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query, protocol } = url_1.parse(url, true);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return resolve(false);\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const routeRegex = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(routeRegex)(asPathname);\n                if (!routeMatch) {\n                    const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n                    if (missingParams.length > 0) {\n                        if (process.env.NODE_ENV !== 'production') {\n                            console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                                `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n                        }\n                        return reject(new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n                            `Read more: https://err.sh/zeit/next.js/incompatible-href-as`));\n                    }\n                }\n                else {\n                    // Merge params into `query`, overwriting any specified in search\n                    Object.assign(query, routeMatch);\n                }\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, addBasePath(as), options);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                this.set(route, pathname, query, as, routeInfo);\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            window.history[method]({\n                url,\n                as,\n                options,\n            }, \n            // Most browsers currently ignores this parameter, although they may use it in the future.\n            // Passing the empty string here should be safe against future changes to the method.\n            // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n            '', as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        const handleError = (err, loadErrorFail) => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error')\n                    .then(res => {\n                    const { page: Component } = res;\n                    const routeInfo = { Component, err };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query,\n                        }).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                })\n                    .catch(err => handleError(err, true)));\n            });\n        };\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(res => resolve({\n                Component: res.page,\n                __N_SSG: res.mod.__N_SSG,\n                __N_SSP: res.mod.__N_SSP,\n            }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component, __N_SSG, __N_SSP } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return this._getData(() => __N_SSG\n                ? this._getStaticData(as)\n                : __N_SSP\n                    ? this._getServerData(as)\n                    : this.getInitialProps(Component, \n                    // we provide AppTree later so this needs to be `any`\n                    {\n                        pathname,\n                        query,\n                        asPath: as,\n                    })).then(props => {\n                routeInfo.props = props;\n                this.components[route] = routeInfo;\n                return routeInfo;\n            });\n        })\n            .catch(handleError);\n    }\n    set(route, pathname, query, as, data) {\n        this.isFallback = false;\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch page code, you may wait for the data during page rendering.\n     * This feature only works in production!\n     * @param url the href of prefetched page\n     * @param asPath the as path of the prefetched page\n     */\n    prefetch(url, asPath = url, options = {}) {\n        return new Promise((resolve, reject) => {\n            const { pathname, protocol } = url_1.parse(url);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return;\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production') {\n                return;\n            }\n            Promise.all([\n                this.pageLoader.prefetchData(url, asPath),\n                this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](toRoute(pathname)),\n            ]).then(() => resolve(), reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        const componentResult = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return componentResult;\n    }\n    _getData(fn) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        return fn().then(data => {\n            if (cancel === this.clc) {\n                this.clc = null;\n            }\n            if (cancelled) {\n                const err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n            }\n            return data;\n        });\n    }\n    getInitialProps(Component, ctx) {\n        const { Component: App } = this.components['/_app'];\n        const AppTree = this._wrapApp(App);\n        ctx.AppTree = AppTree;\n        return utils_1.loadGetInitialProps(App, {\n            AppTree,\n            Component,\n            router: this,\n            ctx,\n        });\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nexports.default = Router;\nRouter.events = mitt_1.default();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Identify /[param]/ in route string\nconst TEST_ROUTE = /\\/\\[[^/]+?\\](?=\\/|$)/;\nfunction isDynamicRoute(route) {\n    return TEST_ROUTE.test(route);\n}\nexports.isDynamicRoute = isDynamicRoute;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getRouteMatcher(routeRegex) {\n    const { re, groups } = routeRegex;\n    return (pathname) => {\n        const routeMatch = re.exec(pathname);\n        if (!routeMatch) {\n            return false;\n        }\n        const decode = decodeURIComponent;\n        const params = {};\n        Object.keys(groups).forEach((slugName) => {\n            const g = groups[slugName];\n            const m = routeMatch[g.pos];\n            if (m !== undefined) {\n                params[slugName] = ~m.indexOf('/')\n                    ? m.split('/').map(entry => decode(entry))\n                    : g.repeat\n                        ? [decode(m)]\n                        : decode(m);\n            }\n        });\n        return params;\n    };\n}\nexports.getRouteMatcher = getRouteMatcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getRouteRegex(normalizedRoute) {\n    // Escape all characters that could be considered RegEx\n    const escapedRoute = (normalizedRoute.replace(/\\/$/, '') || '/').replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n    const groups = {};\n    let groupIndex = 1;\n    const parameterizedRoute = escapedRoute.replace(/\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g, (_, $1) => {\n        const isCatchAll = /^(\\\\\\.){3}/.test($1);\n        groups[$1\n            // Un-escape key\n            .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n            .replace(/^\\.{3}/, '')\n        // eslint-disable-next-line no-sequences\n        ] = { pos: groupIndex++, repeat: isCatchAll };\n        return isCatchAll ? '/(.+?)' : '/([^/]+?)';\n    });\n    return {\n        re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n        groups,\n    };\n}\nexports.getRouteRegex = getRouteRegex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\n/**\n * Utils\n */\nfunction execOnce(fn) {\n    let used = false;\n    let result = null;\n    return (...args) => {\n        if (!used) {\n            used = true;\n            result = fn.apply(this, args);\n        }\n        return result;\n    };\n}\nexports.execOnce = execOnce;\nfunction getLocationOrigin() {\n    const { protocol, hostname, port } = window.location;\n    return `${protocol}//${hostname}${port ? ':' + port : ''}`;\n}\nexports.getLocationOrigin = getLocationOrigin;\nfunction getURL() {\n    const { href } = window.location;\n    const origin = getLocationOrigin();\n    return href.substring(origin.length);\n}\nexports.getURL = getURL;\nfunction getDisplayName(Component) {\n    return typeof Component === 'string'\n        ? Component\n        : Component.displayName || Component.name || 'Unknown';\n}\nexports.getDisplayName = getDisplayName;\nfunction isResSent(res) {\n    return res.finished || res.headersSent;\n}\nexports.isResSent = isResSent;\nasync function loadGetInitialProps(App, ctx) {\n    var _a;\n    if (process.env.NODE_ENV !== 'production') {\n        if ((_a = App.prototype) === null || _a === void 0 ? void 0 : _a.getInitialProps) {\n            const message = `\"${getDisplayName(App)}.getInitialProps()\" is defined as an instance method - visit https://err.sh/zeit/next.js/get-initial-props-as-an-instance-method for more information.`;\n            throw new Error(message);\n        }\n    }\n    // when called from _app `ctx` is nested in `ctx`\n    const res = ctx.res || (ctx.ctx && ctx.ctx.res);\n    if (!App.getInitialProps) {\n        if (ctx.ctx && ctx.Component) {\n            // @ts-ignore pageProps default\n            return {\n                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n            };\n        }\n        return {};\n    }\n    const props = await App.getInitialProps(ctx);\n    if (res && isResSent(res)) {\n        return props;\n    }\n    if (!props) {\n        const message = `\"${getDisplayName(App)}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`;\n        throw new Error(message);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        if (Object.keys(props).length === 0 && !ctx.ctx) {\n            console.warn(`${getDisplayName(App)} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://err.sh/zeit/next.js/empty-object-getInitialProps`);\n        }\n    }\n    return props;\n}\nexports.loadGetInitialProps = loadGetInitialProps;\nexports.urlObjectKeys = [\n    'auth',\n    'hash',\n    'host',\n    'hostname',\n    'href',\n    'path',\n    'pathname',\n    'port',\n    'protocol',\n    'query',\n    'search',\n    'slashes',\n];\nfunction formatWithValidation(url, options) {\n    if (process.env.NODE_ENV === 'development') {\n        if (url !== null && typeof url === 'object') {\n            Object.keys(url).forEach(key => {\n                if (exports.urlObjectKeys.indexOf(key) === -1) {\n                    console.warn(`Unknown key passed via urlObject into url.format: ${key}`);\n                }\n            });\n        }\n    }\n    return url_1.format(url, options);\n}\nexports.formatWithValidation = formatWithValidation;\nexports.SP = typeof performance !== 'undefined';\nexports.ST = exports.SP &&\n    typeof performance.mark === 'function' &&\n    typeof performance.measure === 'function';\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");exports.__esModule=true;exports.Container=Container;exports.createUrl=createUrl;exports.default=void 0;var _react=_interopRequireDefault(require(\"react\"));var _utils=require(\"../next-server/lib/utils\");exports.AppInitialProps=_utils.AppInitialProps;/**\n * `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.\n * This allows for keeping state between navigation, custom error handling, injecting additional data.\n */async function appGetInitialProps(_ref){var{Component,ctx}=_ref;var pageProps=await(0,_utils.loadGetInitialProps)(Component,ctx);return{pageProps};}class App extends _react.default.Component{// Kept here for backwards compatibility.\n// When someone ended App they could call `super.componentDidCatch`.\n// @deprecated This method is no longer needed. Errors are caught at the top level\ncomponentDidCatch(error,_errorInfo){throw error;}render(){var{router,Component,pageProps,__N_SSG,__N_SSP}=this.props;return _react.default.createElement(Component,Object.assign({},pageProps,// we don't add the legacy URL prop if it's using non-legacy\n// methods like getStaticProps and getServerSideProps\n!(__N_SSG||__N_SSP)?{url:createUrl(router)}:{}));}}exports.default=App;App.origGetInitialProps=appGetInitialProps;App.getInitialProps=appGetInitialProps;var warnContainer;var warnUrl;if(process.env.NODE_ENV!=='production'){warnContainer=(0,_utils.execOnce)(()=>{console.warn(\"Warning: the `Container` in `_app` has been deprecated and should be removed. https://err.sh/zeit/next.js/app-container-deprecated\");});warnUrl=(0,_utils.execOnce)(()=>{console.error(\"Warning: the 'url' property is deprecated. https://err.sh/zeit/next.js/url-deprecated\");});}// @deprecated noop for now until removal\nfunction Container(p){if(process.env.NODE_ENV!=='production')warnContainer();return p.children;}function createUrl(router){// This is to make sure we don't references the router object at call time\nvar{pathname,asPath,query}=router;return{get query(){if(process.env.NODE_ENV!=='production')warnUrl();return query;},get pathname(){if(process.env.NODE_ENV!=='production')warnUrl();return pathname;},get asPath(){if(process.env.NODE_ENV!=='production')warnUrl();return asPath;},back:()=>{if(process.env.NODE_ENV!=='production')warnUrl();router.back();},push:(url,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();return router.push(url,as);},pushTo:(href,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();var pushRoute=as?href:'';var pushUrl=as||href;return router.push(pushRoute,pushUrl);},replace:(url,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();return router.replace(url,as);},replaceTo:(href,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();var replaceRoute=as?href:'';var replaceUrl=as||href;return router.replace(replaceRoute,replaceUrl);}};}","module.exports = require('./dist/client/link')\n","import App from \"next/app\";\nimport Page from \"../components/Page\";\nimport { ApolloProvider } from \"react-apollo\";\nimport withData from \"../lib/withData\";\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n    // this exposes the query to the user\n    pageProps.query = ctx.query;\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, apollo, pageProps } = this.props;\n\n    return (\n      <ApolloProvider client={apollo}>\n        <Page>\n          <Component {...pageProps} />\n        </Page>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withData(MyApp);\n","module.exports = \"data:font/woff2;base64,\"","module.exports = \"data:font/woff2;base64,\"","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"apollo-boost\");","module.exports = require(\"downshift\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"lodash.debounce\");","module.exports = require(\"moment\");","module.exports = require(\"next-with-apollo\");","module.exports = require(\"next/head\");","module.exports = require(\"next/router\");","module.exports = require(\"nprogress\");","module.exports = require(\"primereact/checkbox\");","module.exports = require(\"primereact/paginator\");","module.exports = require(\"primereact/progressbar\");","module.exports = require(\"primereact/selectbutton\");","module.exports = require(\"prop-types\");","module.exports = require(\"prop-types-exact\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"react-is\");","module.exports = require(\"react-select\");","module.exports = require(\"styled-components\");","module.exports = require(\"url\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;AAAA;AAWA;;;;AAAA;AAMA;;;;;;;;AAAA;AAUA;;;;;;;AAAA;AASA;;;;AAAA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;;;;AAAA;AAMA;;;;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAAA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;AAGA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;AAxBA;AA6BA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAAA;AASA;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAwBA;;;;;;;;AAAA;AASA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA0BA;;;;;;;;AAAA;AASA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAyBA;;;;;;;;AAAA;AASA;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAwBA;;;;;;;;AAAA;AASA;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAwBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAvBA;AACA;AAyBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;;;;;;AAAA;AAgBA;;;;;;;AAAA;AASA;;;;;;;AAAA;AAQA;;;;;;;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAHA;AACA;AAFA;AAOA;AAAA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAFA;AAIA;AAEA;AAKA;AANA;AAQA;AA1BA;AACA;AA2BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA7FA;AACA;AA8FA;;;;;;;;;;;;;;;;;;;;;;AChMA;AACA;AACA;AACA;AAEA;;;;;;AAAA;AACA;AAOA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAAA;AAMA;AACA;;;;;;;;;;;;;;;AADA;AAkBA;AACA;;;;;;;;;;;;;;;AADA;AAkBA;AACA;;;;;;;;;;;;;;;AADA;AACA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;AC5KA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAeA;AAUA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAWA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAkCA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAgEA;;;;;;;;;;;;;;;;;;;AClEA;AACA;AAEA;AAEA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAqBA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AC1DA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;;;;;;;ACbA;AAAA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA3BA;AADA;AA8BA;AACA;AADA;AA/BA;AAhBA;AAoDA;AACA;AACA;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChBA;;;;;;;;;;;;;ACAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA,+CAAA;AACA;AADA;AAAA;AACA;AApBA;AACA;AAkBA;AAAA;AACA;AAAA;AACA;AADA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;;;;;;;;;;;;ACvrBA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;AAWA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAmBA;AACA;AAAA;;;;;;;;;;;;ACnCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;ACVA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA,iBAKA;AACA;AACA;AACA;AAAA;AACA,iBAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA,mBAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA/eA;AACA;AA+eA;AACA;;;;;;;;;;;;ACljBA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;ACPA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;ACzBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;;;;;;;;;;;;ACtBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;ACtGA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAtBA;AACA;AAuBA;;;;;;;;;;;AC7BA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}