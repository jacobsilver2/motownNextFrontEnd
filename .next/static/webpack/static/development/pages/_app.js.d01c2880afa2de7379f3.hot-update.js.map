{"version":3,"file":"static/webpack/static/development/pages/_app.js.d01c2880afa2de7379f3.hot-update.js","sources":["webpack:///./lib/withData.js"],"sourcesContent":["import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint, prodEndpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === \"development\" ? endpoint : prodEndpoint,\n    onError: ({ networkError, graphQLErrors }) => {\n      graphQLErrors && graphQLErrors.forEach((gqlErr) => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: (operation) => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\",\n        },\n        headers,\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addOrRemoveLocalIdSelection(_, variables, { cache }) {\n            // read the selectedIds value from the cache\n            const { selectedIds } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            // remove id from local state\n            if (selectedIds.includes(variables.id)) {\n              const newData = selectedIds.filter((id) => id !== variables.id);\n              const data = { data: { selectedIds: newData } };\n              cache.writeData(data);\n              return null;\n            }\n            // add id to local state\n            const newData = [...selectedIds, variables.id];\n            const data = { data: { selectedIds: newData } };\n            cache.writeData(data);\n            return null;\n          },\n          clearSelectedIds(_, variables, { cache }) {\n            const { selectedIds } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            const data = { data: { selectedIds: [] } };\n            cache.writeData(data);\n            return null;\n          },\n        },\n      },\n      defaults: {\n        selectedIds: [],\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AADA;AAFA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AADA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA1BA;AADA;AA8BA;AACA;AADA;AA/BA;AAfA;AAmDA;AACA;AACA;;;;A","sourceRoot":""}