{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Songs.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nconst ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY {\n    songs {\n      id\n      title\n      publisher\n      publishedDate\n    }\n  }\n`;\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst Songs = ({}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_SONGS_QUERY);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Error :(\");\n  const songs = data.songs.map(song => __jsx(\"p\", {\n    key: song.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, song.title));\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"I found \", songs.length, \" songs.\")), songs);\n};\n\nexport default Songs;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Songs.js"],"names":["React","useQuery","gql","styled","ALL_SONGS_QUERY","Center","div","Songs","loading","error","data","songs","map","song","id","title","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,eAAe,GAAGF,GAAI;;;;;;;;;CAA5B;AAWA,MAAMG,MAAM,GAAGF,MAAM,CAACG,GAAI;;CAA1B;;AAIA,MAAMC,KAAK,GAAG,CAAC,EAAD,KAAQ;AACpB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACG,eAAD,CAAzC;AACA,MAAII,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,QAAME,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAAI;AAAG,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBD,IAAI,CAACE,KAAvB,CAAvB,CAAd;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYJ,KAAK,CAACK,MAAlB,YADF,CADF,EAIGL,KAJH,CADF;AAQD,CAfD;;AAiBA,eAAeJ,KAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\n\nconst ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY {\n    songs {\n      id\n      title\n      publisher\n      publishedDate\n    }\n  }\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst Songs = ({}) => {\n  const { loading, error, data } = useQuery(ALL_SONGS_QUERY);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const songs = data.songs.map(song => <p key={song.id}>{song.title}</p>);\n\n  return (\n    <Center>\n      <p>\n        <b>I found {songs.length} songs.</b>\n      </p>\n      {songs}\n    </Center>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}