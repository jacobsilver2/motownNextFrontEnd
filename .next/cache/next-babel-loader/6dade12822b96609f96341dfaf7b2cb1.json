{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleArtist.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nconst SingleArtistStyles = styled.div.withConfig({\n  displayName: \"SingleArtist__SingleArtistStyles\",\n  componentId: \"sc-1t9u136-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.name{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n      albums {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleArtist = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"No song found for \", id); // console.log(data.song);\n\n  const {\n    name,\n    songs,\n    albums\n  } = data.song;\n  return __jsx(SingleArtistStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, name), songs && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Songs \", name, \" have recorded:\", \" \", songs.map(song => __jsx(\"p\", {\n    key: song.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, song.name))), albums && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Can be heard on the albums:\", \" \", albums.map(album => __jsx(\"p\", {\n    key: album.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, album.title)))));\n};\n\nexport default SingleArtist;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleArtist.js"],"names":["React","gql","useQuery","ErrorMessage","styled","SingleArtistStyles","div","props","theme","bs","SINGLE_ARTIST_QUERY","SingleArtist","id","loading","error","data","variables","song","name","songs","albums","map","album","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,kBAAkB,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,mMAGRC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,EAHb,CAAxB;AAiBA,MAAMC,mBAAmB,GAAGT,GAAI;;;;;;;;;;;;;;;CAAhC;;AAiBA,MAAMU,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC/B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bb,QAAQ,CAACQ,mBAAD,EAAsB;AAC7DM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADkD,GAAtB,CAAzC;AAGA,MAAIE,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAI,CAACE,IAAI,CAACE,IAAV,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBL,EAAtB,CAAP,CANe,CAO/B;;AACA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA0BL,IAAI,CAACE,IAArC;AACA,SACE,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBC,IAAtB,CADF,EAEGC,KAAK,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACSD,IADT,qBAC8B,GAD9B,EAEGC,KAAK,CAACE,GAAN,CAAUJ,IAAI,IACb;AAAG,IAAA,GAAG,EAAEA,IAAI,CAACL,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBK,IAAI,CAACC,IAAvB,CADD,CAFH,CAHJ,EAUGE,MAAM,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC8B,GAD9B,EAEGA,MAAM,CAACC,GAAP,CAAWC,KAAK,IACf;AAAG,IAAA,GAAG,EAAEA,KAAK,CAACV,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBU,KAAK,CAACC,KAAzB,CADD,CAFH,CAXJ,CADF,CADF;AAuBD,CAhCD;;AAkCA,eAAeZ,YAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\n\nconst SingleArtistStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .name {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n      albums {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleArtist = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: { id }\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  // console.log(data.song);\n  const { name, songs, albums } = data.song;\n  return (\n    <SingleArtistStyles>\n      <div className=\"details\">\n        <h1 className=\"name\">{name}</h1>\n        {songs && (\n          <h2>\n            Songs {name} have recorded:{\" \"}\n            {songs.map(song => (\n              <p key={song.id}>{song.name}</p>\n            ))}\n          </h2>\n        )}\n        {albums && (\n          <h2>\n            Can be heard on the albums:{\" \"}\n            {albums.map(album => (\n              <p key={album.id}>{album.title}</p>\n            ))}\n          </h2>\n        )}\n      </div>\n    </SingleArtistStyles>\n  );\n};\n\nexport default SingleArtist;\n"]},"metadata":{},"sourceType":"module"}