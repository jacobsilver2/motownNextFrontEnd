{"ast":null,"code":"import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    uri: true ? endpoint : endpoint,\n    onError: ({\n      networkError,\n      graphQLErrors\n    }) => {\n      graphQLErrors && graphQLErrors.forEach(gqlErr => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addToLocalIdSelectionMutation(_, variables, {\n            cache\n          }) {// read the selectedIds value from the cache\n          }\n\n        }\n      },\n      defaults: {\n        selectedIds: [\"test string\"]\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","LOCAL_STATE_QUERY","createClient","headers","uri","onError","networkError","graphQLErrors","forEach","gqlErr","console","log","request","operation","setContext","fetchOptions","credentials","clientState","resolvers","Mutation","addToLocalIdSelectionMutation","_","variables","cache","defaults","selectedIds"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIJ,YAAJ,CAAiB;AACtBK,IAAAA,GAAG,EAAE,OAAyCJ,QAAzC,GAAoDA,QADnC;AAEtBK,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,KAAqC;AAC5CA,MAAAA,aAAa,IAAIA,aAAa,CAACC,OAAd,CAAuBC,MAAD,IAAYC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAlC,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBL,YAAa,EAA1C;AACD,KALqB;AAMtBM,IAAAA,OAAO,EAAGC,SAAD,IAAe;AACtBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBb,QAAAA;AAJmB,OAArB;AAMD,KAbqB;AActB;AACAc,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,6BAA6B,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAAEC,YAAAA;AAAF,WAAf,EAA0B,CACrD;AACD;;AAHO;AADD,OADA;AAQXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,WAAW,EAAE,CAAC,aAAD;AADL;AARC;AAfS,GAAjB,CAAP;AA4BD;;AAED,eAAe3B,UAAU,CAACI,YAAD,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === \"development\" ? endpoint : endpoint,\n    onError: ({ networkError, graphQLErrors }) => {\n      graphQLErrors && graphQLErrors.forEach((gqlErr) => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: (operation) => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\",\n        },\n        headers,\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addToLocalIdSelectionMutation(_, variables, { cache }) {\n            // read the selectedIds value from the cache\n          },\n        },\n      },\n      defaults: {\n        selectedIds: [\"test string\"],\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}