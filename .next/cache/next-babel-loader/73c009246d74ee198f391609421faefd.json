{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleComposer.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_COMPOSER_QUERY($id: ID!) {\\n    composer(where: { id: $id }) {\\n      id\\n      name\\n      songs {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nvar SingleComposerStyles = styled.div.withConfig({\n  displayName: \"SingleComposer__SingleComposerStyles\",\n  componentId: \"sc-1g72zdd-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.name{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n});\nvar SINGLE_COMPOSER_QUERY = gql(_templateObject());\n\nvar SingleComposer = function SingleComposer(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_COMPOSER_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.composer) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"No composer found for \", id); // console.log(data.song);\n\n  var _data$composer = data.composer,\n      name = _data$composer.name,\n      songs = _data$composer.songs;\n  return __jsx(SingleComposerStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, name), songs && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, name, \" has either written or co-written \", songs.length, \" songs:\", \" \", songs.map(function (song) {\n    return __jsx(\"p\", {\n      key: song.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, song.title);\n  }))));\n};\n\nexport default SingleComposer;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleComposer.js"],"names":["React","gql","useQuery","ErrorMessage","styled","SingleComposerStyles","div","props","theme","bs","SINGLE_COMPOSER_QUERY","SingleComposer","id","variables","loading","error","data","composer","name","songs","length","map","song","title"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,oBAAoB,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,mMAGV,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,EAAhB;AAAA,CAHK,CAA1B;AAiBA,IAAMC,qBAAqB,GAAGT,GAAH,mBAA3B;;AAaA,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACAV,QAAQ,CAACQ,qBAAD,EAAwB;AAC/DG,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADoD,GAAxB,CADR;AAAA,MACzBE,OADyB,aACzBA,OADyB;AAAA,MAChBC,KADgB,aAChBA,KADgB;AAAA,MACTC,IADS,aACTA,IADS;;AAIjC,MAAID,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAI,CAACE,IAAI,CAACC,QAAV,EAAoB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0BL,EAA1B,CAAP,CANa,CAOjC;;AAPiC,uBAQTI,IAAI,CAACC,QARI;AAAA,MAQzBC,IARyB,kBAQzBA,IARyB;AAAA,MAQnBC,KARmB,kBAQnBA,KARmB;AASjC,SACE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBD,IAAtB,CADF,EAEGC,KAAK,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IADH,wCAC2CC,KAAK,CAACC,MADjD,aACgE,GADhE,EAEGD,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI;AAAA,WACb;AAAG,MAAA,GAAG,EAAEA,IAAI,CAACV,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkBU,IAAI,CAACC,KAAvB,CADa;AAAA,GAAd,CAFH,CAHJ,CADF,CADF;AAeD,CAxBD;;AA0BA,eAAeZ,cAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\n\nconst SingleComposerStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .name {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst SINGLE_COMPOSER_QUERY = gql`\n  query SINGLE_COMPOSER_QUERY($id: ID!) {\n    composer(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleComposer = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_COMPOSER_QUERY, {\n    variables: { id }\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.composer) return <p>No composer found for {id}</p>;\n  // console.log(data.song);\n  const { name, songs } = data.composer;\n  return (\n    <SingleComposerStyles>\n      <div className=\"details\">\n        <h1 className=\"name\">{name}</h1>\n        {songs && (\n          <h2>\n            {name} has either written or co-written {songs.length} songs:{\" \"}\n            {songs.map(song => (\n              <p key={song.id}>{song.title}</p>\n            ))}\n          </h2>\n        )}\n      </div>\n    </SingleComposerStyles>\n  );\n};\n\nexport default SingleComposer;\n"]},"metadata":{},"sourceType":"module"}