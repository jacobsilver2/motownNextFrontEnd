{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_SONG_MUTATION(\\n    $id: ID!\\n    $title: String!\\n    $publisher: String\\n    $publishedDate: DateTime\\n    $altTitle: String\\n    $instrumental: Boolean\\n    $fromFilm: String\\n    $tribute: String\\n  ) {\\n    updateSong(\\n      id: $id\\n      title: $title\\n      publisher: $publisher\\n      publishedDate: $publishedDate\\n      altTitle: $altTitle\\n      instrumental: $instrumental\\n      fromFilm: $fromFilm\\n      tribute: $tribute\\n    ) {\\n      id\\n      title\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      publisher\\n      altTitle\\n      fromFilm\\n      tribute\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nvar SINGLE_SONG_QUERY = gql(_templateObject());\nvar UPDATE_SONG_MUTATION = gql(_templateObject2());\n\nvar UpdateSong = /*#__PURE__*/function (_Component) {\n  _inherits(UpdateSong, _Component);\n\n  function UpdateSong() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UpdateSong);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UpdateSong)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          type = _e$target.type,\n          value = _e$target.value;\n      var val = type === \"number\" ? parseFloat(value) : value;\n\n      _this.setState(_defineProperty({}, name, val));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateSong\", function _callee(e, updateSongMutation) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              console.log(\"Updating Song!!\");\n              console.log(_this.state);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(updateSongMutation({\n                variables: _objectSpread({\n                  id: _this.props.id\n                }, _this.state)\n              }));\n\n            case 5:\n              res = _context.sent;\n              console.log(\"Updated!!\");\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(UpdateSong, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Query, {\n        query: SINGLE_SONG_QUERY,\n        variables: {\n          id: this.props.id\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading;\n        if (loading) return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \"Loading...\");\n        if (!data.song) return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"No Item Found for ID \", _this2.props.id);\n        return __jsx(Mutation, {\n          mutation: UPDATE_SONG_MUTATION,\n          variables: _this2.state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, function (updateSong, _ref2) {\n          var loading = _ref2.loading,\n              error = _ref2.error;\n          return __jsx(Form, {\n            onSubmit: function onSubmit(e) {\n              return _this2.updateSong(e, updateSong);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, __jsx(Error, {\n            error: error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }), __jsx(\"fieldset\", {\n            disabled: loading,\n            \"aria-busy\": loading,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85\n            },\n            __self: this\n          }, __jsx(\"label\", {\n            htmlFor: \"title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, \"Title\", __jsx(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            name: \"title\",\n            placeholder: \"Title\",\n            required: true,\n            defaultValue: data.song.title,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"publisher\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, \"Publisher\", __jsx(\"input\", {\n            type: \"text\",\n            id: \"publisher\",\n            name: \"publisher\",\n            placeholder: \"Title\",\n            defaultValue: data.song.publisher,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"altTitle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, \"Alt Title\", __jsx(\"input\", {\n            type: \"text\",\n            id: \"altTitle\",\n            name: \"altTitle\",\n            placeholder: \"Alt Title\",\n            defaultValue: data.song.altTitle,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"fromFilm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, \"From Film:\", __jsx(\"input\", {\n            type: \"text\",\n            id: \"fromFilm\",\n            name: \"fromFilm\",\n            placeholder: \"From Film\",\n            defaultValue: data.song.fromFilm,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"tribute\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }, \"Tribute To:\", __jsx(\"input\", {\n            type: \"text\",\n            id: \"tribute\",\n            name: \"tribute\",\n            placeholder: \"Tribute\",\n            defaultValue: data.song.tribute,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          })), __jsx(\"button\", {\n            type: \"submit\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147\n            },\n            __self: this\n          }, \"Sav\", loading ? \"ing\" : \"e\", \" Changes\")));\n        });\n      });\n    }\n  }]);\n\n  return UpdateSong;\n}(Component);\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js"],"names":["React","Component","Mutation","Query","gql","Router","Form","Error","SINGLE_SONG_QUERY","UPDATE_SONG_MUTATION","UpdateSong","e","target","name","type","value","val","parseFloat","setState","updateSongMutation","preventDefault","console","log","state","variables","id","props","res","data","loading","song","updateSong","error","title","handleChange","publisher","altTitle","fromFilm","tribute"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\n\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $publishedDate: DateTime\n    $altTitle: String\n    $instrumental: Boolean\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      publishedDate: $publishedDate\n      altTitle: $altTitle\n      instrumental: $instrumental\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nclass UpdateSong extends Component {\n  state = {};\n  handleChange = e => {\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    this.setState({ [name]: val });\n  };\n  updateSong = async (e, updateSongMutation) => {\n    e.preventDefault();\n    console.log(\"Updating Song!!\");\n    console.log(this.state);\n    const res = await updateSongMutation({\n      variables: {\n        id: this.props.id,\n        ...this.state\n      }\n    });\n    console.log(\"Updated!!\");\n  };\n  render() {\n    return (\n      <Query\n        query={SINGLE_SONG_QUERY}\n        variables={{\n          id: this.props.id\n        }}\n      >\n        {({ data, loading }) => {\n          if (loading) return <p>Loading...</p>;\n          if (!data.song) return <p>No Item Found for ID {this.props.id}</p>;\n          return (\n            <Mutation mutation={UPDATE_SONG_MUTATION} variables={this.state}>\n              {(updateSong, { loading, error }) => (\n                <Form onSubmit={e => this.updateSong(e, updateSong)}>\n                  <Error error={error} />\n                  <fieldset disabled={loading} aria-busy={loading}>\n                    <label htmlFor=\"title\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"title\"\n                        name=\"title\"\n                        placeholder=\"Title\"\n                        required\n                        defaultValue={data.song.title}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"publisher\">\n                      Publisher\n                      <input\n                        type=\"text\"\n                        id=\"publisher\"\n                        name=\"publisher\"\n                        placeholder=\"Title\"\n                        defaultValue={data.song.publisher}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"altTitle\">\n                      Alt Title\n                      <input\n                        type=\"text\"\n                        id=\"altTitle\"\n                        name=\"altTitle\"\n                        placeholder=\"Alt Title\"\n                        defaultValue={data.song.altTitle}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"fromFilm\">\n                      From Film:\n                      <input\n                        type=\"text\"\n                        id=\"fromFilm\"\n                        name=\"fromFilm\"\n                        placeholder=\"From Film\"\n                        defaultValue={data.song.fromFilm}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"tribute\">\n                      Tribute To:\n                      <input\n                        type=\"text\"\n                        id=\"tribute\"\n                        name=\"tribute\"\n                        placeholder=\"Tribute\"\n                        defaultValue={data.song.tribute}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <button type=\"submit\">\n                      Sav{loading ? \"ing\" : \"e\"} Changes\n                    </button>\n                  </fieldset>\n                </Form>\n              )}\n            </Mutation>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };\n"]},"metadata":{},"sourceType":"module"}