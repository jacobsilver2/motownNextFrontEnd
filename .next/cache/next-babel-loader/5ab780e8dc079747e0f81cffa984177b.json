{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport formatDate from \"../lib/formatDate\";\nconst SingleSongStyles = styled.div.withConfig({\n  displayName: \"SingleSong__SingleSongStyles\",\n  componentId: \"sc-1e0bt3h-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\nexport const listWithLinks = (el, name) => {\n  console.log(\"here\");\n  el.map((e, i) => {\n    let trailingChar = \", \";\n\n    if (el && i === e.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (el && !e[i + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: e.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: `/${name}`,\n        query: {\n          id: e.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, e.name, \" \")), trailingChar);\n  });\n};\n\nconst SingleSong = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id\n    }\n  });\n  const {\n    0: layout,\n    1: setLayout\n  } = useState(\"list\");\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"No song found for \", id); // console.log(data.song);\n\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings\n  } = data.song;\n  const composerNames = composer.map((comp, index) => {\n    let trailingChar = \", \";\n\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: comp.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/composer\",\n        query: {\n          id: comp.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, comp.name, \" \")), trailingChar);\n  });\n  return __jsx(Card, {\n    title: title,\n    subTitle: listWithLinks(composer, \"composer\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, altTitle && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Alt Title: \", altTitle), publisher && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Publisher: \", publisher), publishedDate && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Published Date: \", formatDate(publishedDate)), instrumental && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Instrumental\"), fromFilm && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"From Film: \", fromFilm)) //   <SingleSongStyles>\n  //     <div className=\"details\">\n  //       <h1 className=\"title\">{title}</h1>\n  //       {composer &&\n  //         composer.map((comp) => (\n  //           <h2 key={comp.id}>\n  //             <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n  //               <a>Composer: {comp.name}</a>\n  //             </Link>\n  //           </h2>\n  //         ))}\n  //       {publisher && <h2>Publisher: {publisher}</h2>}\n  //       {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n  //       {altTitle && <h2>Alt Title: {altTitle}</h2>}\n  //       {instrumental && <h2>Instrumental</h2>}\n  //       {fromFilm && <h2>From Film: {fromFilm}</h2>}\n  //       {tribute && <h2>{tribute}</h2>}\n  //       {artists && (\n  //         <h2>\n  //           Performed by:{\" \"}\n  //           {artists.map((artist) => (\n  //             <p key={artist.id}>\n  //               <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n  //                 <a>{artist.name}</a>\n  //               </Link>\n  //             </p>\n  //           ))}\n  //         </h2>\n  //       )}\n  //       {albums && (\n  //         <h2>\n  //           Can be heard on the albums:{\" \"}\n  //           {albums.map((album) => (\n  //             <p key={album.id}>\n  //               <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n  //                 <a>{album.title}</a>\n  //               </Link>\n  //             </p>\n  //           ))}\n  //         </h2>\n  //       )}\n  //     </div>\n  //   </SingleSongStyles>\n  // );\n  ;\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","useState","gql","useQuery","ErrorMessage","styled","Link","Card","formatDate","SingleSongStyles","div","props","theme","bs","SINGLE_SONG_QUERY","listWithLinks","el","name","console","log","map","e","i","trailingChar","length","id","pathname","query","SingleSong","loading","error","data","variables","layout","setLayout","song","title","composer","publisher","publishedDate","altTitle","instrumental","fromFilm","tribute","artists","albums","recordings","composerNames","comp","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport formatDate from \"../lib/formatDate\";\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nexport const listWithLinks = (el, name) => {\n  console.log(\"here\");\n  el.map((e, i) => {\n    let trailingChar = \", \";\n    if (el && i === e.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (el && !e[i + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={e.id}>\n        <Link href={{ pathname: `/${name}`, query: { id: e.id } }}>\n          <a>{e.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n};\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id },\n  });\n  const [layout, setLayout] = useState(\"list\");\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  // console.log(data.song);\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings,\n  } = data.song;\n\n  const composerNames = composer.map((comp, index) => {\n    let trailingChar = \", \";\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={comp.id}>\n        <Link href={{ pathname: \"/composer\", query: { id: comp.id } }}>\n          <a>{comp.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n\n  return (\n    <Card title={title} subTitle={listWithLinks(composer, \"composer\")}>\n      {altTitle && <h3>Alt Title: {altTitle}</h3>}\n      {publisher && <h3>Publisher: {publisher}</h3>}\n      {publishedDate && <h3>Published Date: {formatDate(publishedDate)}</h3>}\n      {instrumental && <h3>Instrumental</h3>}\n      {fromFilm && <h3>From Film: {fromFilm}</h3>}\n    </Card>\n\n    //   <SingleSongStyles>\n    //     <div className=\"details\">\n    //       <h1 className=\"title\">{title}</h1>\n    //       {composer &&\n    //         composer.map((comp) => (\n    //           <h2 key={comp.id}>\n    //             <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n    //               <a>Composer: {comp.name}</a>\n    //             </Link>\n    //           </h2>\n    //         ))}\n    //       {publisher && <h2>Publisher: {publisher}</h2>}\n    //       {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n    //       {altTitle && <h2>Alt Title: {altTitle}</h2>}\n    //       {instrumental && <h2>Instrumental</h2>}\n    //       {fromFilm && <h2>From Film: {fromFilm}</h2>}\n    //       {tribute && <h2>{tribute}</h2>}\n    //       {artists && (\n    //         <h2>\n    //           Performed by:{\" \"}\n    //           {artists.map((artist) => (\n    //             <p key={artist.id}>\n    //               <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n    //                 <a>{artist.name}</a>\n    //               </Link>\n    //             </p>\n    //           ))}\n    //         </h2>\n    //       )}\n    //       {albums && (\n    //         <h2>\n    //           Can be heard on the albums:{\" \"}\n    //           {albums.map((album) => (\n    //             <p key={album.id}>\n    //               <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n    //                 <a>{album.title}</a>\n    //               </Link>\n    //             </p>\n    //           ))}\n    //         </h2>\n    //       )}\n    //     </div>\n    //   </SingleSongStyles>\n    // );\n  );\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}