{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport { gql } from \"apollo-boost\";\nimport Select from \"react-select\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nimport Multilist from \"./styles/Multilist\";\nimport Center from \"./styles/Center\";\nimport sortBySelectItems from \"../lib/sortByOptions/singlesSortBySelectOptions\";\nimport getSelectLabel from \"../lib/sortByOptions/sortBySelectReturnLabel\";\nimport customTheme from \"./styles/reactSelectTheme\";\nexport const LOCAL_STATE_QUERY = gql`\n  query {\n    selectedIds @client\n  }\n`;\nexport const ALL_SINGLES_QUERY = gql`\n  query ALL_SINGLES_QUERY($first: Int = ${perPage}, $skip: Int = 0, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: true}, first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_SINGLES_BEGINNING_WITH_QUERY = gql`\n  query ALL_SINGLES_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: true, title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_SINGLES_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_SINGLES_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: true, OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst Singles = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"title_ASC\");\n  const {\n    0: checkedItems,\n    1: setCheckedItems\n  } = useState([]);\n  const {\n    loading: localStateLoading,\n    error: localStateError,\n    data: localStateData\n  } = useQuery(LOCAL_STATE_QUERY);\n  const {\n    loading: allSinglesLoading,\n    error: allSinglesError,\n    data: allSinglesData\n  } = useQuery(ALL_SINGLES_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: singlesBeginningWithLoading,\n    error: singlesBeginningWithError,\n    data: singlesBeginningWithData\n  } = useQuery(ALL_SINGLES_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  const {\n    loading: singlesBeginningWithNumberLoading,\n    error: singlesBeginningWithNumberError,\n    data: singlesBeginningWithNumberData\n  } = useQuery(ALL_SINGLES_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  if (singlesBeginningWithLoading || allSinglesLoading || singlesBeginningWithNumberLoading) return __jsx(\"p\", null, \"Loading...\");\n  if (singlesBeginningWithError || allSinglesError || singlesBeginningWithNumberError) return __jsx(\"p\", null, \"Error :(\");\n\n  function getSingles() {\n    if (letter === \"\" || !letter) {\n      return allSinglesData.albums.filter(album => album.single).map(album => __jsx(Album, {\n        key: album.id,\n        album: album\n      }));\n    } else if (letter === \"#\") {\n      return singlesBeginningWithNumberData.albums.filter(album => album.single).map(single => __jsx(Album, {\n        key: single.id,\n        album: single\n      }));\n    } else {\n      return singlesBeginningWithData.albums.filter(album => album.single).map(single => __jsx(Album, {\n        key: single.id,\n        album: single\n      }));\n    }\n  }\n\n  return __jsx(Center, null, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZWithNumber,\n    onChange: e => {\n      setLetter(e.value);\n      Router.push({\n        pathname: \"/singles\",\n        query: {\n          page: 1\n        }\n      });\n    }\n  }), __jsx(\"br\", null), __jsx(Select, {\n    options: sortBySelectItems,\n    theme: customTheme,\n    placeholder: `Sort by ${getSelectLabel(sortBySelectItems, sortBy)}`,\n    onChange: e => setSortBy(e.value),\n    isSearchable: true\n  }), __jsx(\"br\", null), __jsx(Pagination, {\n    page: page,\n    model: \"singles\",\n    letter: letter\n  }), __jsx(Multilist, null, getSingles()), __jsx(Pagination, {\n    page: page,\n    model: \"singles\",\n    letter: letter\n  }));\n};\n\nexport default Singles;","map":null,"metadata":{},"sourceType":"module"}