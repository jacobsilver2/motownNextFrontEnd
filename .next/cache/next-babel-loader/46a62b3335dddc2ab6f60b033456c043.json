{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Albums.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { MultiList, Center } from \"./Artists\";\nexport const StyledDropdown = styled(Dropdown).withConfig({\n  displayName: \"Albums__StyledDropdown\",\n  componentId: \"sc-1rsazgb-0\"\n})([\"width:50%;@media screen and (max-width:600px){width:100%;}\"]);\nexport const ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($first: Int = ${perPage}, $skip: Int = 0, $sortBy: AlbumOrderByInput!) {\n    albums(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(where: {OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nconst sortBySelectItems = [{\n  label: \"Title, ascending\",\n  value: \"title_ASC\"\n}, {\n  label: \"Title, descending\",\n  value: \"title_DESC\"\n}, {\n  label: \"Format, ascending\",\n  value: \"format_DESC\"\n}, {\n  label: \"Format, descending\",\n  value: \"format_ASC\"\n}, {\n  label: \"Release Date, ascending\",\n  value: \"releaseDate_ASC\"\n}, {\n  label: \"Release Date, descending\",\n  value: \"releaseDate_DESC\"\n}, {\n  label: \"Record Label, ascending\",\n  value: \"recordLabel_ASC\"\n}, {\n  label: \"Record Label, descending\",\n  value: \"recordLabel_DESC\"\n}];\n\nconst Albums = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"title_ASC\");\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  const {\n    loading: albumsBeginningWithNumberLoading,\n    error: albumsBeginningWithNumberError,\n    data: albumsBeginningWithNumberData\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  if (albumsBeginningWithLoading || allAlbumsLoading || albumsBeginningWithNumberLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Loading...\");\n  if (albumsBeginningWithError || allAlbumsError || albumsBeginningWithNumberError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Error :(\"); // let albums;\n\n  if (letter === \"\" || !letter) {\n    console.log(\"letter equals null\");\n    const albums = allAlbumsData.albums.map(album => __jsx(Album, {\n      key: album.id,\n      album: album,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }));\n  } else if (letter === \"#\") {\n    console.log(\"letter equals #\");\n    const albums = albumsBeginningWithNumberData.albums.map(album => __jsx(Album, {\n      key: album.id,\n      album: album,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  } else {\n    console.log(\"letter equals some alphabet character\");\n    const albums = albumsBeginningWithData.albums.map(album => __jsx(Album, {\n      key: album.id,\n      album: album,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n  } // const albums = !letter\n  //   ? allAlbumsData.albums.map((album) => (\n  //       <Album key={album.id} album={album} />\n  //     ))\n  //   : albumsBeginningWithData.albums.map((album) => (\n  //       <Album key={album.id} album={album} />\n  //     ));\n\n\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZWithNumber,\n    onChange: e => {\n      setLetter(e.value);\n      Router.push({\n        pathname: \"/albums\",\n        query: {\n          page: 1\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), __jsx(StyledDropdown, {\n    value: sortBy,\n    options: sortBySelectItems,\n    onChange: e => setSortBy(e.value),\n    placeholder: \"Sort By\\u2026\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), __jsx(MultiList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, albums), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }));\n};\n\nexport default Albums;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Albums.js"],"names":["React","useState","useQuery","Router","gql","styled","Album","Pagination","perPage","SelectButton","selectButtonsAthruZWithNumber","Dropdown","MultiList","Center","StyledDropdown","ALL_ALBUMS_QUERY","ALL_ALBUMS_BEGINNING_WITH_QUERY","ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY","sortBySelectItems","label","value","Albums","page","letter","setLetter","sortBy","setSortBy","loading","allAlbumsLoading","error","allAlbumsError","data","allAlbumsData","variables","skip","first","albumsBeginningWithLoading","albumsBeginningWithError","albumsBeginningWithData","albumsBeginningWithNumberLoading","albumsBeginningWithNumberError","albumsBeginningWithNumberData","console","log","albums","map","album","id","e","push","pathname","query"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { MultiList, Center } from \"./Artists\";\n\nexport const StyledDropdown = styled(Dropdown)`\n  width: 50%;\n  @media screen and (max-width: 600px) {\n    width: 100%;\n  }\n`;\n\nexport const ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($first: Int = ${perPage}, $skip: Int = 0, $sortBy: AlbumOrderByInput!) {\n    albums(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(where: {OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst sortBySelectItems = [\n  { label: \"Title, ascending\", value: \"title_ASC\" },\n  { label: \"Title, descending\", value: \"title_DESC\" },\n  { label: \"Format, ascending\", value: \"format_DESC\" },\n  { label: \"Format, descending\", value: \"format_ASC\" },\n  { label: \"Release Date, ascending\", value: \"releaseDate_ASC\" },\n  { label: \"Release Date, descending\", value: \"releaseDate_DESC\" },\n  { label: \"Record Label, ascending\", value: \"recordLabel_ASC\" },\n  { label: \"Record Label, descending\", value: \"recordLabel_DESC\" },\n];\n\nconst Albums = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"title_ASC\");\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData,\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, sortBy },\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData,\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy,\n    },\n  });\n  const {\n    loading: albumsBeginningWithNumberLoading,\n    error: albumsBeginningWithNumberError,\n    data: albumsBeginningWithNumberData,\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy,\n    },\n  });\n  if (\n    albumsBeginningWithLoading ||\n    allAlbumsLoading ||\n    albumsBeginningWithNumberLoading\n  )\n    return <p>Loading...</p>;\n  if (\n    albumsBeginningWithError ||\n    allAlbumsError ||\n    albumsBeginningWithNumberError\n  )\n    return <p>Error :(</p>;\n\n  // let albums;\n\n  if (letter === \"\" || !letter) {\n    console.log(\"letter equals null\");\n    const albums = allAlbumsData.albums.map((album) => (\n      <Album key={album.id} album={album} />\n    ));\n  } else if (letter === \"#\") {\n    console.log(\"letter equals #\");\n    const albums = albumsBeginningWithNumberData.albums.map((album) => (\n      <Album key={album.id} album={album} />\n    ));\n  } else {\n    console.log(\"letter equals some alphabet character\");\n    const albums = albumsBeginningWithData.albums.map((album) => (\n      <Album key={album.id} album={album} />\n    ));\n  }\n\n  // const albums = !letter\n  //   ? allAlbumsData.albums.map((album) => (\n  //       <Album key={album.id} album={album} />\n  //     ))\n  //   : albumsBeginningWithData.albums.map((album) => (\n  //       <Album key={album.id} album={album} />\n  //     ));\n\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZWithNumber}\n        onChange={(e) => {\n          setLetter(e.value);\n          Router.push({ pathname: \"/albums\", query: { page: 1 } });\n        }}\n      />\n      <br />\n      <StyledDropdown\n        value={sortBy}\n        options={sortBySelectItems}\n        onChange={(e) => setSortBy(e.value)}\n        placeholder=\"Sort By…\"\n      />\n      <br />\n      <Pagination page={page} model=\"albums\" letter={letter} />\n      <MultiList>{albums}</MultiList>\n      <Pagination page={page} model=\"albums\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Albums;\n"]},"metadata":{},"sourceType":"module"}