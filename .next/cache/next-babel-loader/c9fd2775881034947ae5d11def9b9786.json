{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ALBUM_QUERY($id: ID!) {\\n    album(where: { id: $id }) {\\n      id\\n      title\\n      catalogNumber\\n      format\\n      info\\n      releaseDate\\n      recordLabel\\n      songs {\\n        id\\n        title\\n        composer {\\n          id\\n          name\\n        }\\n      }\\n      artists {\\n        id\\n        name\\n      }\\n      recordings {\\n        producer\\n        location\\n        completed\\n        albums {\\n          id\\n          title\\n        }\\n        song {\\n          id\\n          title\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport ComponentCard from \"./Card\";\nimport formatDate from \"../lib/formatDate\";\nvar SingleAlbumStyles = styled.div.withConfig({\n  displayName: \"SingleAlbum__SingleAlbumStyles\",\n  componentId: \"gstqrx-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n});\nvar TitleCard = styled(Card).withConfig({\n  displayName: \"SingleAlbum__TitleCard\",\n  componentId: \"gstqrx-1\"\n})([\"text-align:center;\"]);\nvar SongsCard = styled(Card).withConfig({\n  displayName: \"SingleAlbum__SongsCard\",\n  componentId: \"gstqrx-2\"\n})([\"display:grid;grid-template-columns:1fr;.p-card-title{text-align:center;}\"]);\nvar SongsCardComponent = styled(ComponentCard).withConfig({\n  displayName: \"SingleAlbum__SongsCardComponent\",\n  componentId: \"gstqrx-3\"\n})([\"display:grid;grid-template-columns:1fr;.p-card-title{text-align:center;}\"]);\nvar SongsList = styled.div.withConfig({\n  displayName: \"SingleAlbum__SongsList\",\n  componentId: \"gstqrx-4\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;.p-card-title{text-align:left;}\"], function (props) {\n  return props.theme.maxWidth;\n});\nvar SINGLE_ALBUM_QUERY = gql(_templateObject());\n\nvar SingleAlbum = function SingleAlbum(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error\n  });\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (!data.album) return __jsx(\"p\", null, \"No album found for \", id);\n  var _data$album = data.album,\n      title = _data$album.title,\n      catalogNumber = _data$album.catalogNumber,\n      format = _data$album.format,\n      info = _data$album.info,\n      releaseDate = _data$album.releaseDate,\n      recordLabel = _data$album.recordLabel,\n      songs = _data$album.songs,\n      artists = _data$album.artists,\n      recordings = _data$album.recordings;\n  var artistNames = artists.map(function (artist, index) {\n    var trailingChar = \", \";\n\n    if (artists && index === artists.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (artists && !artists[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: artist.id\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/artist\",\n        query: {\n          id: artist.id\n        }\n      }\n    }, __jsx(\"a\", null, artist.name, \" \")), trailingChar);\n  });\n  return __jsx(React.Fragment, null, __jsx(ComponentCard, {\n    isTitle: true,\n    title: title,\n    subTitle: artistNames\n  }, catalogNumber && __jsx(\"h3\", {\n    className: \"recordlabel\"\n  }, \"Catalog Number: \", catalogNumber), format && __jsx(\"h3\", {\n    className: \"format\"\n  }, \"Format: \", format), releaseDate && __jsx(\"h3\", {\n    className: \"releasedate\"\n  }, \"Release Date: \", formatDate(releaseDate)), recordLabel && __jsx(\"h3\", {\n    className: \"recordlabel\"\n  }, \"Record Label: \", recordLabel), info && __jsx(\"h3\", {\n    className: \"additionalinfo\"\n  }, \"Additional Info: \", info)), __jsx(SongsCardComponent, {\n    title: \"Songs on \".concat(title, \" (in alphabetical order):\")\n  }, __jsx(SongsList, null, songs.map(function (song) {\n    var composerNames = song.composer.map(function (comp, index) {\n      var trailingChar = \", \";\n\n      if (song.composer && index === song.composer.length - 2) {\n        trailingChar = \"& \";\n      }\n\n      if (song.composer && !song.composer[index + 1]) {\n        trailingChar = \"\";\n      }\n\n      return __jsx(\"span\", {\n        key: comp.id\n      }, __jsx(Link, {\n        href: {\n          pathname: \"/composer\",\n          query: {\n            id: comp.id\n          }\n        }\n      }, __jsx(\"a\", null, comp.name, \" \")), trailingChar);\n    });\n\n    var songLink = __jsx(Link, {\n      href: {\n        pathname: \"/song\",\n        query: {\n          id: song.id\n        }\n      }\n    }, __jsx(\"a\", null, song.title));\n\n    var songInfo = recordings.map(function (recording) {\n      if (recording.song.title === song.title) {\n        return __jsx(React.Fragment, null, recording.producer && __jsx(\"li\", null, \"Produced By: \", recording.producer), recording.location && __jsx(\"li\", null, \"Recording Location: \", recording.location), recording.completed && __jsx(\"li\", null, \"Completed: \", formatDate(recording.completed)));\n      }\n    });\n    return __jsx(ComponentCard, {\n      title: songLink,\n      subTitle: composerNames\n    }, __jsx(\"ul\", {\n      style: {\n        listStyleType: \"none\",\n        margin: 0,\n        padding: 0\n      }\n    }, songInfo));\n  }))));\n};\n\nexport default SingleAlbum;","map":null,"metadata":{},"sourceType":"module"}