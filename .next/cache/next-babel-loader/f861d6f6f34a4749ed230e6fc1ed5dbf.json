{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport Select from \"react-select\";\nimport { DropDown as StyledDropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport Title from \"./styles/song/title\";\nimport customTheme from \"./styles/reactSelectTheme\";\nimport styled from \"styled-components\";\nconst StyledSearchBar = styled.div.withConfig({\n  displayName: \"Search__StyledSearchBar\",\n  componentId: \"sexg82-0\"\n})([\"display:grid;grid-template-columns:5fr 1fr;grid-gap:1rem;\"]);\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_ARTISTS_QUERY = gql`\n  query SEARCH_ARTISTS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\nconst SEARCH_ALBUMS_QUERY = gql`\n  query SEARCH_ALBUMS_QUERY($searchTerm: String!) {\n    albums(where: { OR: [{ title_contains: $searchTerm }] }) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_COMPOSERS_QUERY = gql`\n  query SEARCH_COMPOSERS_QUERY($searchTerm: String!) {\n    composers(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nfunction routeToItem(route, item) {\n  item && Router.push({\n    pathname: `/${route}`,\n    query: {\n      id: item.id\n    }\n  });\n}\n\nfunction returnQuery(item) {\n  if (item === \"song\") {\n    return SEARCH_SONGS_QUERY;\n  }\n\n  if (item === \"album\") {\n    return SEARCH_ALBUMS_QUERY;\n  }\n\n  if (item === \"artist\") {\n    return SEARCH_ARTISTS_QUERY;\n  }\n\n  if (item === \"composer\") {\n    return SEARCH_COMPOSERS_QUERY;\n  }\n}\n\nconst dropdownSelectItems = [{\n  label: \"Song\",\n  value: \"song\"\n}, {\n  label: \"Artist\",\n  value: \"artist\"\n}, {\n  label: \"Album\",\n  value: \"album\"\n}, {\n  label: \"Composer\",\n  value: \"composer\"\n}];\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false,\n      item: \"song\"\n    });\n\n    _defineProperty(this, \"handleSelectChange\", event => this.setState({\n      item: event.value\n    }));\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      this.setState({\n        loading: true\n      });\n      const response = e.target.value && (await client.query({\n        query: returnQuery(this.state.item),\n        variables: {\n          searchTerm: e.target.value\n        }\n      }));\n      e.target.value && this.setState({\n        items: response.data.songs || response.data.albums || response.data.composers || response.data.artists,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, null, __jsx(Downshift, {\n      onChange: item => routeToItem(this.state.item, item),\n      itemToString: item => item === null ? \"\" : item.title || item.name\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", null, __jsx(ApolloConsumer, null, client => __jsx(StyledSearchBar, null, __jsx(\"input\", getInputProps({\n      type: \"search\",\n      placeholder: \"Search\",\n      id: \"search\",\n      className: this.state.loading ? \"loading\" : \"\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    })), __jsx(Select, {\n      theme: customTheme,\n      value: this.state.item,\n      options: dropdownSelectItems,\n      onChange: this.handleSelectChange,\n      placeholder: `Search for a${this.state.item.toLowerCase().includes(\"a\", 0) ? \"n\" : \"\"} ${this.state.item.toLowerCase()}`\n    }))), isOpen ? __jsx(StyledDropDown, null, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      key: item.id,\n      index,\n      item\n    }), {\n      highlighted: index === highlightedIndex\n    }), __jsx(Title, null, item.title || item.name)))) : null)));\n  }\n\n}\n\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}