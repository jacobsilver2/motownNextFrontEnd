{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleArtist.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\"; // import { Card } from \"primereact/card\";\n\nimport ComponentCard from \"./Card\";\nconst SingleArtistStyles = styled.div.withConfig({\n  displayName: \"SingleArtist__SingleArtistStyles\",\n  componentId: \"sc-1t9u136-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.name{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs); // const TitleCard = styled(Card)`\n//   text-align: center;\n// `;\n\nconst AlbumsAndSongs = styled.div.withConfig({\n  displayName: \"SingleArtist__AlbumsAndSongs\",\n  componentId: \"sc-1t9u136-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;\"]);\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n      albums {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleArtist = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.artist) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"No artist found for \", id);\n  const {\n    name,\n    songs,\n    albums\n  } = data.artist;\n  return __jsx(React.Fragment, null, __jsx(ComponentCard, {\n    isTitle: true,\n    title: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(AlbumsAndSongs, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, songs && __jsx(ComponentCard, {\n    title: `Songs ${name} ${name.includes(\"and\") || name.includes(\"And\") || name.includes(\"&\") ? \"have\" : \"has\"} recorded:`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, songs.map(song => __jsx(\"p\", {\n    key: song.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"song\",\n      query: {\n        id: song.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, song.title)))))), albums && __jsx(ComponentCard, {\n    title: \"Can be heard on the albums:\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, albums.map(album => __jsx(\"p\", {\n    key: album.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"album\",\n      query: {\n        id: album.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, album.title))))))));\n};\n\nexport default SingleArtist;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleArtist.js"],"names":["React","gql","useQuery","ErrorMessage","styled","Link","ComponentCard","SingleArtistStyles","div","props","theme","bs","AlbumsAndSongs","SINGLE_ARTIST_QUERY","SingleArtist","id","loading","error","data","variables","artist","name","songs","albums","includes","listStyleType","margin","padding","map","song","pathname","query","title","album"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\n// import { Card } from \"primereact/card\";\nimport ComponentCard from \"./Card\";\n\nconst SingleArtistStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .name {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\n// const TitleCard = styled(Card)`\n//   text-align: center;\n// `;\n\nconst AlbumsAndSongs = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n      albums {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleArtist = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: { id },\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.artist) return <p>No artist found for {id}</p>;\n  const { name, songs, albums } = data.artist;\n  return (\n    <>\n      <ComponentCard isTitle title={name} />\n      <AlbumsAndSongs>\n        {songs && (\n          <ComponentCard\n            title={`Songs ${name} ${\n              name.includes(\"and\") || name.includes(\"And\") || name.includes(\"&\")\n                ? \"have\"\n                : \"has\"\n            } recorded:`}\n          >\n            <ul style={{ listStyleType: \"none\", margin: 0, padding: 0 }}>\n              {songs.map((song) => (\n                <p key={song.id}>\n                  <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n                    <a>{song.title}</a>\n                  </Link>\n                </p>\n              ))}\n            </ul>\n          </ComponentCard>\n        )}\n        {albums && (\n          <ComponentCard title=\"Can be heard on the albums:\">\n            <ul style={{ listStyleType: \"none\", margin: 0, padding: 0 }}>\n              {albums.map((album) => (\n                <p key={album.id}>\n                  <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n                    <a>{album.title}</a>\n                  </Link>\n                </p>\n              ))}\n            </ul>\n          </ComponentCard>\n        )}\n      </AlbumsAndSongs>\n    </>\n  );\n};\n\nexport default SingleArtist;\n"]},"metadata":{},"sourceType":"module"}