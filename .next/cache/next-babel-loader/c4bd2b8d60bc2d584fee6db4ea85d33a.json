{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient(_ref) {\n  var headers = _ref.headers;\n  return new ApolloClient({\n    //    uri: process.env.NODE_ENV === \"development\" ? endpoint : endpoint,\n    uri: \"https://www.motowndb:4747\",\n    onError: function onError(_ref2) {\n      var networkError = _ref2.networkError,\n          graphQLErrors = _ref2.graphQLErrors;\n      graphQLErrors && graphQLErrors.forEach(function (gqlErr) {\n        return console.log(gqlErr);\n      });\n      console.log(\"NetworkError: \".concat(networkError));\n    },\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers: headers\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addOrRemoveLocalIdSelection: function addOrRemoveLocalIdSelection(_, variables, _ref3) {\n            var cache = _ref3.cache;\n\n            // read the selectedIds value from the cache\n            var _cache$readQuery = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }),\n                selectedIds = _cache$readQuery.selectedIds; // remove id from local state\n\n\n            if (selectedIds.includes(variables.id)) {\n              var _newData = selectedIds.filter(function (id) {\n                return id !== variables.id;\n              });\n\n              var _data = {\n                data: {\n                  selectedIds: _newData\n                }\n              };\n              cache.writeData(_data);\n              return null;\n            } // add id to local state\n\n\n            var newData = [].concat(_toConsumableArray(selectedIds), [variables.id]);\n            var data = {\n              data: {\n                selectedIds: newData\n              }\n            };\n            cache.writeData(data);\n            return null;\n          },\n          clearSelectedIds: function clearSelectedIds(_, variables, _ref4) {\n            var cache = _ref4.cache;\n\n            var _cache$readQuery2 = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }),\n                selectedIds = _cache$readQuery2.selectedIds;\n\n            var data = {\n              data: {\n                selectedIds: []\n              }\n            };\n            cache.writeData(data);\n            return null;\n          }\n        }\n      },\n      defaults: {\n        selectedIds: []\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":null,"metadata":{},"sourceType":"module"}