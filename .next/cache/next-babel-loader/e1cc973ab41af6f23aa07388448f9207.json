{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nimport Song from \"./styles/song/songStyles\";\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_ARTISTS_QUERY = gql`\n  query SEARCH_ARTISTS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\nconst SEARCH_ALBUMS_QUERY = gql`\n  query SEARCH_ALBUMS_QUERY($searchTerm: String!) {\n    albums(where: { OR: [{ title_contains: $searchTerm }] }) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_COMPOSERS_QUERY = gql`\n  query SEARCH_COMPOSERS_QUERY($searchTerm: String!) {\n    composers(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nfunction routeToItem(route, item) {\n  item && Router.push({\n    pathname: `/${route}`,\n    query: {\n      id: item.id\n    }\n  });\n}\n\nfunction returnQuery(item) {\n  console.log(item);\n\n  if (item === \"song\") {\n    return SEARCH_SONGS_QUERY;\n  }\n\n  if (item === \"album\") {\n    return SEARCH_ALBUMS_QUERY;\n  }\n\n  if (item === \"artist\") {\n    return SEARCH_ARTISTS_QUERY;\n  }\n\n  if (item === \"composer\") {\n    return SEARCH_COMPOSERS_QUERY;\n  }\n}\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false,\n      item: \"song\"\n    });\n\n    _defineProperty(this, \"handleSelectChange\", event => this.setState({\n      item: event.target.value\n    }));\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      this.setState({\n        loading: true\n      });\n      const response = e.target.value && (await client.query({\n        query: returnQuery(this.state.item),\n        variables: {\n          searchTerm: e.target.value\n        }\n      }));\n      e.target.value && this.setState({\n        items: response.data.songs || response.data.albums || response.data.composers || response.data.artists,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(Downshift, {\n      onChange: item => routeToItem(this.state.item, item),\n      itemToString: item => item === null ? \"\" : item.title || item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, __jsx(ApolloConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, client => __jsx(React.Fragment, null, __jsx(\"input\", _extends({}, getInputProps({\n      type: \"search\",\n      placeholder: \"Search\",\n      id: \"search\",\n      className: this.state.loading ? \"loading\" : \"\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), __jsx(\"select\", {\n      value: this.state.item,\n      onChange: this.handleSelectChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"song\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Song\"), __jsx(\"option\", {\n      value: \"artist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Artist\"), __jsx(\"option\", {\n      value: \"album\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Album\"), __jsx(\"option\", {\n      value: \"composer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Composer\")))), isOpen ? __jsx(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      key: item.id,\n      index,\n      item\n    }), {\n      highlighted: index === highlightedIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), __jsx(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, item.title || item.name)))) : null)));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Search.js"],"names":["React","Downshift","resetIdCounter","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","SongStyles","Title","Song","SEARCH_SONGS_QUERY","SEARCH_ARTISTS_QUERY","SEARCH_ALBUMS_QUERY","SEARCH_COMPOSERS_QUERY","routeToItem","route","item","push","pathname","query","id","returnQuery","console","log","AutoComplete","Component","items","loading","event","setState","target","value","e","client","response","state","variables","searchTerm","data","songs","albums","composers","artists","render","title","name","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","onChange","persist","handleSelectChange","map","index","key"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,IAAoBC,cAApB,QAA0C,WAA1C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,MAAMC,kBAAkB,GAAGR,GAAI;;;;;;;;;;;;;;;CAA/B;AAgBA,MAAMS,oBAAoB,GAAGT,GAAI;;;;;;;CAAjC;AASA,MAAMU,mBAAmB,GAAGV,GAAI;;;;;;;CAAhC;AAQA,MAAMW,sBAAsB,GAAGX,GAAI;;;;;;;CAAnC;;AASA,SAASY,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAChCA,EAAAA,IAAI,IACFhB,MAAM,CAACiB,IAAP,CAAY;AACVC,IAAAA,QAAQ,EAAG,IAAGH,KAAM,EADV;AAEVI,IAAAA,KAAK,EAAE;AACLC,MAAAA,EAAE,EAAEJ,IAAI,CAACI;AADJ;AAFG,GAAZ,CADF;AAOD;;AAED,SAASC,WAAT,CAAqBL,IAArB,EAA2B;AACzBM,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;;AACA,MAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,WAAON,kBAAP;AACD;;AACD,MAAIM,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAOJ,mBAAP;AACD;;AACD,MAAII,IAAI,KAAK,QAAb,EAAuB;AACrB,WAAOL,oBAAP;AACD;;AACD,MAAIK,IAAI,KAAK,UAAb,EAAyB;AACvB,WAAOH,sBAAP;AACD;AACF;;AAED,MAAMW,YAAN,SAA2B3B,KAAK,CAAC4B,SAAjC,CAA2C;AAAA;AAAA;;AAAA,mCACjC;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE,KAFH;AAGNX,MAAAA,IAAI,EAAE;AAHA,KADiC;;AAAA,gDAOpBY,KAAK,IAAI,KAAKC,QAAL,CAAc;AAAEb,MAAAA,IAAI,EAAEY,KAAK,CAACE,MAAN,CAAaC;AAArB,KAAd,CAPW;;AAAA,sCAS9B5B,QAAQ,CAAC,OAAO6B,CAAP,EAAUC,MAAV,KAAqB;AACvC,WAAKJ,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,YAAMO,QAAQ,GACZF,CAAC,CAACF,MAAF,CAASC,KAAT,KACC,MAAME,MAAM,CAACd,KAAP,CAAa;AAClBA,QAAAA,KAAK,EAAEE,WAAW,CAAC,KAAKc,KAAL,CAAWnB,IAAZ,CADA;AAElBoB,QAAAA,SAAS,EAAE;AAAEC,UAAAA,UAAU,EAAEL,CAAC,CAACF,MAAF,CAASC;AAAvB;AAFO,OAAb,CADP,CADF;AAMAC,MAAAA,CAAC,CAACF,MAAF,CAASC,KAAT,IACE,KAAKF,QAAL,CAAc;AACZH,QAAAA,KAAK,EACHQ,QAAQ,CAACI,IAAT,CAAcC,KAAd,IACAL,QAAQ,CAACI,IAAT,CAAcE,MADd,IAEAN,QAAQ,CAACI,IAAT,CAAcG,SAFd,IAGAP,QAAQ,CAACI,IAAT,CAAcI,OALJ;AAMZf,QAAAA,OAAO,EAAE;AANG,OAAd,CADF;AASD,KAjBkB,EAiBhB,GAjBgB,CATsB;AAAA;;AA4BzCgB,EAAAA,MAAM,GAAG;AACP5C,IAAAA,cAAc;AACd,WACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AACE,MAAA,QAAQ,EAAEiB,IAAI,IAAIF,WAAW,CAAC,KAAKqB,KAAL,CAAWnB,IAAZ,EAAkBA,IAAlB,CAD/B;AAEE,MAAA,YAAY,EAAEA,IAAI,IAAKA,IAAI,KAAK,IAAT,GAAgB,EAAhB,GAAqBA,IAAI,CAAC4B,KAAL,IAAc5B,IAAI,CAAC6B,IAFjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIG,CAAC;AACAC,MAAAA,aADA;AAEAC,MAAAA,YAFA;AAGAC,MAAAA,MAHA;AAIAC,MAAAA,UAJA;AAKAC,MAAAA;AALA,KAAD,KAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGjB,MAAM,IACL,4BACE,4BACMa,aAAa,CAAC;AAChBK,MAAAA,IAAI,EAAE,QADU;AAEhBC,MAAAA,WAAW,EAAE,QAFG;AAGhBhC,MAAAA,EAAE,EAAE,QAHY;AAIhBiC,MAAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWR,OAAX,GAAqB,SAArB,GAAiC,EAJ5B;AAKhB2B,MAAAA,QAAQ,EAAEtB,CAAC,IAAI;AACbA,QAAAA,CAAC,CAACuB,OAAF;AACA,aAAKD,QAAL,CAActB,CAAd,EAAiBC,MAAjB;AACD;AARe,KAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAaE;AACE,MAAA,KAAK,EAAE,KAAKE,KAAL,CAAWnB,IADpB;AAEE,MAAA,QAAQ,EAAE,KAAKwC,kBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAKE;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,EAME;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,EAOE;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,CAbF,CAFJ,CADF,EA4BGR,MAAM,GACL,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKb,KAAL,CAAWT,KAAX,CAAiB+B,GAAjB,CAAqB,CAACzC,IAAD,EAAO0C,KAAP,KACpB,MAAC,YAAD,eACMX,YAAY,CAAC;AAAEY,MAAAA,GAAG,EAAE3C,IAAI,CAACI,EAAZ;AAAgBsC,MAAAA,KAAhB;AAAuB1C,MAAAA;AAAvB,KAAD,CADlB;AAEE,MAAA,WAAW,EAAE0C,KAAK,KAAKR,gBAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQlC,IAAI,CAAC4B,KAAL,IAAc5B,IAAI,CAAC6B,IAA3B,CAJF,CADD,CADH,CADK,GAWH,IAvCN,CAXJ,CADF,CADF;AA0DD;;AAxFwC;;AA2F3C,eAAerB,YAAf","sourcesContent":["import React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nimport Song from \"./styles/song/songStyles\";\n\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_ARTISTS_QUERY = gql`\n  query SEARCH_ARTISTS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nconst SEARCH_ALBUMS_QUERY = gql`\n  query SEARCH_ALBUMS_QUERY($searchTerm: String!) {\n    albums(where: { OR: [{ title_contains: $searchTerm }] }) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_COMPOSERS_QUERY = gql`\n  query SEARCH_COMPOSERS_QUERY($searchTerm: String!) {\n    composers(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nfunction routeToItem(route, item) {\n  item &&\n    Router.push({\n      pathname: `/${route}`,\n      query: {\n        id: item.id\n      }\n    });\n}\n\nfunction returnQuery(item) {\n  console.log(item);\n  if (item === \"song\") {\n    return SEARCH_SONGS_QUERY;\n  }\n  if (item === \"album\") {\n    return SEARCH_ALBUMS_QUERY;\n  }\n  if (item === \"artist\") {\n    return SEARCH_ARTISTS_QUERY;\n  }\n  if (item === \"composer\") {\n    return SEARCH_COMPOSERS_QUERY;\n  }\n}\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false,\n    item: \"song\"\n  };\n\n  handleSelectChange = event => this.setState({ item: event.target.value });\n\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const response =\n      e.target.value &&\n      (await client.query({\n        query: returnQuery(this.state.item),\n        variables: { searchTerm: e.target.value }\n      }));\n    e.target.value &&\n      this.setState({\n        items:\n          response.data.songs ||\n          response.data.albums ||\n          response.data.composers ||\n          response.data.artists,\n        loading: false\n      });\n  }, 350);\n\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n        <Downshift\n          onChange={item => routeToItem(this.state.item, item)}\n          itemToString={item => (item === null ? \"\" : item.title || item.name)}\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            isOpen,\n            inputValue,\n            highlightedIndex\n          }) => (\n            <div>\n              <ApolloConsumer>\n                {client => (\n                  <>\n                    <input\n                      {...getInputProps({\n                        type: \"search\",\n                        placeholder: \"Search\",\n                        id: \"search\",\n                        className: this.state.loading ? \"loading\" : \"\",\n                        onChange: e => {\n                          e.persist();\n                          this.onChange(e, client);\n                        }\n                      })}\n                    />\n                    <select\n                      value={this.state.item}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"song\">Song</option>\n                      <option value=\"artist\">Artist</option>\n                      <option value=\"album\">Album</option>\n                      <option value=\"composer\">Composer</option>\n                    </select>\n                  </>\n                )}\n              </ApolloConsumer>\n              {isOpen ? (\n                <DropDown>\n                  {this.state.items.map((item, index) => (\n                    <DropDownItem\n                      {...getItemProps({ key: item.id, index, item })}\n                      highlighted={index === highlightedIndex}\n                    >\n                      <Title>{item.title || item.name}</Title>\n                    </DropDownItem>\n                  ))}\n                </DropDown>\n              ) : null}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}