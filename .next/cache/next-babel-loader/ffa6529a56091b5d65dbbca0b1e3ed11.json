{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\\n    songs(\\n      where: {\\n        OR: [\\n          { title_contains: $searchTerm }\\n          { altTitle_contains: $searchTerm }\\n          { fromFilm_contains: $searchTerm }\\n        ]\\n      }\\n    ) {\\n      id\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport Downshift from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport Song from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nvar SEARCH_SONGS_QUERY = gql(_templateObject());\n\nvar AutoComplete = /*#__PURE__*/function (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoComplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      songs: [],\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", debounce(function _callee(e, client) {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(client.query({\n                query: SEARCH_SONGS_QUERY,\n                variables: {\n                  searchTerm: e.target.value\n                }\n              }));\n\n            case 3:\n              response = _context.sent;\n\n              _this.setState({\n                items: response.data.songs,\n                loading: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 350));\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(SearchStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, __jsx(ApolloConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, function (client) {\n        return __jsx(\"input\", {\n          type: \"search\",\n          onChange: function onChange(e) {\n            e.persist();\n\n            _this2.onChange(e, client);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      }), __jsx(DropDown, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.state.songs.map(function (song) {\n        return __jsx(DropDownItem, {\n          key: song.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, song.id));\n      }))));\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Search.js"],"names":["React","Downshift","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","Song","Title","SEARCH_SONGS_QUERY","AutoComplete","songs","loading","e","client","setState","query","variables","searchTerm","target","value","response","items","data","persist","onChange","state","map","song","id","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,IAAMC,kBAAkB,GAAGP,GAAH,mBAAxB;;IAiBMQ,Y;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;+DAIGT,QAAQ,CAAC,iBAAOU,CAAP,EAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB,oBAAKC,QAAL,CAAc;AAAEH,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AADkB;AAAA,+CAEKE,MAAM,CAACE,KAAP,CAAa;AAClCA,gBAAAA,KAAK,EAAEP,kBAD2B;AAElCQ,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,UAAU,EAAEL,CAAC,CAACM,MAAF,CAASC;AAAvB;AAFuB,eAAb,CAFL;;AAAA;AAEZC,cAAAA,QAFY;;AAMlB,oBAAKN,QAAL,CAAc;AAAEO,gBAAAA,KAAK,EAAED,QAAQ,CAACE,IAAT,CAAcZ,KAAvB;AAA8BC,gBAAAA,OAAO,EAAE;AAAvC,eAAd;;AANkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAOhB,GAPgB,C;;;;;;;6BASV;AAAA;;AACP,aACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAAAE,MAAM;AAAA,eACL;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,QAAQ,EAAE,kBAAAD,CAAC,EAAI;AACbA,YAAAA,CAAC,CAACW,OAAF;;AACA,YAAA,MAAI,CAACC,QAAL,CAAcZ,CAAd,EAAiBC,MAAjB;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADK;AAAA,OADT,CADF,EAYE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKY,KAAL,CAAWf,KAAX,CAAiBgB,GAAjB,CAAqB,UAAAC,IAAI;AAAA,eACxB,MAAC,YAAD;AAAc,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,IAAI,CAACC,EAAT,CADF,CADwB;AAAA,OAAzB,CADH,CAZF,CADF,CADF;AAwBD;;;;EAvCwB/B,KAAK,CAACgC,S;;AA0CjC,eAAepB,YAAf","sourcesContent":["import React from \"react\";\nimport Downshift from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport Song from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\n\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nclass AutoComplete extends React.Component {\n  state = {\n    songs: [],\n    loading: false\n  };\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const response = await client.query({\n      query: SEARCH_SONGS_QUERY,\n      variables: { searchTerm: e.target.value }\n    });\n    this.setState({ items: response.data.songs, loading: false });\n  }, 350);\n\n  render() {\n    return (\n      <SearchStyles>\n        <div>\n          <ApolloConsumer>\n            {client => (\n              <input\n                type=\"search\"\n                onChange={e => {\n                  e.persist();\n                  this.onChange(e, client);\n                }}\n              />\n            )}\n          </ApolloConsumer>\n          <DropDown>\n            {this.state.songs.map(song => (\n              <DropDownItem key={song.id}>\n                <p>{song.id}</p>\n              </DropDownItem>\n            ))}\n          </DropDown>\n        </div>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}