{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport PaginationStyles from \"./styles/PaginationStyles\";\nimport { perPage } from \"../config\";\nimport { Paginator } from \"primereact/paginator\";\nconst SONGS_PAGINATION_QUERY = gql`\n  query SONGS_PAGINATION_QUERY($letter: String) {\n    songsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst SONGS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query SONGS_PAGINATION_QUERY {\n    songsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY($letter: String) {\n    albumsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY {\n    albumsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY($letter: String) {\n    artistsConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY {\n    artistsConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY($letter: String) {\n    composersConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY {\n    composersConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nconst Pagination = ({\n  page,\n  model,\n  letter\n}) => {\n  let PAGINATION_QUERY;\n\n  switch (model) {\n    case \"songs\":\n      letter === \"#\" ? PAGINATION_QUERY = SONGS_PAGINATION_WITH_NUMBER_QUERY : PAGINATION_QUERY = SONGS_PAGINATION_QUERY;\n      break;\n\n    case \"albums\":\n      letter === \"#\" ? PAGINATION_QUERY = ALBUMS_PAGINATION_WITH_NUMBER_QUERY : PAGINATION_QUERY = ALBUMS_PAGINATION_QUERY;\n      break;\n\n    case \"singles\":\n      letter === \"#\" ? PAGINATION_QUERY = ALBUMS_PAGINATION_WITH_NUMBER_QUERY : PAGINATION_QUERY = ALBUMS_PAGINATION_QUERY;\n      break;\n\n    case \"artists\":\n      PAGINATION_QUERY = ARTISTS_PAGINATION_QUERY;\n      break;\n\n    case \"composers\":\n      PAGINATION_QUERY = COMPOSERS_PAGINATION_QUERY;\n      break;\n\n    default:\n      PAGINATION_QUERY = SONGS_PAGINATION_QUERY;\n  }\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PAGINATION_QUERY, {\n    variables: {\n      letter: letter\n    }\n  });\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (error) return __jsx(\"p\", null, \"Error!\");\n  let count;\n  if (model === \"songs\") count = data.songsConnection.aggregate.count;\n  if (model === \"artists\") count = data.artistsConnection.aggregate.count;\n  if (model === \"albums\") count = data.albumsConnection.aggregate.count;\n  if (model === \"singles\") count = data.albumsConnection.aggregate.count;\n  if (model === \"composers\") count = data.composersConnection.aggregate.count;\n  const pages = Math.ceil(count / perPage) || 1;\n  return __jsx(PaginationStyles, null, __jsx(Link, {\n    href: {\n      pathname: model,\n      query: {\n        page: page - 1\n      }\n    }\n  }, __jsx(\"a\", {\n    className: \"prev\",\n    \"aria-disabled\": page <= 1\n  }, \"Prev\")), __jsx(\"p\", {\n    className: \"pagination-page-number\"\n  }, \"Page \", page, \" of \", pages), __jsx(\"p\", {\n    className: \"pagination-count\"\n  }, count, \" \", model), __jsx(Link, {\n    href: {\n      pathname: model,\n      query: {\n        page: page + 1\n      }\n    }\n  }, __jsx(\"a\", {\n    className: \"next\",\n    \"aria-disabled\": page >= pages\n  }, \"Next\")));\n};\n\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}