{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nconst SingleSongStyles = styled.div.withConfig({\n  displayName: \"SingleSong__SingleSongStyles\",\n  componentId: \"sc-1e0bt3h-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"No song found for \", id); // console.log(data.song);\n\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings\n  } = data.song;\n  return __jsx(SingleSongStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, title), composer && composer.map(comp => __jsx(\"h2\", {\n    key: comp.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"composer\",\n      query: {\n        id: comp.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Composer: \", comp.name)))), publisher && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Publisher: \", publisher), publishedDate && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Published Date: \", publishedDate), altTitle && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Alt Title: \", altTitle), instrumental && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Instrumental\"), fromFilm && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"From Film: \", fromFilm), tribute && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, tribute), artists && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Performed by:\", \" \", artists.map(artist => __jsx(\"p\", {\n    key: artist.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"artist\",\n      query: {\n        id: artist.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, artist.name))))), albums && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Can be heard on the albums:\", \" \", albums.map(album => __jsx(\"p\", {\n    key: album.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"album\",\n      query: {\n        id: album.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, album.title)))))));\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","gql","useQuery","ErrorMessage","styled","Link","Card","SingleSongStyles","div","props","theme","bs","SINGLE_SONG_QUERY","SingleSong","id","loading","error","data","variables","song","title","composer","publisher","publishedDate","altTitle","instrumental","fromFilm","tribute","artists","albums","recordings","map","comp","pathname","query","name","artist","album"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,MAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,oMAGLC,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,EAHjB,CAAtB;AAiBA,MAAMC,iBAAiB,GAAGX,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA9B;;AAiCA,MAAMY,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC7B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bf,QAAQ,CAACU,iBAAD,EAAoB;AAC3DM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADgD,GAApB,CAAzC;AAGA,MAAIE,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAI,CAACE,IAAI,CAACE,IAAV,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBL,EAAtB,CAAP,CANa,CAO7B;;AACA,QAAM;AACJM,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA,OATI;AAUJC,IAAAA,MAVI;AAWJC,IAAAA;AAXI,MAYFb,IAAI,CAACE,IAZT;AAaA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBC,KAAvB,CADF,EAEGC,QAAQ,IACPA,QAAQ,CAACU,GAAT,CAAcC,IAAD,IACX;AAAI,IAAA,GAAG,EAAEA,IAAI,CAAClB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAEmB,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,KAAK,EAAE;AAAEpB,QAAAA,EAAE,EAAEkB,IAAI,CAAClB;AAAX;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAckB,IAAI,CAACG,IAAnB,CADF,CADF,CADF,CAHJ,EAUGb,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBA,SAAhB,CAVhB,EAWGC,aAAa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqBA,aAArB,CAXpB,EAYGC,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBA,QAAhB,CAZf,EAaGC,YAAY,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbnB,EAcGC,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBA,QAAhB,CAdf,EAeGC,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAL,CAfd,EAgBGC,OAAO,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgB,GADhB,EAEGA,OAAO,CAACG,GAAR,CAAaK,MAAD,IACX;AAAG,IAAA,GAAG,EAAEA,MAAM,CAACtB,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAEmB,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,KAAK,EAAE;AAAEpB,QAAAA,EAAE,EAAEsB,MAAM,CAACtB;AAAb;AAA7B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIsB,MAAM,CAACD,IAAX,CADF,CADF,CADD,CAFH,CAjBJ,EA4BGN,MAAM,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC8B,GAD9B,EAEGA,MAAM,CAACE,GAAP,CAAYM,KAAD,IACV;AAAG,IAAA,GAAG,EAAEA,KAAK,CAACvB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAEmB,MAAAA,QAAQ,EAAE,OAAZ;AAAqBC,MAAAA,KAAK,EAAE;AAAEpB,QAAAA,EAAE,EAAEuB,KAAK,CAACvB;AAAZ;AAA5B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIuB,KAAK,CAACjB,KAAV,CADF,CADF,CADD,CAFH,CA7BJ,CADF,CADF;AA6CD,CAlED;;AAoEA,eAAeP,UAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id },\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  // console.log(data.song);\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings,\n  } = data.song;\n  return (\n    <SingleSongStyles>\n      <div className=\"details\">\n        <h1 className=\"title\">{title}</h1>\n        {composer &&\n          composer.map((comp) => (\n            <h2 key={comp.id}>\n              <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n                <a>Composer: {comp.name}</a>\n              </Link>\n            </h2>\n          ))}\n        {publisher && <h2>Publisher: {publisher}</h2>}\n        {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n        {altTitle && <h2>Alt Title: {altTitle}</h2>}\n        {instrumental && <h2>Instrumental</h2>}\n        {fromFilm && <h2>From Film: {fromFilm}</h2>}\n        {tribute && <h2>{tribute}</h2>}\n        {artists && (\n          <h2>\n            Performed by:{\" \"}\n            {artists.map((artist) => (\n              <p key={artist.id}>\n                <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n                  <a>{artist.name}</a>\n                </Link>\n              </p>\n            ))}\n          </h2>\n        )}\n        {albums && (\n          <h2>\n            Can be heard on the albums:{\" \"}\n            {albums.map((album) => (\n              <p key={album.id}>\n                <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n                  <a>{album.title}</a>\n                </Link>\n              </p>\n            ))}\n          </h2>\n        )}\n      </div>\n    </SingleSongStyles>\n  );\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}