{"ast":null,"code":"import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    uri: true ? endpoint : endpoint,\n    onError: ({\n      networkError,\n      graphQLErrors\n    }) => {\n      graphQLErrors && graphQLErrors.forEach(gqlErr => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers\n      });\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","createClient","headers","uri","onError","networkError","graphQLErrors","forEach","gqlErr","console","log","request","operation","setContext","fetchOptions","credentials"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,WAAzB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIH,YAAJ,CAAiB;AACtBI,IAAAA,GAAG,EAAE,OAAyCH,QAAzC,GAAoDA,QADnC;AAEtBI,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,KAAqC;AAC5CA,MAAAA,aAAa,IAAIA,aAAa,CAACC,OAAd,CAAsBC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAhC,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBL,YAAa,EAA1C;AACD,KALqB;AAMtBM,IAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBb,QAAAA;AAJmB,OAArB;AAMD;AAbqB,GAAjB,CAAP;AAeD;;AAED,eAAeJ,UAAU,CAACG,YAAD,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === \"development\" ? endpoint : endpoint,\n    onError: ({ networkError, graphQLErrors }) => {\n      graphQLErrors && graphQLErrors.forEach(gqlErr => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers\n      });\n    }\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}