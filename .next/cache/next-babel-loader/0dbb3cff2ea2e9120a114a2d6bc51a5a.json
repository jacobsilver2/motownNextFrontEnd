{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_SONG_MUTATION(\\n    $id: ID!\\n    $title: String!\\n    $publisher: String\\n    $publishedDate: DateTime\\n    $altTitle: String\\n    $instrumental: Boolean\\n    $fromFilm: String\\n    $tribute: String\\n  ) {\\n    updateSong(\\n      id: $id\\n      title: $title\\n      publisher: $publisher\\n      publishedDate: $publishedDate\\n      altTitle: $altTitle\\n      instrumental: $instrumental\\n      fromFilm: $fromFilm\\n      tribute: $tribute\\n    ) {\\n      id\\n      title\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      publisher\\n      altTitle\\n      fromFilm\\n      tribute\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nvar SINGLE_SONG_QUERY = gql(_templateObject());\nvar UPDATE_SONG_MUTATION = gql(_templateObject2());\n\nvar UpdateSong = function UpdateSong(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  function updateSong() {\n    console.log(\"running update song\");\n  }\n\n  return __jsx(Form, {\n    onSubmit: updateSong,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  });\n}; // class UpdateSong extends Component {\n//   state = {};\n//   handleChange = e => {\n//     const { name, type, value } = e.target;\n//     const val = type === \"number\" ? parseFloat(value) : value;\n//     this.setState({ [name]: val });\n//   };\n//   updateSong = async (e, updateSongMutation) => {\n//     console.log(updateSongMutation);\n//     e.preventDefault();\n//     console.log(\"Updating Song!!\");\n//     console.log(this.state);\n//     const res = await updateSongMutation({\n//       variables: {\n//         id: this.props.id,\n//         ...this.state\n//       }\n//     });\n//     console.log(\"Updated!!\");\n//   };\n//   render() {\n//     return (\n//       <Query\n//         query={SINGLE_SONG_QUERY}\n//         variables={{\n//           id: this.props.id\n//         }}\n//       >\n//         {({ data, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (!data.song) return <p>No Item Found for ID {this.props.id}</p>;\n//           return (\n//             <Mutation mutation={UPDATE_SONG_MUTATION} variables={this.state}>\n//               {(updateSong, { loading, error }) => (\n//                 <Form onSubmit={e => this.updateSong(e, updateSong)}>\n//                   <Error error={error} />\n//                   <fieldset disabled={loading} aria-busy={loading}>\n//                     <label htmlFor=\"title\">\n//                       Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"title\"\n//                         name=\"title\"\n//                         placeholder=\"Title\"\n//                         required\n//                         defaultValue={data.song.title}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"publisher\">\n//                       Publisher\n//                       <input\n//                         type=\"text\"\n//                         id=\"publisher\"\n//                         name=\"publisher\"\n//                         placeholder=\"Title\"\n//                         defaultValue={data.song.publisher}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"altTitle\">\n//                       Alt Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"altTitle\"\n//                         name=\"altTitle\"\n//                         placeholder=\"Alt Title\"\n//                         defaultValue={data.song.altTitle}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"fromFilm\">\n//                       From Film:\n//                       <input\n//                         type=\"text\"\n//                         id=\"fromFilm\"\n//                         name=\"fromFilm\"\n//                         placeholder=\"From Film\"\n//                         defaultValue={data.song.fromFilm}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"tribute\">\n//                       Tribute To:\n//                       <input\n//                         type=\"text\"\n//                         id=\"tribute\"\n//                         name=\"tribute\"\n//                         placeholder=\"Tribute\"\n//                         defaultValue={data.song.tribute}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <button type=\"submit\">\n//                       Sav{loading ? \"ing\" : \"e\"} Changes\n//                     </button>\n//                   </fieldset>\n//                 </Form>\n//               )}\n//             </Mutation>\n//           );\n//         }}\n//       </Query>\n//     );\n//   }\n// }\n\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js"],"names":["React","Component","Mutation","Query","useQuery","gql","Router","Form","Error","SINGLE_SONG_QUERY","UPDATE_SONG_MUTATION","UpdateSong","id","variables","loading","error","data","updateSong","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,IAAMC,iBAAiB,GAAGJ,GAAH,mBAAvB;AAaA,IAAMK,oBAAoB,GAAGL,GAAH,oBAA1B;;AA6BA,IAAMM,UAAU,GAAG,SAAbA,UAAa,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACIR,QAAQ,CAACK,iBAAD,EAAoB;AAC3DI,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADgD,GAApB,CADZ;AAAA,MACrBE,OADqB,aACrBA,OADqB;AAAA,MACZC,KADY,aACZA,KADY;AAAA,MACLC,IADK,aACLA,IADK;;AAK7B,WAASC,UAAT,GAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;AAED,SAAO,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAVD,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeN,UAAf;AACA,SAASD,oBAAT","sourcesContent":["import React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\n\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $publishedDate: DateTime\n    $altTitle: String\n    $instrumental: Boolean\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      publishedDate: $publishedDate\n      altTitle: $altTitle\n      instrumental: $instrumental\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id }\n  });\n\n  function updateSong() {\n    console.log(\"running update song\");\n  }\n\n  return <Form onSubmit={updateSong}></Form>;\n};\n\n// class UpdateSong extends Component {\n//   state = {};\n//   handleChange = e => {\n//     const { name, type, value } = e.target;\n//     const val = type === \"number\" ? parseFloat(value) : value;\n//     this.setState({ [name]: val });\n//   };\n//   updateSong = async (e, updateSongMutation) => {\n//     console.log(updateSongMutation);\n//     e.preventDefault();\n//     console.log(\"Updating Song!!\");\n//     console.log(this.state);\n//     const res = await updateSongMutation({\n//       variables: {\n//         id: this.props.id,\n//         ...this.state\n//       }\n//     });\n//     console.log(\"Updated!!\");\n//   };\n//   render() {\n//     return (\n//       <Query\n//         query={SINGLE_SONG_QUERY}\n//         variables={{\n//           id: this.props.id\n//         }}\n//       >\n//         {({ data, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (!data.song) return <p>No Item Found for ID {this.props.id}</p>;\n//           return (\n//             <Mutation mutation={UPDATE_SONG_MUTATION} variables={this.state}>\n//               {(updateSong, { loading, error }) => (\n//                 <Form onSubmit={e => this.updateSong(e, updateSong)}>\n//                   <Error error={error} />\n//                   <fieldset disabled={loading} aria-busy={loading}>\n//                     <label htmlFor=\"title\">\n//                       Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"title\"\n//                         name=\"title\"\n//                         placeholder=\"Title\"\n//                         required\n//                         defaultValue={data.song.title}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"publisher\">\n//                       Publisher\n//                       <input\n//                         type=\"text\"\n//                         id=\"publisher\"\n//                         name=\"publisher\"\n//                         placeholder=\"Title\"\n//                         defaultValue={data.song.publisher}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"altTitle\">\n//                       Alt Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"altTitle\"\n//                         name=\"altTitle\"\n//                         placeholder=\"Alt Title\"\n//                         defaultValue={data.song.altTitle}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"fromFilm\">\n//                       From Film:\n//                       <input\n//                         type=\"text\"\n//                         id=\"fromFilm\"\n//                         name=\"fromFilm\"\n//                         placeholder=\"From Film\"\n//                         defaultValue={data.song.fromFilm}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"tribute\">\n//                       Tribute To:\n//                       <input\n//                         type=\"text\"\n//                         id=\"tribute\"\n//                         name=\"tribute\"\n//                         placeholder=\"Tribute\"\n//                         defaultValue={data.song.tribute}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <button type=\"submit\">\n//                       Sav{loading ? \"ing\" : \"e\"} Changes\n//                     </button>\n//                   </fieldset>\n//                 </Form>\n//               )}\n//             </Mutation>\n//           );\n//         }}\n//       </Query>\n//     );\n//   }\n// }\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };\n"]},"metadata":{},"sourceType":"module"}