{"ast":null,"code":"import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient(_ref) {\n  var headers = _ref.headers;\n  return new ApolloClient({\n    uri: true ? endpoint : endpoint,\n    onError: function onError(_ref2) {\n      var networkError = _ref2.networkError,\n          graphQLErrors = _ref2.graphQLErrors;\n      graphQLErrors && graphQLErrors.forEach(function (gqlErr) {\n        return console.log(gqlErr);\n      });\n      console.log(\"NetworkError: \".concat(networkError));\n    },\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers: headers\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addToLocalIdSelectionMutation: function addToLocalIdSelectionMutation(_, variables, _ref3) {// read the selectedIds value from the cache\n\n            var cache = _ref3.cache;\n          }\n        }\n      },\n      defaults: {\n        selectedIds: [\"test string\"]\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","LOCAL_STATE_QUERY","ADD_TO_LOCAL_ID_SELECTION_MUTATION","createClient","headers","uri","onError","networkError","graphQLErrors","forEach","gqlErr","console","log","request","operation","setContext","fetchOptions","credentials","clientState","resolvers","Mutation","addToLocalIdSelectionMutation","_","variables","cache","defaults","selectedIds"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,kCAAT,QAAmD,qBAAnD;;AAEA,SAASC,YAAT,OAAmC;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACjC,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,GAAG,EAAE,OAAyCL,QAAzC,GAAoDA,QADnC;AAEtBM,IAAAA,OAAO,EAAE,wBAAqC;AAAA,UAAlCC,YAAkC,SAAlCA,YAAkC;AAAA,UAApBC,aAAoB,SAApBA,aAAoB;AAC5CA,MAAAA,aAAa,IAAIA,aAAa,CAACC,OAAd,CAAsB,UAACC,MAAD;AAAA,eAAYC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAZ;AAAA,OAAtB,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,yBAA6BL,YAA7B;AACD,KALqB;AAMtBM,IAAAA,OAAO,EAAE,iBAACC,SAAD,EAAe;AACtBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBb,QAAAA,OAAO,EAAPA;AAJmB,OAArB;AAMD,KAbqB;AActB;AACAc,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,6BADQ,yCACsBC,CADtB,EACyBC,SADzB,SAC+C,CACrD;;AADqD,gBAATC,KAAS,SAATA,KAAS;AAEtD;AAHO;AADD,OADA;AAQXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,WAAW,EAAE,CAAC,aAAD;AADL;AARC;AAfS,GAAjB,CAAP;AA4BD;;AAED,eAAe5B,UAAU,CAACK,YAAD,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === \"development\" ? endpoint : endpoint,\n    onError: ({ networkError, graphQLErrors }) => {\n      graphQLErrors && graphQLErrors.forEach((gqlErr) => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: (operation) => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\",\n        },\n        headers,\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addToLocalIdSelectionMutation(_, variables, { cache }) {\n            // read the selectedIds value from the cache\n          },\n        },\n      },\n      defaults: {\n        selectedIds: [\"test string\"],\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}