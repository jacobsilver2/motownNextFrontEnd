{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_ITEM_QUERY($id: ID!) {\n    item(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String\n    $publisher: String\n    $publishedDate: DateTime\n    $altTitle: String\n    $instrumental: Boolean\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      publishedDate: $publishedDate\n      altTitle: $altTitle\n      instrumental: $instrumental\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nclass UpdateItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === \"number\" ? parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      });\n    });\n\n    _defineProperty(this, \"updateSong\", async (e, updateSongMutation) => {\n      e.preventDefault();\n      console.log(\"Updating Song!!\");\n      console.log(this.state);\n      const res = await updateSongMutation({\n        variables: _objectSpread({\n          id: this.props.id\n        }, this.state)\n      });\n      console.log(\"Updated!!\");\n    });\n  }\n\n  render() {\n    return __jsx(Query, {\n      query: SINGLE_SONG_QUERY,\n      variables: {\n        id: this.props.id\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, ({\n      data,\n      loading\n    }) => {\n      if (loading) return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Loading...\");\n      if (!data.song) return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"No Item Found for ID \", this.props.id);\n      return __jsx(Mutation, {\n        mutation: UPDATE_SONG_MUTATION,\n        variables: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, (updateSong, {\n        loading,\n        error\n      }) => __jsx(Form, {\n        onSubmit: e => this.udpateSong(e, updateSong),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, __jsx(Error, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), __jsx(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        name: \"title\",\n        placeholder: \"Title\",\n        required: true,\n        defaultValue: data.song.title,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })), __jsx(\"label\", {\n        htmlFor: \"publisher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"publisher\",\n        name: \"publisher\",\n        placeholder: \"Title\",\n        required: true,\n        defaultValue: data.song.publisher,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), __jsx(\"label\", {\n        htmlFor: \"publisher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"publisher\",\n        name: \"publisher\",\n        placeholder: \"Title\",\n        required: true,\n        defaultValue: data.song.publisher,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), __jsx(\"label\", {\n        htmlFor: \"altTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"altTitle\",\n        name: \"altTitle\",\n        placeholder: \"Alt Title\",\n        required: true,\n        defaultValue: data.song.altTitle,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })), __jsx(\"label\", {\n        htmlFor: \"altTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"altTitle\",\n        name: \"altTitle\",\n        placeholder: \"Alt Title\",\n        required: true,\n        defaultValue: data.song.altTitle,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), __jsx(\"label\", {\n        htmlFor: \"fromFilm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"fromFilm\",\n        name: \"fromFilm\",\n        placeholder: \"From Film\",\n        required: true,\n        defaultValue: data.song.fromFilm,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })), __jsx(\"label\", {\n        htmlFor: \"tribute\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"tribute\",\n        name: \"tribute\",\n        placeholder: \"Tribute\",\n        required: true,\n        defaultValue: data.song.tribute,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })), __jsx(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Sav\", loading ? \"ing\" : \"e\", \" Changes\"))));\n    });\n  }\n\n}\n\nexport default UpdateItem;\nexport { UPDATE_SONG_MUTATION };","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js"],"names":["React","Component","Mutation","Query","gql","Router","Form","Error","SINGLE_SONG_QUERY","UPDATE_SONG_MUTATION","UpdateItem","e","name","type","value","target","val","parseFloat","setState","updateSongMutation","preventDefault","console","log","state","res","variables","id","props","render","data","loading","song","updateSong","error","udpateSong","title","handleChange","publisher","altTitle","fromFilm","tribute"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_ITEM_QUERY($id: ID!) {\n    item(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\n\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String\n    $publisher: String\n    $publishedDate: DateTime\n    $altTitle: String\n    $instrumental: Boolean\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      publishedDate: $publishedDate\n      altTitle: $altTitle\n      instrumental: $instrumental\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nclass UpdateItem extends Component {\n  state = {};\n  handleChange = e => {\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    this.setState({ [name]: val });\n  };\n  updateSong = async (e, updateSongMutation) => {\n    e.preventDefault();\n    console.log(\"Updating Song!!\");\n    console.log(this.state);\n    const res = await updateSongMutation({\n      variables: {\n        id: this.props.id,\n        ...this.state\n      }\n    });\n    console.log(\"Updated!!\");\n  };\n\n  render() {\n    return (\n      <Query\n        query={SINGLE_SONG_QUERY}\n        variables={{\n          id: this.props.id\n        }}\n      >\n        {({ data, loading }) => {\n          if (loading) return <p>Loading...</p>;\n          if (!data.song) return <p>No Item Found for ID {this.props.id}</p>;\n          return (\n            <Mutation mutation={UPDATE_SONG_MUTATION} variables={this.state}>\n              {(updateSong, { loading, error }) => (\n                <Form onSubmit={e => this.udpateSong(e, updateSong)}>\n                  <Error error={error} />\n                  <fieldset disabled={loading} aria-busy={loading}>\n                    <label htmlFor=\"title\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"title\"\n                        name=\"title\"\n                        placeholder=\"Title\"\n                        required\n                        defaultValue={data.song.title}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"publisher\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"publisher\"\n                        name=\"publisher\"\n                        placeholder=\"Title\"\n                        required\n                        defaultValue={data.song.publisher}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"publisher\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"publisher\"\n                        name=\"publisher\"\n                        placeholder=\"Title\"\n                        required\n                        defaultValue={data.song.publisher}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"altTitle\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"altTitle\"\n                        name=\"altTitle\"\n                        placeholder=\"Alt Title\"\n                        required\n                        defaultValue={data.song.altTitle}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"altTitle\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"altTitle\"\n                        name=\"altTitle\"\n                        placeholder=\"Alt Title\"\n                        required\n                        defaultValue={data.song.altTitle}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"fromFilm\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"fromFilm\"\n                        name=\"fromFilm\"\n                        placeholder=\"From Film\"\n                        required\n                        defaultValue={data.song.fromFilm}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <label htmlFor=\"tribute\">\n                      Title\n                      <input\n                        type=\"text\"\n                        id=\"tribute\"\n                        name=\"tribute\"\n                        placeholder=\"Tribute\"\n                        required\n                        defaultValue={data.song.tribute}\n                        onChange={this.handleChange}\n                      />\n                    </label>\n\n                    <button type=\"submit\">\n                      Sav{loading ? \"ing\" : \"e\"} Changes\n                    </button>\n                  </fieldset>\n                </Form>\n              )}\n            </Mutation>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UpdateItem;\nexport { UPDATE_SONG_MUTATION };\n"]},"metadata":{},"sourceType":"module"}