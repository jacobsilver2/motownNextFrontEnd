{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Router from \"next/router\";\nimport Select from \"react-select\";\nimport Artist from \"./Artist\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZ } from \"../lib/selectButtons\";\nimport Center from \"./styles/Center\";\nimport MultiList from \"./styles/Multilist\";\nimport sortBySelectItems from \"../lib/sortByOptions/artistsSortBySelectOptions\";\nimport customTheme from \"./styles/reactSelectTheme\";\nimport getSelectLabel from \"../lib/sortByOptions/sortBySelectReturnLabel\";\nconst ALL_ARTISTS_QUERY = gql`\n  query ALL_ARTISTS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: ArtistOrderByInput!) {\n    artists(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      name\n    }\n  }\n`;\nexport const ALL_ARTISTS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ARTISTS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: ArtistOrderByInput!) {\n    artists(where: {name_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      name\n    }\n  }\n`;\n\nconst Artists = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"name_ASC\");\n  const {\n    loading: allArtistsLoading,\n    error: allArtistsError,\n    data: allArtistsData\n  } = useQuery(ALL_ARTISTS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: artistsBeginningWithLoading,\n    error: artistsBeginningWithError,\n    data: artistsBeginningWithData\n  } = useQuery(ALL_ARTISTS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  if (allArtistsLoading || artistsBeginningWithLoading) return __jsx(\"p\", null, \"Loading...\");\n  if (allArtistsError || artistsBeginningWithError) return __jsx(\"p\", null, \"Error :(\");\n  const artists = !letter ? allArtistsData.artists.map(artist => __jsx(Artist, {\n    key: artist.id,\n    artist: artist\n  })) : artistsBeginningWithData.artists.map(artist => __jsx(Artist, {\n    key: artist.id,\n    artist: artist\n  }));\n  return __jsx(Center, null, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZ,\n    onChange: e => {\n      setLetter(e.value);\n      Router.push({\n        pathname: \"/artists\",\n        query: {\n          page: 1\n        }\n      });\n    }\n  }), __jsx(\"br\", null), __jsx(Select, {\n    options: sortBySelectItems,\n    theme: customTheme,\n    placeholder: `Sort by ${getSelectLabel(sortBySelectItems, sortBy)}`,\n    onChange: e => setSortBy(e.value),\n    isSearchable: true\n  }), __jsx(\"br\", null), __jsx(Pagination, {\n    page: page,\n    model: \"artists\",\n    letter: letter\n  }), __jsx(MultiList, null, artists), __jsx(Pagination, {\n    page: page,\n    model: \"artists\",\n    letter: letter\n  }));\n};\n\nexport default Artists;","map":null,"metadata":{},"sourceType":"module"}