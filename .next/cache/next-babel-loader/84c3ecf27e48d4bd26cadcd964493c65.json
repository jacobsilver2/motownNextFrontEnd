{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport formatDate from \"../lib/formatDate\";\nimport Link from \"next/link\"; // import { Card } from \"primereact/card\";\n\nimport Card from \"./Card\"; // import { Button } from \"primereact/button\";\n\nimport Button from \"./Button\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport styled from \"styled-components\";\nconst StyledFooter = styled.div.withConfig({\n  displayName: \"Album__StyledFooter\",\n  componentId: \"f8g7qf-0\"\n})([\"display:flex;justify-content:space-evenly;\"]);\nconst StyledFlexStart = styled.div.withConfig({\n  displayName: \"Album__StyledFlexStart\",\n  componentId: \"f8g7qf-1\"\n})([\"align-self:center;\"]);\nconst StlyedFlexEnd = styled.div.withConfig({\n  displayName: \"Album__StlyedFlexEnd\",\n  componentId: \"f8g7qf-2\"\n})([\"align-self:flex-end;\"]);\nexport const ADD_OR_REMOVE_LOCAL_ID_SELECTION_MUTATION = gql`\n  mutation($id: String!) {\n    addOrRemoveLocalIdSelection(id: $id) @client\n  }\n`;\nexport const LOCAL_STATE_QUERY = gql`\n  query {\n    selectedIds @client\n  }\n`;\n\nconst Album = ({\n  album\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CURRENT_USER_QUERY);\n  const {\n    loading: localStateQueryLoading,\n    error: localStateQueryError,\n    data: localStateQueryData\n  } = useQuery(LOCAL_STATE_QUERY);\n  const [addOrRemoveLocalIdSelectionMutation, {\n    loading: addOrRemoveLocalIdSelectionMutationLoading,\n    error: addOrRemoveLocalIdSelectionMutationError\n  }] = useMutation(ADD_OR_REMOVE_LOCAL_ID_SELECTION_MUTATION);\n\n  function handleChecked(e) {\n    addOrRemoveLocalIdSelectionMutation({\n      variables: {\n        id: album.id\n      }\n    });\n  }\n\n  function isChecked(id) {\n    return localStateQueryData.selectedIds.includes(id);\n  }\n\n  const footer = data.me ? __jsx(StyledFooter, null, __jsx(StyledFlexStart, null, __jsx(Link, {\n    href: {\n      pathname: \"/updatealbum\",\n      query: {\n        id: album.id\n      }\n    }\n  }, __jsx(\"a\", null, __jsx(Button, {\n    buttonStyle: \"primary\",\n    icon: \"pi pi-pencil\"\n  }, \"Edit\")))), __jsx(StlyedFlexEnd, null, __jsx(Checkbox, {\n    onChange: e => handleChecked(e),\n    checked: isChecked(album.id)\n  }))) : null;\n\n  const title = __jsx(\"span\", null, __jsx(Link, {\n    href: {\n      pathname: \"/album\",\n      query: {\n        id: album.id\n      }\n    }\n  }, __jsx(\"a\", null, album.title || \"no title\")));\n\n  const artists = album.artists && album.artists.map((artist, index) => __jsx(\"span\", {\n    key: artist.name\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/artist\",\n      query: {\n        id: artist.id\n      }\n    }\n  }, __jsx(\"a\", null, artist.name)), album.artists.length === index + 1 ? \" \" : \", \"));\n  return __jsx(Card, {\n    title: title,\n    footer: footer,\n    subTitle: album.releaseDate ? `released ${formatDate(album.releaseDate)}` : \"no release date information\"\n  }, album.format && __jsx(\"div\", {\n    className: \"format\"\n  }, \"Format: \", album.format), album.catalogNumber && __jsx(\"div\", {\n    className: \"catalognumber\"\n  }, \"Catalog #: \", album.catalogNumber), artists);\n};\n\nexport default Album;","map":null,"metadata":{},"sourceType":"module"}