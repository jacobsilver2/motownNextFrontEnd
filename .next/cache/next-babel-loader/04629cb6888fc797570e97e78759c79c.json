{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleAlbum.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nconst SingleAlbumStyles = styled.div.withConfig({\n  displayName: \"SingleAlbum__SingleAlbumStyles\",\n  componentId: \"gstqrx-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      releaseDate\n      recordLabel\n      songs {\n        id\n        title\n      }\n      artists {\n        id\n        name\n      }\n      recordings {\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleAlbum = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.album) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"No album found for \", id);\n  const {\n    title,\n    catalogNumber,\n    format,\n    info,\n    releaseDate,\n    recordLabel,\n    songs,\n    artists,\n    recordings\n  } = data.album;\n  return __jsx(SingleAlbumStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, title), catalogNumber && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Catalog Number: \", catalogNumber), format && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Format: \", format), releaseDate && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Release Date: \", releaseDate), recordLabel && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Record Label: \", recordLabel), info && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Additional Info: \", info), songs && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Songs:\", \" \", songs.map(song => __jsx(\"p\", {\n    key: song.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"song\",\n      query: {\n        id: song.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, song.title))))), artists && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Artists on this album:\", \" \", artists.map(artist => __jsx(\"p\", {\n    key: artist.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"artist\",\n      query: {\n        id: artist.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, artist.name))))), recordings && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Recordings:\", \" \", recordings.map(recording => __jsx(\"div\", {\n    key: recording.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, recording.producer && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Producer: \", recording.producer), recording.location && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Location: \", recording.location), recording.completed && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Completed: \", recording.completed))))));\n};\n\nexport default SingleAlbum;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleAlbum.js"],"names":["React","gql","useQuery","ErrorMessage","styled","Link","SingleAlbumStyles","div","props","theme","bs","SINGLE_ALBUM_QUERY","SingleAlbum","id","loading","error","data","variables","album","title","catalogNumber","format","info","releaseDate","recordLabel","songs","artists","recordings","map","song","pathname","query","artist","name","recording","producer","location","completed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\n\nconst SingleAlbumStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      releaseDate\n      recordLabel\n      songs {\n        id\n        title\n      }\n      artists {\n        id\n        name\n      }\n      recordings {\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleAlbum = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: { id }\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.album) return <p>No album found for {id}</p>;\n  const {\n    title,\n    catalogNumber,\n    format,\n    info,\n    releaseDate,\n    recordLabel,\n    songs,\n    artists,\n    recordings\n  } = data.album;\n  return (\n    <SingleAlbumStyles>\n      <div className=\"details\">\n        <h1 className=\"title\">{title}</h1>\n        {catalogNumber && <h2>Catalog Number: {catalogNumber}</h2>}\n        {format && <h2>Format: {format}</h2>}\n        {releaseDate && <h2>Release Date: {releaseDate}</h2>}\n        {recordLabel && <h2>Record Label: {recordLabel}</h2>}\n        {info && <h2>Additional Info: {info}</h2>}\n        {songs && (\n          <h2>\n            Songs:{\" \"}\n            {songs.map(song => (\n              <p key={song.id}>\n                <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n                  <a>{song.title}</a>\n                </Link>\n              </p>\n            ))}\n          </h2>\n        )}\n        {artists && (\n          <h2>\n            Artists on this album:{\" \"}\n            {artists.map(artist => (\n              <p key={artist.id}>\n                <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n                  <a>{artist.name}</a>\n                </Link>\n              </p>\n            ))}\n          </h2>\n        )}\n        {recordings && (\n          <h2>\n            Recordings:{\" \"}\n            {recordings.map(recording => (\n              <div key={recording.id}>\n                {recording.producer && <h2>Producer: {recording.producer}</h2>}\n                {recording.location && <h2>Location: {recording.location}</h2>}\n                {recording.completed && (\n                  <h2>Completed: {recording.completed}</h2>\n                )}\n              </div>\n            ))}\n          </h2>\n        )}\n      </div>\n    </SingleAlbumStyles>\n  );\n};\n\nexport default SingleAlbum;\n"]},"metadata":{},"sourceType":"module"}