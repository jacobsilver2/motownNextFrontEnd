{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleArtist.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ARTIST_QUERY($id: ID!) {\\n    artist(where: { id: $id }) {\\n      id\\n      name\\n      songs {\\n        id\\n        title\\n      }\\n      albums {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nvar SingleArtistStyles = styled.div.withConfig({\n  displayName: \"SingleArtist__SingleArtistStyles\",\n  componentId: \"sc-1t9u136-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.name{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n});\nvar TitleCard = styled(Card).withConfig({\n  displayName: \"SingleArtist__TitleCard\",\n  componentId: \"sc-1t9u136-1\"\n})([\"text-align:center;\"]);\nvar AlbumsAndSongs = styled.div.withConfig({\n  displayName: \"SingleArtist__AlbumsAndSongs\",\n  componentId: \"sc-1t9u136-2\"\n})([\"display:grid;grid-template-columns:1fr 1fr;\"]);\nvar SINGLE_ARTIST_QUERY = gql(_templateObject());\n\nvar SingleArtist = function SingleArtist(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.artist) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"No artist found for \", id);\n  var _data$artist = data.artist,\n      name = _data$artist.name,\n      songs = _data$artist.songs,\n      albums = _data$artist.albums;\n  return __jsx(React.Fragment, null, __jsx(TitleCard, {\n    title: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })) // <SingleArtistStyles>\n  //   <div className=\"details\">\n  //     <h1 className=\"name\">{name}</h1>\n  //     {songs && (\n  //       <h2>\n  //         Songs {name} have recorded:{\" \"}\n  //         {songs.map(song => (\n  //           <p key={song.id}>\n  //             <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n  //               <a>{song.title}</a>\n  //             </Link>\n  //           </p>\n  //         ))}\n  //       </h2>\n  //     )}\n  //     {albums && (\n  //       <h2>\n  //         Can be heard on the albums:{\" \"}\n  //         {albums.map(album => (\n  //           <p key={album.id}>\n  //             <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n  //               <a>{album.title}</a>\n  //             </Link>\n  //           </p>\n  //         ))}\n  //       </h2>\n  //     )}\n  //   </div>\n  // </SingleArtistStyles>\n  ;\n};\n\nexport default SingleArtist;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleArtist.js"],"names":["React","gql","useQuery","ErrorMessage","styled","Link","Card","SingleArtistStyles","div","props","theme","bs","TitleCard","AlbumsAndSongs","SINGLE_ARTIST_QUERY","SingleArtist","id","variables","loading","error","data","artist","name","songs","albums"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,IAAMC,kBAAkB,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,mMAGR,UAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,KAAN,CAAYC,EAAvB;AAAA,CAHQ,CAAxB;AAiBA,IAAMC,SAAS,GAAGR,MAAM,CAACE,IAAD,CAAT;AAAA;AAAA;AAAA,0BAAf;AAIA,IAAMO,cAAc,GAAGT,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,mDAApB;AAKA,IAAMM,mBAAmB,GAAGb,GAAH,mBAAzB;;AAiBA,IAAMc,YAAY,GAAG,SAAfA,YAAe,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACEd,QAAQ,CAACY,mBAAD,EAAsB;AAC7DG,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADkD,GAAtB,CADV;AAAA,MACvBE,OADuB,aACvBA,OADuB;AAAA,MACdC,KADc,aACdA,KADc;AAAA,MACPC,IADO,aACPA,IADO;;AAI/B,MAAID,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAI,CAACE,IAAI,CAACC,MAAV,EAAkB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAwBL,EAAxB,CAAP;AANa,qBAOCI,IAAI,CAACC,MAPN;AAAA,MAOvBC,IAPuB,gBAOvBA,IAPuB;AAAA,MAOjBC,KAPiB,gBAOjBA,KAPiB;AAAA,MAOVC,MAPU,gBAOVA,MAPU;AAQ/B,SACE,4BACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAEF,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCF;AAkCD,CA1CD;;AA4CA,eAAeP,YAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\n\nconst SingleArtistStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .name {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst TitleCard = styled(Card)`\n  text-align: center;\n`;\n\nconst AlbumsAndSongs = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n      albums {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleArtist = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: { id },\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.artist) return <p>No artist found for {id}</p>;\n  const { name, songs, albums } = data.artist;\n  return (\n    <>\n      <TitleCard title={name} />\n    </>\n    // <SingleArtistStyles>\n    //   <div className=\"details\">\n    //     <h1 className=\"name\">{name}</h1>\n    //     {songs && (\n    //       <h2>\n    //         Songs {name} have recorded:{\" \"}\n    //         {songs.map(song => (\n    //           <p key={song.id}>\n    //             <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n    //               <a>{song.title}</a>\n    //             </Link>\n    //           </p>\n    //         ))}\n    //       </h2>\n    //     )}\n    //     {albums && (\n    //       <h2>\n    //         Can be heard on the albums:{\" \"}\n    //         {albums.map(album => (\n    //           <p key={album.id}>\n    //             <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n    //               <a>{album.title}</a>\n    //             </Link>\n    //           </p>\n    //         ))}\n    //       </h2>\n    //     )}\n    //   </div>\n    // </SingleArtistStyles>\n  );\n};\n\nexport default SingleArtist;\n"]},"metadata":{},"sourceType":"module"}