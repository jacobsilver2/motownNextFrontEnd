{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Songs.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = \", \", $letter: String) {\\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: title_ASC) {\\n      id\\n      title\\n      publisher\\n      publishedDate\\n      composer {\\n        name\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = \", \") {\\n    songs(first: $first, skip: $skip, orderBy: title_ASC ) {\\n      id\\n      title\\n      publisher\\n      publishedDate\\n      composer {\\n        name\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZ } from \"../lib/selectButtons\";\nexport var ALL_SONGS_QUERY = gql(_templateObject(), perPage);\nexport var ALL_SONGS_BEGINNING_WITH_QUERY = gql(_templateObject2(), perPage);\nvar Center = styled.div.withConfig({\n  displayName: \"Songs__Center\",\n  componentId: \"sc-16ll7z0-0\"\n})([\"text-align:center;\"]);\nvar SongsList = styled.div.withConfig({\n  displayName: \"Songs__SongsList\",\n  componentId: \"sc-16ll7z0-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], function (props) {\n  return props.theme.maxWidth;\n});\n\nvar Songs = function Songs(_ref) {\n  var page = _ref.page;\n\n  var _useState = useState(\"\"),\n      letter = _useState[0],\n      setLetter = _useState[1];\n\n  var _useQuery = useQuery(ALL_SONGS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  }),\n      allSongsLoading = _useQuery.loading,\n      allSongsError = _useQuery.error,\n      allSongsData = _useQuery.data;\n\n  var _useQuery2 = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter: letter\n    }\n  }),\n      songsBeginningWithLoading = _useQuery2.loading,\n      songsBeginningWithError = _useQuery2.error,\n      songsBeginningWithData = _useQuery2.data;\n\n  if (allSongsLoading || songsBeginningWithLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Loading...\");\n  if (allSongsError || songsBeginningWithError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Error :(\");\n  var songs = !letter ? allSongsData.songs.map(function (song) {\n    return __jsx(Song, {\n      key: song.id,\n      song: song,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }) : songsBeginningWithData.songs.map(function (song) {\n    return __jsx(Song, {\n      key: song.id,\n      song: song,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n  });\n  var count = letter ? songsBeginningWithData.songs.length : allSongsData.songs.length;\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZ,\n    onChange: function onChange(e) {\n      return setLetter(e.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), __jsx(SongsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, songs), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n\nexport default Songs;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Songs.js"],"names":["React","Component","useState","useQuery","gql","styled","Song","Pagination","perPage","SelectButton","selectButtonsAthruZ","ALL_SONGS_QUERY","ALL_SONGS_BEGINNING_WITH_QUERY","Center","div","SongsList","props","theme","maxWidth","Songs","page","letter","setLetter","variables","skip","first","allSongsLoading","loading","allSongsError","error","allSongsData","data","songsBeginningWithLoading","songsBeginningWithError","songsBeginningWithData","songs","map","song","id","count","length","e","value"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZ } from \"../lib/selectButtons\";\n\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    songs(first: $first, skip: $skip, orderBy: title_ASC ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: title_ASC) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst SongsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Songs = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData,\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage },\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData,\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, letter },\n  });\n  if (allSongsLoading || songsBeginningWithLoading) return <p>Loading...</p>;\n  if (allSongsError || songsBeginningWithError) return <p>Error :(</p>;\n\n  const songs = !letter\n    ? allSongsData.songs.map((song) => <Song key={song.id} song={song} />)\n    : songsBeginningWithData.songs.map((song) => (\n        <Song key={song.id} song={song} />\n      ));\n\n  const count = letter\n    ? songsBeginningWithData.songs.length\n    : allSongsData.songs.length;\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZ}\n        onChange={(e) => setLetter(e.value)}\n      />\n      <Pagination page={page} model=\"songs\" />\n      <SongsList>{songs}</SongsList>\n      <Pagination page={page} model=\"songs\" />\n    </Center>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}