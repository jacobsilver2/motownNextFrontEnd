{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Pagination.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport PaginationStyles from \"./styles/PaginationStyles\";\nimport { perPage } from \"../config\";\nimport { Paginator } from \"primereact/paginator\";\nconst SONGS_PAGINATION_QUERY = gql`\n  query SONGS_PAGINATION_QUERY($letter: String) {\n    songsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst SONGS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query SONGS_PAGINATION_QUERY {\n    songsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY($letter: String) {\n    albumsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY {\n    albumsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY($letter: String) {\n    artistsConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY {\n    artistsConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY($letter: String) {\n    composersConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY {\n    composersConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nconst Pagination = ({\n  page,\n  model,\n  letter\n}) => {\n  let PAGINATION_QUERY;\n\n  switch (model) {\n    case \"songs\":\n      letter === \"#\" ? PAGINATION_QUERY = SONGS_PAGINATION_WITH_NUMBER_QUERY : PAGINATION_QUERY = SONGS_PAGINATION_QUERY;\n      break;\n\n    case \"albums\":\n      letter === \"#\" ? PAGINATION_QUERY = ALBUMS_PAGINATION_WITH_NUMBER_QUERY : PAGINATION_QUERY = ALBUMS_PAGINATION_QUERY;\n      break;\n\n    case \"artists\":\n      PAGINATION_QUERY = ARTISTS_PAGINATION_QUERY;\n      break;\n\n    case \"composers\":\n      PAGINATION_QUERY = COMPOSERS_PAGINATION_QUERY;\n      break;\n\n    default:\n      PAGINATION_QUERY = SONGS_PAGINATION_QUERY;\n  }\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PAGINATION_QUERY, {\n    variables: {\n      letter: letter\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Error!\");\n  let count;\n  if (model === \"songs\") count = data.songsConnection.aggregate.count;\n  if (model === \"artists\") count = data.artistsConnection.aggregate.count;\n  if (model === \"albums\") count = data.albumsConnection.aggregate.count;\n  if (model === \"composers\") count = data.composersConnection.aggregate.count;\n  const pages = Math.ceil(count / perPage) || 1;\n  return __jsx(PaginationStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: model,\n      query: {\n        page: page - 1\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"prev\",\n    \"aria-disabled\": page <= 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Prev\")), __jsx(\"p\", {\n    className: \"pagination-page-number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Page \", page, \" of \", pages), __jsx(\"p\", {\n    className: \"pagination-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, count, \" \", model), __jsx(Link, {\n    href: {\n      pathname: model,\n      query: {\n        page: page + 1\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"next\",\n    \"aria-disabled\": page >= pages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Next\")));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Pagination.js"],"names":["React","gql","Link","useQuery","Router","PaginationStyles","perPage","Paginator","SONGS_PAGINATION_QUERY","SONGS_PAGINATION_WITH_NUMBER_QUERY","ALBUMS_PAGINATION_QUERY","ALBUMS_PAGINATION_WITH_NUMBER_QUERY","ARTISTS_PAGINATION_QUERY","ARTISTS_PAGINATION_WITH_NUMBER_QUERY","COMPOSERS_PAGINATION_QUERY","COMPOSERS_PAGINATION_WITH_NUMBER_QUERY","Pagination","page","model","letter","PAGINATION_QUERY","loading","error","data","variables","count","songsConnection","aggregate","artistsConnection","albumsConnection","composersConnection","pages","Math","ceil","pathname","query"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport PaginationStyles from \"./styles/PaginationStyles\";\nimport { perPage } from \"../config\";\nimport { Paginator } from \"primereact/paginator\";\n\nconst SONGS_PAGINATION_QUERY = gql`\n  query SONGS_PAGINATION_QUERY($letter: String) {\n    songsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst SONGS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query SONGS_PAGINATION_QUERY {\n    songsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY($letter: String) {\n    albumsConnection(where: { title_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ALBUMS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ALBUMS_PAGINATION_QUERY {\n    albumsConnection(\n      where: {\n        OR: [\n          { title_starts_with: \"0\" }\n          { title_starts_with: \"1\" }\n          { title_starts_with: \"2\" }\n          { title_starts_with: \"3\" }\n          { title_starts_with: \"4\" }\n          { title_starts_with: \"5\" }\n          { title_starts_with: \"6\" }\n          { title_starts_with: \"7\" }\n          { title_starts_with: \"8\" }\n          { title_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY($letter: String) {\n    artistsConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst ARTISTS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query ARTISTS_PAGINATION_QUERY {\n    artistsConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY($letter: String) {\n    composersConnection(where: { name_starts_with: $letter }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst COMPOSERS_PAGINATION_WITH_NUMBER_QUERY = gql`\n  query COMPOSERS_PAGINATION_QUERY {\n    composersConnection(\n      where: {\n        OR: [\n          { name_starts_with: \"0\" }\n          { name_starts_with: \"1\" }\n          { name_starts_with: \"2\" }\n          { name_starts_with: \"3\" }\n          { name_starts_with: \"4\" }\n          { name_starts_with: \"5\" }\n          { name_starts_with: \"6\" }\n          { name_starts_with: \"7\" }\n          { name_starts_with: \"8\" }\n          { name_starts_with: \"9\" }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nconst Pagination = ({ page, model, letter }) => {\n  let PAGINATION_QUERY;\n  switch (model) {\n    case \"songs\":\n      letter === \"#\"\n        ? (PAGINATION_QUERY = SONGS_PAGINATION_WITH_NUMBER_QUERY)\n        : (PAGINATION_QUERY = SONGS_PAGINATION_QUERY);\n      break;\n    case \"albums\":\n      letter === \"#\"\n        ? (PAGINATION_QUERY = ALBUMS_PAGINATION_WITH_NUMBER_QUERY)\n        : (PAGINATION_QUERY = ALBUMS_PAGINATION_QUERY);\n      break;\n    case \"artists\":\n      PAGINATION_QUERY = ARTISTS_PAGINATION_QUERY;\n      break;\n    case \"composers\":\n      PAGINATION_QUERY = COMPOSERS_PAGINATION_QUERY;\n      break;\n    default:\n      PAGINATION_QUERY = SONGS_PAGINATION_QUERY;\n  }\n\n  const { loading, error, data } = useQuery(PAGINATION_QUERY, {\n    variables: { letter: letter },\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  let count;\n  if (model === \"songs\") count = data.songsConnection.aggregate.count;\n  if (model === \"artists\") count = data.artistsConnection.aggregate.count;\n  if (model === \"albums\") count = data.albumsConnection.aggregate.count;\n  if (model === \"composers\") count = data.composersConnection.aggregate.count;\n\n  const pages = Math.ceil(count / perPage) || 1;\n  return (\n    <PaginationStyles>\n      <Link href={{ pathname: model, query: { page: page - 1 } }}>\n        <a className=\"prev\" aria-disabled={page <= 1}>\n          Prev\n        </a>\n      </Link>\n      <p className=\"pagination-page-number\">\n        Page {page} of {pages}\n      </p>\n      <p className=\"pagination-count\">\n        {count} {model}\n      </p>\n      <Link href={{ pathname: model, query: { page: page + 1 } }}>\n        <a className=\"next\" aria-disabled={page >= pages}>\n          Next\n        </a>\n      </Link>\n    </PaginationStyles>\n  );\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}