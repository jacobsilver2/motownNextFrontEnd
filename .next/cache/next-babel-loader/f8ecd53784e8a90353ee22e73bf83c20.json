{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport formatDate from \"../lib/formatDate\";\nconst SingleSongStyles = styled.div.withConfig({\n  displayName: \"SingleSong__SingleSongStyles\",\n  componentId: \"sc-1e0bt3h-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst TitleCard = styled(Card).withConfig({\n  displayName: \"SingleSong__TitleCard\",\n  componentId: \"sc-1e0bt3h-1\"\n})([\"text-align:center;\"]);\nconst PerformedByAndRecordingspane = styled.div.withConfig({\n  displayName: \"SingleSong__PerformedByAndRecordingspane\",\n  componentId: \"sc-1e0bt3h-2\"\n})([\"display:grid;grid-template-columns:1fr 1fr;\"]);\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n        song {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id\n    }\n  });\n  const {\n    0: layout,\n    1: setLayout\n  } = useState(\"list\");\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"No song found for \", id); // console.log(data.song);\n\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings\n  } = data.song;\n  const composerNames = composer.map((comp, index) => {\n    let trailingChar = \", \";\n\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: comp.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/composer\",\n        query: {\n          id: comp.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, comp.name, \" \")), trailingChar);\n  });\n  const albumsCards = albums.map(album => {\n    return __jsx(Card, {\n      key: album.id,\n      title: __jsx(Link, {\n        href: {\n          pathname: \"album\",\n          query: {\n            id: album.id\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, album.title),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(TitleCard, {\n    title: title,\n    subTitle: composerNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, altTitle && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Alt Title: \", altTitle), publisher && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Publisher: \", publisher), publishedDate && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Published Date: \", formatDate(publishedDate)), instrumental && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Instrumental\"), fromFilm && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"From Film: \", fromFilm)), __jsx(PerformedByAndRecordingspane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, artists && __jsx(Card, {\n    title: \"Performed by: \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, artists.map(artist => __jsx(\"li\", {\n    key: artist.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"artist\",\n      query: {\n        id: artist.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, artist.name)))))), albums && __jsx(Card, {\n    title: `Can be heard on the album${albums.length > 1 ? \"s\" : \"\"}:`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, albumsCards))) //   <SingleSongStyles>\n  //     <div className=\"details\">\n  //       <h1 className=\"title\">{title}</h1>\n  //       {composer &&\n  //         composer.map((comp) => (\n  //           <h2 key={comp.id}>\n  //             <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n  //               <a>Composer: {comp.name}</a>\n  //             </Link>\n  //           </h2>\n  //         ))}\n  //       {publisher && <h2>Publisher: {publisher}</h2>}\n  //       {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n  //       {altTitle && <h2>Alt Title: {altTitle}</h2>}\n  //       {instrumental && <h2>Instrumental</h2>}\n  //       {fromFilm && <h2>From Film: {fromFilm}</h2>}\n  //       {tribute && <h2>{tribute}</h2>}\n  //       {artists && (\n  //         <h2>\n  //           Performed by:{\" \"}\n  //           {artists.map((artist) => (\n  //             <p key={artist.id}>\n  //               <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n  //                 <a>{artist.name}</a>\n  //               </Link>\n  //             </p>\n  //           ))}\n  //         </h2>\n  //       )}\n  //       {albums && (\n  //         <h2>\n  //           Can be heard on the albums:{\" \"}\n  //           {albums.map((album) => (\n  //             <p key={album.id}>\n  //               <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n  //                 <a>{album.title}</a>\n  //               </Link>\n  //             </p>\n  //           ))}\n  //         </h2>\n  //       )}\n  //     </div>\n  //   </SingleSongStyles>\n  // );\n  ;\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","useState","gql","useQuery","ErrorMessage","styled","Link","Card","formatDate","SingleSongStyles","div","props","theme","bs","TitleCard","PerformedByAndRecordingspane","SINGLE_SONG_QUERY","SingleSong","id","loading","error","data","variables","layout","setLayout","song","title","composer","publisher","publishedDate","altTitle","instrumental","fromFilm","tribute","artists","albums","recordings","composerNames","map","comp","index","trailingChar","length","pathname","query","name","albumsCards","album","listStyleType","margin","padding","artist"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport formatDate from \"../lib/formatDate\";\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst TitleCard = styled(Card)`\n  text-align: center;\n`;\n\nconst PerformedByAndRecordingspane = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n        song {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id },\n  });\n  const [layout, setLayout] = useState(\"list\");\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  // console.log(data.song);\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings,\n  } = data.song;\n\n  const composerNames = composer.map((comp, index) => {\n    let trailingChar = \", \";\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={comp.id}>\n        <Link href={{ pathname: \"/composer\", query: { id: comp.id } }}>\n          <a>{comp.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n\n  const albumsCards = albums.map((album) => {\n    return (\n      <Card\n        key={album.id}\n        title={\n          <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n            {album.title}\n          </Link>\n        }\n      ></Card>\n    );\n  });\n\n  return (\n    <>\n      <TitleCard title={title} subTitle={composerNames}>\n        {altTitle && <h3>Alt Title: {altTitle}</h3>}\n        {publisher && <h3>Publisher: {publisher}</h3>}\n        {publishedDate && <h3>Published Date: {formatDate(publishedDate)}</h3>}\n        {instrumental && <h3>Instrumental</h3>}\n        {fromFilm && <h3>From Film: {fromFilm}</h3>}\n      </TitleCard>\n      <PerformedByAndRecordingspane>\n        {artists && (\n          <Card title=\"Performed by: \">\n            <ul style={{ listStyleType: \"none\", margin: 0, padding: 0 }}>\n              {artists.map((artist) => (\n                <li key={artist.id}>\n                  <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n                    <a>{artist.name}</a>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </Card>\n        )}\n        {albums && (\n          <Card\n            title={`Can be heard on the album${albums.length > 1 ? \"s\" : \"\"}:`}\n          >\n            {albumsCards}\n          </Card>\n        )}\n      </PerformedByAndRecordingspane>\n    </>\n    //   <SingleSongStyles>\n    //     <div className=\"details\">\n    //       <h1 className=\"title\">{title}</h1>\n    //       {composer &&\n    //         composer.map((comp) => (\n    //           <h2 key={comp.id}>\n    //             <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n    //               <a>Composer: {comp.name}</a>\n    //             </Link>\n    //           </h2>\n    //         ))}\n    //       {publisher && <h2>Publisher: {publisher}</h2>}\n    //       {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n    //       {altTitle && <h2>Alt Title: {altTitle}</h2>}\n    //       {instrumental && <h2>Instrumental</h2>}\n    //       {fromFilm && <h2>From Film: {fromFilm}</h2>}\n    //       {tribute && <h2>{tribute}</h2>}\n    //       {artists && (\n    //         <h2>\n    //           Performed by:{\" \"}\n    //           {artists.map((artist) => (\n    //             <p key={artist.id}>\n    //               <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n    //                 <a>{artist.name}</a>\n    //               </Link>\n    //             </p>\n    //           ))}\n    //         </h2>\n    //       )}\n    //       {albums && (\n    //         <h2>\n    //           Can be heard on the albums:{\" \"}\n    //           {albums.map((album) => (\n    //             <p key={album.id}>\n    //               <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n    //                 <a>{album.title}</a>\n    //               </Link>\n    //             </p>\n    //           ))}\n    //         </h2>\n    //       )}\n    //     </div>\n    //   </SingleSongStyles>\n    // );\n  );\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}