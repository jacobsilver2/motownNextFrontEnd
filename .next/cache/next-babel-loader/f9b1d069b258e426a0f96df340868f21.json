{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateComposer.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_COMPOSER_MUTATION($id: ID!, $name: String!) {\\n    updateComposer(id: $id, name: $name) {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_COMPOSER_QUERY($id: ID!) {\\n    composer(where: { id: $id }) {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nvar SINGLE_COMPOSER_QUERY = gql(_templateObject());\nvar UPDATE_COMPOSER_MUTATION = gql(_templateObject2());\n\nvar UpdateComposer = function UpdateComposer(_ref) {\n  var id = _ref.id;\n\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  var _useQuery = useQuery(SINGLE_COMPOSER_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {\n    composer: {}\n  } : _useQuery$data;\n\n  var _useMutation = useMutation(UPDATE_COMPOSER_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateComposerMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      mutationLoading = _useMutation2$.loading,\n      mutationError = _useMutation2$.error;\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  function handleChange(e) {\n    e.preventDefault();\n    var _e$target = e.target,\n        name = _e$target.name,\n        type = _e$target.type,\n        value = _e$target.value;\n    var val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, val)));\n  }\n\n  function updateComposer(e) {\n    return _regeneratorRuntime.async(function updateComposer$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            updateComposerMutation({\n              variables: _objectSpread({\n                id: id\n              }, state)\n            });\n            mutationError && console.log(mutationError);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: updateComposer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Name\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    placeholder: \"Name\",\n    required: true,\n    defaultValue: data.composer.name,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Sav\", mutationLoading ? \"ing\" : \"e\", \" Changes\")));\n};\n\nexport default UpdateComposer;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateComposer.js"],"names":["React","useState","useQuery","useMutation","gql","Router","Form","Error","SINGLE_COMPOSER_QUERY","UPDATE_COMPOSER_MUTATION","UpdateComposer","id","variables","loading","error","data","composer","updateComposerMutation","mutationLoading","mutationError","state","setState","handleChange","e","preventDefault","target","name","type","value","val","parseFloat","updateComposer","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_COMPOSER_QUERY = gql`\n  query SINGLE_COMPOSER_QUERY($id: ID!) {\n    composer(where: { id: $id }) {\n      id\n      name\n    }\n  }\n`;\n\nconst UPDATE_COMPOSER_MUTATION = gql`\n  mutation UPDATE_COMPOSER_MUTATION($id: ID!, $name: String!) {\n    updateComposer(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nconst UpdateComposer = ({ id }) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const { loading, error, data = { composer: {} } } = useQuery(\n    SINGLE_COMPOSER_QUERY,\n    {\n      variables: { id: id },\n    }\n  );\n  const [\n    updateComposerMutation,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(UPDATE_COMPOSER_MUTATION);\n\n  const [state, setState] = useState({});\n  function handleChange(e) {\n    e.preventDefault();\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState({ ...state, [name]: val });\n  }\n\n  async function updateComposer(e) {\n    e.preventDefault();\n    updateComposerMutation({ variables: { id, ...state } });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return <p>Loading</p>;\n  return (\n    <Form onSubmit={updateComposer}>\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            required\n            defaultValue={data.composer.name}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\">\n          Sav{mutationLoading ? \"ing\" : \"e\"} Changes\n        </button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default UpdateComposer;\n"]},"metadata":{},"sourceType":"module"}