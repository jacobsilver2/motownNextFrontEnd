{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleAlbum.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ALBUM_QUERY($id: ID!) {\\n    album(where: { id: $id }) {\\n      id\\n      title\\n      catalogNumber\\n      format\\n      info\\n      releaseDate\\n      recordLabel\\n      songs {\\n        id\\n        title\\n        composer {\\n          id\\n          name\\n        }\\n      }\\n      artists {\\n        id\\n        name\\n      }\\n      recordings {\\n        producer\\n        location\\n        completed\\n        albums {\\n          id\\n          title\\n        }\\n        song {\\n          id\\n          title\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport ComponentCard from \"./Card\";\nimport formatDate from \"../lib/formatDate\";\nvar SingleAlbumStyles = styled.div.withConfig({\n  displayName: \"SingleAlbum__SingleAlbumStyles\",\n  componentId: \"gstqrx-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n});\nvar TitleCard = styled(Card).withConfig({\n  displayName: \"SingleAlbum__TitleCard\",\n  componentId: \"gstqrx-1\"\n})([\"text-align:center;\"]);\nvar SongsCard = styled(Card).withConfig({\n  displayName: \"SingleAlbum__SongsCard\",\n  componentId: \"gstqrx-2\"\n})([\"display:grid;grid-template-columns:1fr;.p-card-title{text-align:center;}\"]);\nvar SongsCardComponent = styled(ComponentCard).withConfig({\n  displayName: \"SingleAlbum__SongsCardComponent\",\n  componentId: \"gstqrx-3\"\n})([\"display:grid;grid-template-columns:1fr;.p-card-title{text-align:center;}\"]);\nvar SongsList = styled.div.withConfig({\n  displayName: \"SingleAlbum__SongsList\",\n  componentId: \"gstqrx-4\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;.p-card-title{text-align:left;}\"], function (props) {\n  return props.theme.maxWidth;\n});\nvar SINGLE_ALBUM_QUERY = gql(_templateObject());\n\nvar SingleAlbum = function SingleAlbum(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.album) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"No album found for \", id);\n  var _data$album = data.album,\n      title = _data$album.title,\n      catalogNumber = _data$album.catalogNumber,\n      format = _data$album.format,\n      info = _data$album.info,\n      releaseDate = _data$album.releaseDate,\n      recordLabel = _data$album.recordLabel,\n      songs = _data$album.songs,\n      artists = _data$album.artists,\n      recordings = _data$album.recordings;\n  var artistNames = artists.map(function (artist, index) {\n    var trailingChar = \", \";\n\n    if (artists && index === artists.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (artists && !artists[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: artist.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/artist\",\n        query: {\n          id: artist.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, artist.name, \" \")), trailingChar);\n  });\n  return __jsx(React.Fragment, null, __jsx(ComponentCard, {\n    isTitle: true,\n    title: title,\n    subTitle: artistNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, catalogNumber && __jsx(\"h3\", {\n    className: \"recordlabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Catalog Number: \", catalogNumber), format && __jsx(\"h3\", {\n    className: \"format\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Format: \", format), releaseDate && __jsx(\"h3\", {\n    className: \"releasedate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Release Date: \", formatDate(releaseDate)), recordLabel && __jsx(\"h3\", {\n    className: \"recordlabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Record Label: \", recordLabel), info && __jsx(\"h3\", {\n    className: \"additionalinfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Additional Info: \", info)), __jsx(SongsCardComponent, {\n    title: \"Songs on \".concat(title, \" (in alphabetical order):\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, __jsx(SongsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, songs.map(function (song) {\n    var composerNames = song.composer.map(function (comp, index) {\n      var trailingChar = \", \";\n\n      if (song.composer && index === song.composer.length - 2) {\n        trailingChar = \"& \";\n      }\n\n      if (song.composer && !song.composer[index + 1]) {\n        trailingChar = \"\";\n      }\n\n      return __jsx(\"span\", {\n        key: comp.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, __jsx(Link, {\n        href: {\n          pathname: \"/composer\",\n          query: {\n            id: comp.id\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, comp.name, \" \")), trailingChar);\n    });\n\n    var songLink = __jsx(Link, {\n      href: {\n        pathname: \"/song\",\n        query: {\n          id: song.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, song.title));\n\n    var songInfo = recordings.map(function (recording) {\n      if (recording.song.title === song.title) {\n        return __jsx(React.Fragment, null, recording.producer && __jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, \"Produced By: \", recording.producer), recording.location && __jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, \"Recording Location: \", recording.location), recording.completed && __jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, \"Completed: \", formatDate(recording.completed)));\n      }\n    });\n    return __jsx(ComponentCard, {\n      title: songLink,\n      subTitle: composerNames,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      style: {\n        listStyleType: \"none\",\n        margin: 0,\n        padding: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, songInfo));\n  }))));\n};\n\nexport default SingleAlbum;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleAlbum.js"],"names":["React","gql","useQuery","ErrorMessage","styled","Link","Card","ComponentCard","formatDate","SingleAlbumStyles","div","props","theme","bs","TitleCard","SongsCard","SongsCardComponent","SongsList","maxWidth","SINGLE_ALBUM_QUERY","SingleAlbum","id","variables","loading","error","data","album","title","catalogNumber","format","info","releaseDate","recordLabel","songs","artists","recordings","artistNames","map","artist","index","trailingChar","length","pathname","query","name","song","composerNames","composer","comp","songLink","songInfo","recording","producer","location","completed","listStyleType","margin","padding"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport ComponentCard from \"./Card\";\nimport formatDate from \"../lib/formatDate\";\n\nconst SingleAlbumStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst TitleCard = styled(Card)`\n  text-align: center;\n`;\n\nconst SongsCard = styled(Card)`\n  display: grid;\n  grid-template-columns: 1fr;\n  .p-card-title {\n    text-align: center;\n  }\n`;\nconst SongsCardComponent = styled(ComponentCard)`\n  display: grid;\n  grid-template-columns: 1fr;\n  .p-card-title {\n    text-align: center;\n  }\n`;\n\nconst SongsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n  .p-card-title {\n    text-align: left;\n  }\n`;\n\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      releaseDate\n      recordLabel\n      songs {\n        id\n        title\n        composer {\n          id\n          name\n        }\n      }\n      artists {\n        id\n        name\n      }\n      recordings {\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n        song {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleAlbum = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: { id },\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.album) return <p>No album found for {id}</p>;\n  const {\n    title,\n    catalogNumber,\n    format,\n    info,\n    releaseDate,\n    recordLabel,\n    songs,\n    artists,\n    recordings,\n  } = data.album;\n  const artistNames = artists.map((artist, index) => {\n    let trailingChar = \", \";\n    if (artists && index === artists.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (artists && !artists[index + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={artist.id}>\n        <Link href={{ pathname: \"/artist\", query: { id: artist.id } }}>\n          <a>{artist.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n  return (\n    <>\n      <ComponentCard isTitle title={title} subTitle={artistNames}>\n        {catalogNumber && (\n          <h3 className=\"recordlabel\">Catalog Number: {catalogNumber}</h3>\n        )}\n        {format && <h3 className=\"format\">Format: {format}</h3>}\n        {releaseDate && (\n          <h3 className=\"releasedate\">\n            Release Date: {formatDate(releaseDate)}\n          </h3>\n        )}\n        {recordLabel && (\n          <h3 className=\"recordlabel\">Record Label: {recordLabel}</h3>\n        )}\n        {info && <h3 className=\"additionalinfo\">Additional Info: {info}</h3>}\n      </ComponentCard>\n      <SongsCardComponent title={`Songs on ${title} (in alphabetical order):`}>\n        <SongsList>\n          {songs.map((song) => {\n            const composerNames = song.composer.map((comp, index) => {\n              let trailingChar = \", \";\n              if (song.composer && index === song.composer.length - 2) {\n                trailingChar = \"& \";\n              }\n              if (song.composer && !song.composer[index + 1]) {\n                trailingChar = \"\";\n              }\n              return (\n                <span key={comp.id}>\n                  <Link\n                    href={{ pathname: \"/composer\", query: { id: comp.id } }}\n                  >\n                    <a>{comp.name} </a>\n                  </Link>\n                  {trailingChar}\n                </span>\n              );\n            });\n            const songLink = (\n              <Link href={{ pathname: \"/song\", query: { id: song.id } }}>\n                <a>{song.title}</a>\n              </Link>\n            );\n\n            const songInfo = recordings.map((recording) => {\n              if (recording.song.title === song.title) {\n                return (\n                  <>\n                    {recording.producer && (\n                      <li>Produced By: {recording.producer}</li>\n                    )}\n                    {recording.location && (\n                      <li>Recording Location: {recording.location}</li>\n                    )}\n                    {recording.completed && (\n                      <li>Completed: {formatDate(recording.completed)}</li>\n                    )}\n                  </>\n                );\n              }\n            });\n            return (\n              <ComponentCard title={songLink} subTitle={composerNames}>\n                <ul style={{ listStyleType: \"none\", margin: 0, padding: 0 }}>\n                  {songInfo}\n                </ul>\n              </ComponentCard>\n            );\n          })}\n        </SongsList>\n      </SongsCardComponent>\n    </>\n  );\n};\n\nexport default SingleAlbum;\n"]},"metadata":{},"sourceType":"module"}