{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_SONG_MUTATION(\\n    $id: ID!\\n    $title: String!\\n    $publisher: String\\n    $altTitle: String\\n    $fromFilm: String\\n    $tribute: String\\n  ) {\\n    updateSong(\\n      id: $id\\n      title: $title\\n      publisher: $publisher\\n      altTitle: $altTitle\\n      fromFilm: $fromFilm\\n      tribute: $tribute\\n    ) {\\n      id\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      publisher\\n      altTitle\\n      fromFilm\\n      tribute\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport { RadioButton } from \"primereact/radiobutton\";\nvar SINGLE_SONG_QUERY = gql(_templateObject());\nvar UPDATE_SONG_MUTATION = gql(_templateObject2());\n\nvar UpdateSong = function UpdateSong(_ref) {\n  var id = _ref.id;\n\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {\n    song: {}\n  } : _useQuery$data;\n\n  var _useMutation = useMutation(UPDATE_SONG_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateSongMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      mutationLoading = _useMutation2$.loading,\n      mutationError = _useMutation2$.error;\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  function handleChange(e) {\n    e.preventDefault();\n    var _e$target = e.target,\n        name = _e$target.name,\n        type = _e$target.type,\n        value = _e$target.value;\n    var val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, val)));\n  }\n\n  function updateSong(e) {\n    return _regeneratorRuntime.async(function updateSong$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            updateSongMutation({\n              variables: _objectSpread({\n                id: id\n              }, state)\n            });\n            mutationError && console.log(mutationError);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: updateSong,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"content-section implementation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: \"first\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Title\"), __jsx(\"div\", {\n    className: \"p-grid p-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"p-col-12 p-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"p-inputgroup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"p-inputgroup-addon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(\"i\", {\n    className: \"pi pi-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })))))), __jsx(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.song.title,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"publisher\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Publisher\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"publisher\",\n    name: \"publisher\",\n    placeholder: \"Title\",\n    defaultValue: data.song.publisher,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"altTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Alt Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"altTitle\",\n    name: \"altTitle\",\n    placeholder: \"Alt Title\",\n    defaultValue: data.song.altTitle,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"fromFilm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"From Film:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"fromFilm\",\n    name: \"fromFilm\",\n    placeholder: \"From Film\",\n    defaultValue: data.song.fromFilm,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"tribute\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Tribute To:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"tribute\",\n    name: \"tribute\",\n    placeholder: \"Tribute\",\n    defaultValue: data.song.tribute,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Sav\", mutationLoading ? \"ing\" : \"e\", \" Changes\")));\n};\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js"],"names":["React","useState","useQuery","useMutation","gql","Router","Form","Error","InputText","Button","Checkbox","RadioButton","SINGLE_SONG_QUERY","UPDATE_SONG_MUTATION","UpdateSong","id","variables","loading","error","data","song","updateSongMutation","mutationLoading","mutationError","state","setState","handleChange","e","preventDefault","target","name","type","value","val","parseFloat","updateSong","console","log","title","publisher","altTitle","fromFilm","tribute"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport { RadioButton } from \"primereact/radiobutton\";\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\n\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $altTitle: String\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      altTitle: $altTitle\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst UpdateSong = ({ id }) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const { loading, error, data = { song: {} } } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id: id },\n  });\n  const [\n    updateSongMutation,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(UPDATE_SONG_MUTATION);\n\n  const [state, setState] = useState({});\n\n  function handleChange(e) {\n    e.preventDefault();\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState({ ...state, [name]: val });\n  }\n\n  async function updateSong(e) {\n    e.preventDefault();\n    updateSongMutation({ variables: { id, ...state } });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return <p>Loading</p>;\n  return (\n    <Form onSubmit={updateSong}>\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <div className=\"content-section implementation\">\n          <h3 className=\"first\">Title</h3>\n          <div className=\"p-grid p-fluid\">\n            <div className=\"p-col-12 p-md-4\">\n              <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\">\n                  <i className=\"pi pi-user\"></i>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <label htmlFor=\"title\">\n          Title\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n            defaultValue={data.song.title}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"publisher\">\n          Publisher\n          <input\n            type=\"text\"\n            id=\"publisher\"\n            name=\"publisher\"\n            placeholder=\"Title\"\n            defaultValue={data.song.publisher}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"altTitle\">\n          Alt Title\n          <input\n            type=\"text\"\n            id=\"altTitle\"\n            name=\"altTitle\"\n            placeholder=\"Alt Title\"\n            defaultValue={data.song.altTitle}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"fromFilm\">\n          From Film:\n          <input\n            type=\"text\"\n            id=\"fromFilm\"\n            name=\"fromFilm\"\n            placeholder=\"From Film\"\n            defaultValue={data.song.fromFilm}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"tribute\">\n          Tribute To:\n          <input\n            type=\"text\"\n            id=\"tribute\"\n            name=\"tribute\"\n            placeholder=\"Tribute\"\n            defaultValue={data.song.tribute}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">\n          Sav{mutationLoading ? \"ing\" : \"e\"} Changes\n        </button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };\n"]},"metadata":{},"sourceType":"module"}