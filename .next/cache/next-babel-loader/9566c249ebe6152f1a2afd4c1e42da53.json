{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Songs.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from \"react\";\nimport Router from \"next/router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\"; // import { StyledDropdown } from \"./Albums\";\n\nimport Center from \"./styles/Center\";\nimport MultiList from \"./styles/Multilist\";\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: SongOrderByInput!) {\n    songs(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: SongOrderByInput!) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nexport const ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: SongOrderByInput!) {\n    songs(where: {OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nconst sortBySelectItems = [{\n  label: \"Title, ascending\",\n  value: \"title_ASC\"\n}, {\n  label: \"Title, descending\",\n  value: \"title_DESC\"\n}, {\n  label: \"Publisher, ascending\",\n  value: \"publisher_ASC\"\n}, {\n  label: \"Publisher, descending\",\n  value: \"publisher_DESC\"\n}, {\n  label: \"Published Date, ascending\",\n  value: \"publishedDate_ASC\"\n}, {\n  label: \"Published Date, descending\",\n  value: \"publishedDate_DESC\"\n}];\n\nconst Songs = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"title_ASC\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  const {\n    loading: songsBeginningWithNumberLoading,\n    error: songsBeginningWithNumberError,\n    data: songsBeginningWithNumberData\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  if (allSongsLoading || songsBeginningWithLoading || songsBeginningWithNumberLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Loading...\");\n  if (allSongsError || songsBeginningWithError || songsBeginningWithNumberError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Error :(\");\n  let songs = \"\";\n\n  if (!letter) {\n    songs = allSongsData.songs.map(song => __jsx(Song, {\n      key: song.id,\n      song: song,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  } else if (letter === \"#\") {\n    songs = songsBeginningWithNumberData.songs.map(song => __jsx(Song, {\n      key: song.id,\n      song: song,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  } else {\n    songs = songsBeginningWithData.songs.map(song => __jsx(Song, {\n      key: song.id,\n      song: song,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  } // const songs = !letter\n  //   ? allSongsData.songs.map((song) => <Song key={song.id} song={song} />)\n  //   : songsBeginningWithData.songs.map((song) => (\n  //       <Song key={song.id} song={song} />\n  //     ));\n\n\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZWithNumber,\n    onChange: e => {\n      setLetter(e.value);\n      Router.push({\n        pathname: \"/songs\",\n        query: {\n          page: 1\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(MultiList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, songs), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }));\n};\n\nexport default Songs;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Songs.js"],"names":["React","Component","useState","Router","useQuery","gql","styled","Song","Pagination","perPage","SelectButton","Dropdown","selectButtonsAthruZWithNumber","Center","MultiList","ALL_SONGS_QUERY","ALL_SONGS_BEGINNING_WITH_QUERY","ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY","sortBySelectItems","label","value","Songs","page","letter","setLetter","sortBy","setSortBy","loading","allSongsLoading","error","allSongsError","data","allSongsData","variables","skip","first","songsBeginningWithLoading","songsBeginningWithError","songsBeginningWithData","songsBeginningWithNumberLoading","songsBeginningWithNumberError","songsBeginningWithNumberData","songs","map","song","id","e","push","pathname","query"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport Router from \"next/router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\n// import { StyledDropdown } from \"./Albums\";\nimport Center from \"./styles/Center\";\nimport MultiList from \"./styles/Multilist\";\n\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: SongOrderByInput!) {\n    songs(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: SongOrderByInput!) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nexport const ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: SongOrderByInput!) {\n    songs(where: {OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nconst sortBySelectItems = [\n  { label: \"Title, ascending\", value: \"title_ASC\" },\n  { label: \"Title, descending\", value: \"title_DESC\" },\n  { label: \"Publisher, ascending\", value: \"publisher_ASC\" },\n  { label: \"Publisher, descending\", value: \"publisher_DESC\" },\n  { label: \"Published Date, ascending\", value: \"publishedDate_ASC\" },\n  { label: \"Published Date, descending\", value: \"publishedDate_DESC\" },\n];\n\nconst Songs = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"title_ASC\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData,\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, sortBy },\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData,\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy,\n    },\n  });\n  const {\n    loading: songsBeginningWithNumberLoading,\n    error: songsBeginningWithNumberError,\n    data: songsBeginningWithNumberData,\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy,\n    },\n  });\n\n  if (\n    allSongsLoading ||\n    songsBeginningWithLoading ||\n    songsBeginningWithNumberLoading\n  )\n    return <p>Loading...</p>;\n  if (allSongsError || songsBeginningWithError || songsBeginningWithNumberError)\n    return <p>Error :(</p>;\n\n  let songs = \"\";\n  if (!letter) {\n    songs = allSongsData.songs.map((song) => (\n      <Song key={song.id} song={song} />\n    ));\n  } else if (letter === \"#\") {\n    songs = songsBeginningWithNumberData.songs.map((song) => (\n      <Song key={song.id} song={song} />\n    ));\n  } else {\n    songs = songsBeginningWithData.songs.map((song) => (\n      <Song key={song.id} song={song} />\n    ));\n  }\n\n  // const songs = !letter\n  //   ? allSongsData.songs.map((song) => <Song key={song.id} song={song} />)\n  //   : songsBeginningWithData.songs.map((song) => (\n  //       <Song key={song.id} song={song} />\n  //     ));\n\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZWithNumber}\n        onChange={(e) => {\n          setLetter(e.value);\n          Router.push({ pathname: \"/songs\", query: { page: 1 } });\n        }}\n      />\n      <br />\n      {/* <StyledDropdown\n        value={sortBy}\n        options={sortBySelectItems}\n        onChange={(e) => setSortBy(e.value)}\n        placeholder=\"Sort By…\"\n      /> */}\n      <br />\n      <Pagination page={page} model=\"songs\" letter={letter} />\n      <MultiList>{songs}</MultiList>\n      <Pagination page={page} model=\"songs\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}