{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateAlbum.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_ALBUM_MUTATION(\\n    $id: ID!\\n    $title: String!\\n    $catalogNumber: String\\n    $format: String\\n    $info: String\\n    $recordLabel: String\\n  ) {\\n    updateSong(\\n      id: $id\\n      title: $title\\n      catalogNumber: $catalogNumber\\n      format: $format\\n      info: $info\\n      recordLabel: $recordLabel\\n    ) {\\n      id\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ALBUM_QUERY($id: ID!) {\\n    album(where: { id: $id }) {\\n      id\\n      title\\n      catalogNumber\\n      format\\n      info\\n      recordLabel\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nvar SINGLE_ALBUM_QUERY = gql(_templateObject());\nvar UPDATE_ALBUM_MUTATION = gql(_templateObject2());\n\nvar UpdateAlbum = function UpdateAlbum(_ref) {\n  var id = _ref.id;\n\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  var _useQuery = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {\n    album: {}\n  } : _useQuery$data;\n\n  var _useMutation = useMutation(UPDATE_ALBUM_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateAlbumMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      mutationLoading = _useMutation2$.loading,\n      mutationError = _useMutation2$.error;\n\n  var _useState = useState({\n    id: id,\n    title: data.album.title,\n    catalogNumber: data.album.catalogNumber,\n    format: data.album.format,\n    info: data.album.info,\n    recordLabel: data.album.recordLabel\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  function handleChange(e) {\n    e.preventDefault();\n    var _e$target = e.target,\n        name = _e$target.name,\n        type = _e$target.type,\n        value = _e$target.value;\n    console.log(name);\n    console.log(type);\n    console.log(value);\n    var val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, val)));\n  }\n\n  function updateAlbum(e) {\n    return _regeneratorRuntime.async(function updateAlbum$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            updateAlbumMutation({\n              variables: _objectSpread({\n                id: id\n              }, state)\n            });\n            mutationError && console.log(mutationError);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: function onSubmit(e) {\n      return updateAlbum(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.album.title,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"catalogNumber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Catalog Number\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"catalogNumber\",\n    name: \"catalogNumber\",\n    placeholder: \"Catalog Number\",\n    required: true,\n    defaultValue: data.album.catalogNumber,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"format\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Format\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"format\",\n    name: \"format\",\n    placeholder: \"Format\",\n    required: true,\n    defaultValue: data.album.format,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Info\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"info\",\n    name: \"info\",\n    placeholder: \"Info\",\n    required: true,\n    defaultValue: data.album.info,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"recordLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Record Label\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"recordLabel\",\n    name: \"recordLabel\",\n    placeholder: \"Record Label\",\n    defaultValue: data.album.recordLabel,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Sav\", mutationLoading ? \"ing\" : \"e\", \" Changes\")));\n};\n\nexport default UpdateAlbum;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateAlbum.js"],"names":["React","useState","useQuery","useMutation","gql","Router","Form","Error","SINGLE_ALBUM_QUERY","UPDATE_ALBUM_MUTATION","UpdateAlbum","id","variables","loading","error","data","album","updateAlbumMutation","mutationLoading","mutationError","title","catalogNumber","format","info","recordLabel","state","setState","handleChange","e","preventDefault","target","name","type","value","console","log","val","parseFloat","updateAlbum"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,IAAMC,kBAAkB,GAAGJ,GAAH,mBAAxB;AAaA,IAAMK,qBAAqB,GAAGL,GAAH,oBAA3B;;AAuBA,IAAMM,WAAW,GAAG,SAAdA,WAAc,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAC9B;AACA;AAF8B,kBAGmBT,QAAQ,CACvDM,kBADuD,EAEvD;AACEI,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEA;AAAN;AADb,GAFuD,CAH3B;AAAA,MAGtBE,OAHsB,aAGtBA,OAHsB;AAAA,MAGbC,KAHa,aAGbA,KAHa;AAAA,iCAGNC,IAHM;AAAA,MAGNA,IAHM,+BAGC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHD;;AAAA,qBAY1Bb,WAAW,CAACM,qBAAD,CAZe;AAAA;AAAA,MAU5BQ,mBAV4B;AAAA;AAAA,MAWjBC,eAXiB,kBAW1BL,OAX0B;AAAA,MAWOM,aAXP,kBAWAL,KAXA;;AAAA,kBAcJb,QAAQ,CAAC;AACjCU,IAAAA,EAAE,EAAFA,EADiC;AAEjCS,IAAAA,KAAK,EAAEL,IAAI,CAACC,KAAL,CAAWI,KAFe;AAGjCC,IAAAA,aAAa,EAAEN,IAAI,CAACC,KAAL,CAAWK,aAHO;AAIjCC,IAAAA,MAAM,EAAEP,IAAI,CAACC,KAAL,CAAWM,MAJc;AAKjCC,IAAAA,IAAI,EAAER,IAAI,CAACC,KAAL,CAAWO,IALgB;AAMjCC,IAAAA,WAAW,EAAET,IAAI,CAACC,KAAL,CAAWQ;AANS,GAAD,CAdJ;AAAA,MAcvBC,KAduB;AAAA,MAchBC,QAdgB;;AAsB9B,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AADuB,oBAEOD,CAAC,CAACE,MAFT;AAAA,QAEfC,IAFe,aAEfA,IAFe;AAAA,QAETC,IAFS,aAETA,IAFS;AAAA,QAEHC,KAFG,aAEHA,KAFG;AAGvBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAMG,GAAG,GAAGJ,IAAI,KAAK,QAAT,GAAoBK,UAAU,CAACJ,KAAD,CAA9B,GAAwCA,KAApD;AACAP,IAAAA,QAAQ,mBAAMD,KAAN,sBAAcM,IAAd,EAAqBK,GAArB,GAAR;AACD;;AAED,WAAeE,WAAf,CAA2BV,CAA3B;AAAA;AAAA;AAAA;AAAA;AACEA,YAAAA,CAAC,CAACC,cAAF;AACAZ,YAAAA,mBAAmB,CAAC;AAAEL,cAAAA,SAAS;AAAID,gBAAAA,EAAE,EAAFA;AAAJ,iBAAWc,KAAX;AAAX,aAAD,CAAnB;AACAN,YAAAA,aAAa,IAAIe,OAAO,CAACC,GAAR,CAAYhB,aAAZ,CAAjB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,MAAIN,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAE,kBAACe,CAAD;AAAA,aAAOU,WAAW,CAACV,CAAD,CAAlB;AAAA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEd,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAU,IAAA,QAAQ,EAAED,OAApB;AAA6B,iBAAWA,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,OAJd;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,YAAY,EAAEE,IAAI,CAACC,KAAL,CAAWI,KAN3B;AAOE,IAAA,QAAQ,EAAEO,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAaE;AAAO,IAAA,OAAO,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,eAFL;AAGE,IAAA,IAAI,EAAC,eAHP;AAIE,IAAA,WAAW,EAAC,gBAJd;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,YAAY,EAAEZ,IAAI,CAACC,KAAL,CAAWK,aAN3B;AAOE,IAAA,QAAQ,EAAEM,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAbF,EAyBE;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,QAFL;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,WAAW,EAAC,QAJd;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,YAAY,EAAEZ,IAAI,CAACC,KAAL,CAAWM,MAN3B;AAOE,IAAA,QAAQ,EAAEK,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAzBF,EAqCE;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,MAJd;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,YAAY,EAAEZ,IAAI,CAACC,KAAL,CAAWO,IAN3B;AAOE,IAAA,QAAQ,EAAEI,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CArCF,EAiDE;AAAO,IAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,aAFL;AAGE,IAAA,IAAI,EAAC,aAHP;AAIE,IAAA,WAAW,EAAC,cAJd;AAKE,IAAA,YAAY,EAAEZ,IAAI,CAACC,KAAL,CAAWQ,WAL3B;AAME,IAAA,QAAQ,EAAEG,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAjDF,EA4DE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACMT,eAAe,GAAG,KAAH,GAAW,GADhC,aA5DF,CAFF,CADF;AAqED,CA5GD;;AA8GA,eAAeR,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      recordLabel\n    }\n  }\n`;\n\nconst UPDATE_ALBUM_MUTATION = gql`\n  mutation UPDATE_ALBUM_MUTATION(\n    $id: ID!\n    $title: String!\n    $catalogNumber: String\n    $format: String\n    $info: String\n    $recordLabel: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      catalogNumber: $catalogNumber\n      format: $format\n      info: $info\n      recordLabel: $recordLabel\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst UpdateAlbum = ({ id }) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const { loading, error, data = { album: {} } } = useQuery(\n    SINGLE_ALBUM_QUERY,\n    {\n      variables: { id: id },\n    }\n  );\n  const [\n    updateAlbumMutation,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(UPDATE_ALBUM_MUTATION);\n\n  const [state, setState] = useState({\n    id,\n    title: data.album.title,\n    catalogNumber: data.album.catalogNumber,\n    format: data.album.format,\n    info: data.album.info,\n    recordLabel: data.album.recordLabel,\n  });\n  function handleChange(e) {\n    e.preventDefault();\n    const { name, type, value } = e.target;\n    console.log(name);\n    console.log(type);\n    console.log(value);\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState({ ...state, [name]: val });\n  }\n\n  async function updateAlbum(e) {\n    e.preventDefault();\n    updateAlbumMutation({ variables: { id, ...state } });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return <p>Loading</p>;\n  return (\n    <Form onSubmit={(e) => updateAlbum(e)}>\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"title\">\n          Title\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n            defaultValue={data.album.title}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"catalogNumber\">\n          Catalog Number\n          <input\n            type=\"text\"\n            id=\"catalogNumber\"\n            name=\"catalogNumber\"\n            placeholder=\"Catalog Number\"\n            required\n            defaultValue={data.album.catalogNumber}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"format\">\n          Format\n          <input\n            type=\"text\"\n            id=\"format\"\n            name=\"format\"\n            placeholder=\"Format\"\n            required\n            defaultValue={data.album.format}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"info\">\n          Info\n          <input\n            type=\"text\"\n            id=\"info\"\n            name=\"info\"\n            placeholder=\"Info\"\n            required\n            defaultValue={data.album.info}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"recordLabel\">\n          Record Label\n          <input\n            type=\"text\"\n            id=\"recordLabel\"\n            name=\"recordLabel\"\n            placeholder=\"Record Label\"\n            defaultValue={data.album.recordLabel}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\">\n          Sav{mutationLoading ? \"ing\" : \"e\"} Changes\n        </button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default UpdateAlbum;\n"]},"metadata":{},"sourceType":"module"}