{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Albums.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nimport { Dropdown } from \"primereact/dropdown\";\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nconst AlbumsList = styled.div.withConfig({\n  displayName: \"Albums__AlbumsList\",\n  componentId: \"sc-1rsazgb-0\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\nconst Center = styled.div.withConfig({\n  displayName: \"Albums__Center\",\n  componentId: \"sc-1rsazgb-1\"\n})([\"text-align:center;\"]);\nconst sortBySelectItems = [{\n  label: \"Title, ascending\",\n  value: \"title_ASC\"\n}, {\n  label: \"Title, descending\",\n  value: \"title_DESC\"\n}, {\n  label: \"Format, ascending\",\n  value: \"format_DESC\"\n}, {\n  label: \"Format, descending\",\n  value: \"format_ASC\"\n}, {\n  label: \"Release Date, ascending\",\n  value: \"releaseDate_ASC\"\n}, {\n  label: \"Release Date, descending\",\n  value: \"releaseDate_DESC\"\n}, {\n  label: \"Record Label, ascending\",\n  value: \"recordLabel_ASC\"\n}, {\n  label: \"Record Label, descending\",\n  value: \"recordLabel_DESC\"\n}];\n\nconst Albums = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"title_ASC\");\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  if (albumsBeginningWithLoading || allAlbumsLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Loading...\");\n  if (albumsBeginningWithError || allAlbumsError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Error :(\");\n  const albums = !letter ? allAlbumsData.albums.map(album => __jsx(Album, {\n    key: album.id,\n    album: album,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })) : albumsBeginningWithData.albums.map(album => __jsx(Album, {\n    key: album.id,\n    album: album,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }));\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZWithNumber,\n    onChange: e => setLetter(e.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), __jsx(Dropdown, {\n    value: sortBy,\n    options: sortBySelectItems,\n    onChange: e => setSortBy(e.value),\n    placeholder: \"Sort By\\u2026\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(AlbumsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, albums), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }));\n};\n\nexport default Albums;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Albums.js"],"names":["React","useState","useQuery","gql","styled","Album","Pagination","perPage","SelectButton","selectButtonsAthruZWithNumber","Dropdown","ALL_ALBUMS_QUERY","ALL_ALBUMS_BEGINNING_WITH_QUERY","AlbumsList","div","props","theme","maxWidth","Center","sortBySelectItems","label","value","Albums","page","letter","setLetter","sortBy","setSortBy","loading","allAlbumsLoading","error","allAlbumsError","data","allAlbumsData","variables","skip","first","albumsBeginningWithLoading","albumsBeginningWithError","albumsBeginningWithData","albums","map","album","id","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst AlbumsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst sortBySelectItems = [\n  { label: \"Title, ascending\", value: \"title_ASC\" },\n  { label: \"Title, descending\", value: \"title_DESC\" },\n  { label: \"Format, ascending\", value: \"format_DESC\" },\n  { label: \"Format, descending\", value: \"format_ASC\" },\n  { label: \"Release Date, ascending\", value: \"releaseDate_ASC\" },\n  { label: \"Release Date, descending\", value: \"releaseDate_DESC\" },\n  { label: \"Record Label, ascending\", value: \"recordLabel_ASC\" },\n  { label: \"Record Label, descending\", value: \"recordLabel_DESC\" },\n];\n\nconst Albums = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"title_ASC\");\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData,\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, sortBy },\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData,\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy,\n    },\n  });\n  if (albumsBeginningWithLoading || allAlbumsLoading) return <p>Loading...</p>;\n  if (albumsBeginningWithError || allAlbumsError) return <p>Error :(</p>;\n\n  const albums = !letter\n    ? allAlbumsData.albums.map((album) => (\n        <Album key={album.id} album={album} />\n      ))\n    : albumsBeginningWithData.albums.map((album) => (\n        <Album key={album.id} album={album} />\n      ));\n\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZWithNumber}\n        onChange={(e) => setLetter(e.value)}\n      />\n      <br />\n      <Dropdown\n        value={sortBy}\n        options={sortBySelectItems}\n        onChange={(e) => setSortBy(e.value)}\n        placeholder=\"Sort By…\"\n      />\n      <br />\n      <Pagination page={page} model=\"albums\" letter={letter} />\n      <AlbumsList>{albums}</AlbumsList>\n      <Pagination page={page} model=\"albums\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Albums;\n"]},"metadata":{},"sourceType":"module"}