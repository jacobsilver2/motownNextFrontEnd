{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Albums.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\"; // import { Dropdown } from \"primereact/dropdown\";\n\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport { MultiList, Center } from \"./Artists\";\nexport const StyledDropdown = styled(Dropdown).withConfig({\n  displayName: \"Albums__StyledDropdown\",\n  componentId: \"sc-1rsazgb-0\"\n})([\"width:50%;@media screen and (max-width:600px){width:100%;}\"]);\nexport const ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($first: Int = ${perPage}, $skip: Int = 0, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: false}, first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: false, title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: false, OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nconst sortBySelectItems = [{\n  label: \"Title, ascending\",\n  value: \"title_ASC\"\n}, {\n  label: \"Title, descending\",\n  value: \"title_DESC\"\n}, {\n  label: \"Format, ascending\",\n  value: \"format_DESC\"\n}, {\n  label: \"Format, descending\",\n  value: \"format_ASC\"\n}, {\n  label: \"Release Date, ascending\",\n  value: \"releaseDate_ASC\"\n}, {\n  label: \"Release Date, descending\",\n  value: \"releaseDate_DESC\"\n}, {\n  label: \"Record Label, ascending\",\n  value: \"recordLabel_ASC\"\n}, {\n  label: \"Record Label, descending\",\n  value: \"recordLabel_DESC\"\n}, {\n  label: \"Catalog Number, ascending\",\n  value: \"catalogNumber_ASC\"\n}, {\n  label: \"Catalog Number, descending\",\n  value: \"catalogNumber_DESC\"\n}];\n\nconst Albums = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"title_ASC\");\n  const {\n    0: checkedItems,\n    1: setCheckedItems\n  } = useState([]);\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  const {\n    loading: albumsBeginningWithNumberLoading,\n    error: albumsBeginningWithNumberError,\n    data: albumsBeginningWithNumberData\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  if (albumsBeginningWithLoading || allAlbumsLoading || albumsBeginningWithNumberLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Loading...\");\n  if (albumsBeginningWithError || allAlbumsError || albumsBeginningWithNumberError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Error :(\");\n\n  function getAlbums() {\n    if (letter === \"\" || !letter) {\n      return allAlbumsData.albums.map(album => __jsx(Album, {\n        addToCheckedItemsList: setCheckedItems,\n        checkedItems: checkedItems,\n        key: album.id,\n        album: album,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    } else if (letter === \"#\") {\n      return albumsBeginningWithNumberData.albums.map(album => __jsx(Album, {\n        key: album.id,\n        album: album,\n        addToCheckedItemsList: setCheckedItems,\n        checkedItems: checkedItems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }));\n    } else {\n      return albumsBeginningWithData.albums.map(album => __jsx(Album, {\n        key: album.id,\n        album: album,\n        addToCheckedItemsList: setCheckedItems,\n        checkedItems: checkedItems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }));\n    }\n  }\n\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZWithNumber,\n    onChange: e => {\n      setLetter(e.value);\n      Router.push({\n        pathname: \"/albums\",\n        query: {\n          page: 1\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), __jsx(DropDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), __jsx(MultiList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, getAlbums()), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }));\n};\n\nexport default Albums;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Albums.js"],"names":["React","useState","useQuery","useMutation","Router","gql","styled","Album","Pagination","perPage","SelectButton","selectButtonsAthruZWithNumber","DropDown","DropDownItem","SearchStyles","MultiList","Center","StyledDropdown","Dropdown","ALL_ALBUMS_QUERY","ALL_ALBUMS_BEGINNING_WITH_QUERY","ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY","sortBySelectItems","label","value","Albums","page","letter","setLetter","sortBy","setSortBy","checkedItems","setCheckedItems","loading","allAlbumsLoading","error","allAlbumsError","data","allAlbumsData","variables","skip","first","albumsBeginningWithLoading","albumsBeginningWithError","albumsBeginningWithData","albumsBeginningWithNumberLoading","albumsBeginningWithNumberError","albumsBeginningWithNumberData","getAlbums","albums","map","album","id","e","push","pathname","query"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Router from \"next/router\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\n// import { Dropdown } from \"primereact/dropdown\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport { MultiList, Center } from \"./Artists\";\n\nexport const StyledDropdown = styled(Dropdown)`\n  width: 50%;\n  @media screen and (max-width: 600px) {\n    width: 100%;\n  }\n`;\n\nexport const ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($first: Int = ${perPage}, $skip: Int = 0, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: false}, first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: false, title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: AlbumOrderByInput!) {\n    albums(where: {single: false, OR: [{title_starts_with: \"0\"},{title_starts_with: \"1\"},{title_starts_with: \"2\"},{title_starts_with: \"3\"},{title_starts_with: \"4\"},{title_starts_with: \"5\"},{title_starts_with: \"6\"},{title_starts_with: \"7\"},{title_starts_with: \"8\"},{title_starts_with: \"9\"}]}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      catalogNumber\n      single\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst sortBySelectItems = [\n  { label: \"Title, ascending\", value: \"title_ASC\" },\n  { label: \"Title, descending\", value: \"title_DESC\" },\n  { label: \"Format, ascending\", value: \"format_DESC\" },\n  { label: \"Format, descending\", value: \"format_ASC\" },\n  { label: \"Release Date, ascending\", value: \"releaseDate_ASC\" },\n  { label: \"Release Date, descending\", value: \"releaseDate_DESC\" },\n  { label: \"Record Label, ascending\", value: \"recordLabel_ASC\" },\n  { label: \"Record Label, descending\", value: \"recordLabel_DESC\" },\n  { label: \"Catalog Number, ascending\", value: \"catalogNumber_ASC\" },\n  { label: \"Catalog Number, descending\", value: \"catalogNumber_DESC\" },\n];\n\nconst Albums = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"title_ASC\");\n  const [checkedItems, setCheckedItems] = useState([]);\n\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData,\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, sortBy },\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData,\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy,\n    },\n  });\n  const {\n    loading: albumsBeginningWithNumberLoading,\n    error: albumsBeginningWithNumberError,\n    data: albumsBeginningWithNumberData,\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_NUMBER_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy,\n    },\n  });\n  if (\n    albumsBeginningWithLoading ||\n    allAlbumsLoading ||\n    albumsBeginningWithNumberLoading\n  )\n    return <p>Loading...</p>;\n  if (\n    albumsBeginningWithError ||\n    allAlbumsError ||\n    albumsBeginningWithNumberError\n  )\n    return <p>Error :(</p>;\n\n  function getAlbums() {\n    if (letter === \"\" || !letter) {\n      return allAlbumsData.albums.map((album) => (\n        <Album\n          addToCheckedItemsList={setCheckedItems}\n          checkedItems={checkedItems}\n          key={album.id}\n          album={album}\n        />\n      ));\n    } else if (letter === \"#\") {\n      return albumsBeginningWithNumberData.albums.map((album) => (\n        <Album\n          key={album.id}\n          album={album}\n          addToCheckedItemsList={setCheckedItems}\n          checkedItems={checkedItems}\n        />\n      ));\n    } else {\n      return albumsBeginningWithData.albums.map((album) => (\n        <Album\n          key={album.id}\n          album={album}\n          addToCheckedItemsList={setCheckedItems}\n          checkedItems={checkedItems}\n        />\n      ));\n    }\n  }\n\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZWithNumber}\n        onChange={(e) => {\n          setLetter(e.value);\n          Router.push({ pathname: \"/albums\", query: { page: 1 } });\n        }}\n      />\n      <br />\n      {/* <StyledDropdown\n        value={sortBy}\n        options={sortBySelectItems}\n        onChange={(e) => setSortBy(e.value)}\n        placeholder=\"Sort By…\"\n      /> */}\n      <DropDown></DropDown>\n      <br />\n      <Pagination page={page} model=\"albums\" letter={letter} />\n      <MultiList>{getAlbums()}</MultiList>\n      <Pagination page={page} model=\"albums\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Albums;\n"]},"metadata":{},"sourceType":"module"}