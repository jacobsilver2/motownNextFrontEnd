{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\"; // import { Card } from \"primereact/card\";\n\nimport Card from \"./Card\";\nconst SingleComposerStyles = styled.div.withConfig({\n  displayName: \"SingleComposer__SingleComposerStyles\",\n  componentId: \"sc-1g72zdd-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.name{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst SINGLE_COMPOSER_QUERY = gql`\n  query SINGLE_COMPOSER_QUERY($id: ID!) {\n    composer(where: { id: $id }) {\n      id\n      name\n      songs {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst SingleComposer = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_COMPOSER_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error\n  });\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (!data.composer) return __jsx(\"p\", null, \"No composer found for \", id); // console.log(data.song);\n\n  const {\n    name,\n    songs\n  } = data.composer;\n  return __jsx(Card, {\n    title: name\n  }, __jsx(\"p\", null, name, \" has either written or co-written \", songs.length, \" song\", songs.length > 1 ? \"s\" : \"\", \" recorded for Motown.\"), __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    }\n  }, songs.map(song => __jsx(\"li\", {\n    key: song.id\n  }, __jsx(Link, {\n    href: {\n      pathname: \"song\",\n      query: {\n        id: song.id\n      }\n    }\n  }, __jsx(\"a\", null, song.title)))))) // <SingleComposerStyles>\n  //   <div className=\"details\">\n  //     <h1 className=\"name\">{name}</h1>\n  //     {songs && (\n  //       <h2>\n  //         {name} has either written or co-written {songs.length} songs:{\" \"}\n  //         {songs.map(song => (\n  //           <p key={song.id}>\n  //             <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n  //               <a>{song.title}</a>\n  //             </Link>\n  //           </p>\n  //         ))}\n  //       </h2>\n  //     )}\n  //   </div>\n  // </SingleComposerStyles>\n  ;\n};\n\nexport default SingleComposer;","map":null,"metadata":{},"sourceType":"module"}