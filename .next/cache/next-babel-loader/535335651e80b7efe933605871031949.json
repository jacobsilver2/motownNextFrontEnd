{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ARTIST_QUERY($id: ID!) {\\n    artist(where: { id: $id }) {\\n      id\\n      name\\n      songs {\\n        id\\n        title\\n      }\\n      albums {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\"; // import { Card } from \"primereact/card\";\n\nimport ComponentCard from \"./Card\";\nvar SingleArtistStyles = styled.div.withConfig({\n  displayName: \"SingleArtist__SingleArtistStyles\",\n  componentId: \"sc-1t9u136-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.name{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n}); // const TitleCard = styled(Card)`\n//   text-align: center;\n// `;\n\nvar AlbumsAndSongs = styled.div.withConfig({\n  displayName: \"SingleArtist__AlbumsAndSongs\",\n  componentId: \"sc-1t9u136-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;@media screen and (max-width:970px){grid-template-columns:1fr;}\"]);\nvar SINGLE_ARTIST_QUERY = gql(_templateObject());\n\nvar SingleArtist = function SingleArtist(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error\n  });\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (!data.artist) return __jsx(\"p\", null, \"No artist found for \", id);\n  var _data$artist = data.artist,\n      name = _data$artist.name,\n      songs = _data$artist.songs,\n      albums = _data$artist.albums;\n  return __jsx(React.Fragment, null, __jsx(ComponentCard, {\n    isTitle: true,\n    title: name\n  }), __jsx(AlbumsAndSongs, null, songs && __jsx(ComponentCard, {\n    title: \"Songs \".concat(name, \" \").concat(name.includes(\"and\") || name.includes(\"And\") || name.includes(\"&\") ? \"have\" : \"has\", \" recorded:\")\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    }\n  }, songs.map(function (song) {\n    return __jsx(\"p\", {\n      key: song.id\n    }, __jsx(Link, {\n      href: {\n        pathname: \"song\",\n        query: {\n          id: song.id\n        }\n      }\n    }, __jsx(\"a\", null, song.title)));\n  }))), albums && __jsx(ComponentCard, {\n    title: \"Can be heard on the albums:\"\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    }\n  }, albums.map(function (album) {\n    return __jsx(\"p\", {\n      key: album.id\n    }, __jsx(Link, {\n      href: {\n        pathname: \"album\",\n        query: {\n          id: album.id\n        }\n      }\n    }, __jsx(\"a\", null, album.title)));\n  })))));\n};\n\nexport default SingleArtist;","map":null,"metadata":{},"sourceType":"module"}