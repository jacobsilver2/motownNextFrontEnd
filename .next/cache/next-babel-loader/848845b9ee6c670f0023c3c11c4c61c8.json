{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Songs.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = \", \") {\\n    songs(first: $first, skip: $skip, orderBy: title_ASC ) {\\n      id\\n      title\\n      publisher\\n      publishedDate\\n      composer {\\n        name\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nexport var ALL_SONGS_QUERY = gql(_templateObject(), perPage);\nvar Center = styled.div.withConfig({\n  displayName: \"Songs__Center\",\n  componentId: \"sc-16ll7z0-0\"\n})([\"text-align:center;\"]);\nvar SongsList = styled.div.withConfig({\n  displayName: \"Songs__SongsList\",\n  componentId: \"sc-16ll7z0-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], function (props) {\n  return props.theme.maxWidth;\n});\n\nvar Songs = function Songs(_ref) {\n  var page = _ref.page;\n\n  var _useQuery = useQuery(ALL_SONGS_QUERY, {\n    variables: {\n      skip: 2,\n      first: 4\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Error :(\");\n  var songs = data.songs.map(function (song) {\n    return __jsx(Song, {\n      key: song.id,\n      song: song,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  });\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Pagination, {\n    page: page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"I found \", songs.length, \" songs.\")), __jsx(SongsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, songs), __jsx(Pagination, {\n    page: page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n};\n\nexport default Songs;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Songs.js"],"names":["React","useQuery","gql","styled","Song","Pagination","perPage","ALL_SONGS_QUERY","Center","div","SongsList","props","theme","maxWidth","Songs","page","variables","skip","first","loading","error","data","songs","map","song","id","length"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,IAAMC,eAAe,GAAGL,GAAH,oBAC4BI,OAD5B,CAArB;AAeP,IAAME,MAAM,GAAGL,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,0BAAZ;AAIA,IAAMC,SAAS,GAAGP,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,+FAIA,UAAAE,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,QAAhB;AAAA,CAJL,CAAf;;AAQA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACOd,QAAQ,CAACM,eAAD,EAAkB;AACzDS,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,KAAK,EAAE;AAAlB;AAD8C,GAAlB,CADf;AAAA,MAClBC,OADkB,aAClBA,OADkB;AAAA,MACTC,KADS,aACTA,KADS;AAAA,MACFC,IADE,aACFA,IADE;;AAI1B,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,MAAME,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI;AAAA,WAAI,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,MAAA,IAAI,EAAED,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,GAAnB,CAAd;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,IAAI,EAAET,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYO,KAAK,CAACI,MAAlB,YADF,CAFF,EAKE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYJ,KAAZ,CALF,EAME,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEP,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAnBD;;AAqBA,eAAeD,KAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\n\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    songs(first: $first, skip: $skip, orderBy: title_ASC ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst SongsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${props => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Songs = ({ page }) => {\n  const { loading, error, data } = useQuery(ALL_SONGS_QUERY, {\n    variables: { skip: 2, first: 4 }\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const songs = data.songs.map(song => <Song key={song.id} song={song} />);\n\n  return (\n    <Center>\n      <Pagination page={page} />\n      <p>\n        <b>I found {songs.length} songs.</b>\n      </p>\n      <SongsList>{songs}</SongsList>\n      <Pagination page={page} />\n    </Center>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}