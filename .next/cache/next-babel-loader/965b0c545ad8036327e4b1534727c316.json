{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      composer {\\n        id\\n        name\\n      }\\n      publisher\\n      publishedDate\\n      altTitle\\n      instrumental\\n      fromFilm\\n      tribute\\n      artists {\\n        id\\n        name\\n      }\\n      albums {\\n        id\\n        title\\n      }\\n      recordings {\\n        id\\n        producer\\n        location\\n        completed\\n        albums {\\n          id\\n          title\\n        }\\n        song {\\n          id\\n          title\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\"; // import { Card } from \"primereact/card\";\n\nimport ComponentCard from \"./Card\";\nimport formatDate from \"../lib/formatDate\";\nvar SingleSongStyles = styled.div.withConfig({\n  displayName: \"SingleSong__SingleSongStyles\",\n  componentId: \"sc-1e0bt3h-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n});\nvar ComponentTitleCard = styled(ComponentCard).withConfig({\n  displayName: \"SingleSong__ComponentTitleCard\",\n  componentId: \"sc-1e0bt3h-1\"\n})([\"text-align:center;color:green;\"]);\nvar PerformedByAndRecordingspane = styled.div.withConfig({\n  displayName: \"SingleSong__PerformedByAndRecordingspane\",\n  componentId: \"sc-1e0bt3h-2\"\n})([\"display:grid;grid-template-columns:1fr 1fr;\"]);\nvar SINGLE_SONG_QUERY = gql(_templateObject());\n\nvar SingleSong = function SingleSong(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(\"list\"),\n      layout = _useState[0],\n      setLayout = _useState[1];\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"No song found for \", id);\n  var _data$song = data.song,\n      title = _data$song.title,\n      composer = _data$song.composer,\n      publisher = _data$song.publisher,\n      publishedDate = _data$song.publishedDate,\n      altTitle = _data$song.altTitle,\n      instrumental = _data$song.instrumental,\n      fromFilm = _data$song.fromFilm,\n      tribute = _data$song.tribute,\n      artists = _data$song.artists,\n      albums = _data$song.albums,\n      recordings = _data$song.recordings;\n  var composerNames = composer.map(function (comp, index) {\n    var trailingChar = \", \";\n\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: comp.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/composer\",\n        query: {\n          id: comp.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, comp.name, \" \")), trailingChar);\n  });\n  var albumsCards = albums.map(function (album) {\n    return __jsx(ComponentCard, {\n      key: album.id,\n      title: __jsx(Link, {\n        href: {\n          pathname: \"album\",\n          query: {\n            id: album.id\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, album.title)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, renderAlbumRecordings(album));\n  }); // const matchedAlbumRecording = recordings.filter(recording => {\n  //   recording.albums.forEach(album => (\n  //     album.title ===\n  //   ))\n  // })\n\n  function renderAlbumRecordings(theAlbum) {\n    var matchedAlbumRecordingInfo = {};\n    recordings.forEach(function (recording) {\n      recording.albums.forEach(function (album) {\n        if (album.id === theAlbum.id) {\n          matchedAlbumRecordingInfo.producer = recording.producer, matchedAlbumRecordingInfo.location = recording.location, matchedAlbumRecordingInfo.id = recording.id, matchedAlbumRecordingInfo.completed = recording.completed;\n        }\n      });\n    });\n    return __jsx(\"ul\", {\n      key: matchedAlbumRecordingInfo.id,\n      style: {\n        listStyleType: \"none\",\n        margin: 0,\n        padding: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, matchedAlbumRecordingInfo.producer && __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Produced By: \", matchedAlbumRecordingInfo.producer), matchedAlbumRecordingInfo.location && __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Recording Location: \", matchedAlbumRecordingInfo.location), matchedAlbumRecordingInfo.completed && __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Completed: \", formatDate(matchedAlbumRecordingInfo.completed)));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(ComponentTitleCard, {\n    title: title,\n    subTitle: composerNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, altTitle && __jsx(\"h3\", {\n    className: \"alttitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Alt Title: \", altTitle), publisher && __jsx(\"h3\", {\n    className: \"publisher\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Publisher: \", publisher), publishedDate && __jsx(\"h3\", {\n    className: \"publisheddate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Published Date: \", formatDate(publishedDate)), instrumental && __jsx(\"h3\", {\n    className: \"instrumental\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Instrumental\"), fromFilm && __jsx(\"h3\", {\n    className: \"fromfilm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"From Film: \", fromFilm)), __jsx(PerformedByAndRecordingspane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, artists && __jsx(ComponentCard, {\n    title: \"Performed by: \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, artists.map(function (artist) {\n    return __jsx(\"li\", {\n      key: artist.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"artist\",\n        query: {\n          id: artist.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, artist.name)));\n  }))), albums && __jsx(ComponentCard, {\n    title: \"Can be heard on the album\".concat(albums.length > 1 ? \"s\" : \"\", \":\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, albumsCards)));\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","useState","gql","useQuery","ErrorMessage","styled","Link","ComponentCard","formatDate","SingleSongStyles","div","props","theme","bs","ComponentTitleCard","PerformedByAndRecordingspane","SINGLE_SONG_QUERY","SingleSong","id","variables","loading","error","data","layout","setLayout","song","title","composer","publisher","publishedDate","altTitle","instrumental","fromFilm","tribute","artists","albums","recordings","composerNames","map","comp","index","trailingChar","length","pathname","query","name","albumsCards","album","renderAlbumRecordings","theAlbum","matchedAlbumRecordingInfo","forEach","recording","producer","location","completed","listStyleType","margin","padding","artist"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\n// import { Card } from \"primereact/card\";\nimport ComponentCard from \"./Card\";\nimport formatDate from \"../lib/formatDate\";\n\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst ComponentTitleCard = styled(ComponentCard)`\n  text-align: center;\n  color: green;\n`;\n\nconst PerformedByAndRecordingspane = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n        song {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id },\n  });\n  const [layout, setLayout] = useState(\"list\");\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings,\n  } = data.song;\n\n  const composerNames = composer.map((comp, index) => {\n    let trailingChar = \", \";\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={comp.id}>\n        <Link href={{ pathname: \"/composer\", query: { id: comp.id } }}>\n          <a>{comp.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n\n  const albumsCards = albums.map((album) => {\n    return (\n      <ComponentCard\n        key={album.id}\n        title={\n          <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n            <a>{album.title}</a>\n          </Link>\n        }\n      >\n        {renderAlbumRecordings(album)}\n      </ComponentCard>\n    );\n  });\n\n  // const matchedAlbumRecording = recordings.filter(recording => {\n  //   recording.albums.forEach(album => (\n  //     album.title ===\n  //   ))\n  // })\n\n  function renderAlbumRecordings(theAlbum) {\n    const matchedAlbumRecordingInfo = {};\n    recordings.forEach((recording) => {\n      recording.albums.forEach((album) => {\n        if (album.id === theAlbum.id) {\n          (matchedAlbumRecordingInfo.producer = recording.producer),\n            (matchedAlbumRecordingInfo.location = recording.location),\n            (matchedAlbumRecordingInfo.id = recording.id),\n            (matchedAlbumRecordingInfo.completed = recording.completed);\n        }\n      });\n    });\n    return (\n      <ul\n        key={matchedAlbumRecordingInfo.id}\n        style={{ listStyleType: \"none\", margin: 0, padding: 0 }}\n      >\n        {matchedAlbumRecordingInfo.producer && (\n          <li>Produced By: {matchedAlbumRecordingInfo.producer}</li>\n        )}\n        {matchedAlbumRecordingInfo.location && (\n          <li>Recording Location: {matchedAlbumRecordingInfo.location}</li>\n        )}\n        {matchedAlbumRecordingInfo.completed && (\n          <li>Completed: {formatDate(matchedAlbumRecordingInfo.completed)}</li>\n        )}\n      </ul>\n    );\n  }\n\n  return (\n    <>\n      <ComponentTitleCard title={title} subTitle={composerNames}>\n        {altTitle && <h3 className=\"alttitle\">Alt Title: {altTitle}</h3>}\n        {publisher && <h3 className=\"publisher\">Publisher: {publisher}</h3>}\n        {publishedDate && (\n          <h3 className=\"publisheddate\">\n            Published Date: {formatDate(publishedDate)}\n          </h3>\n        )}\n        {instrumental && <h3 className=\"instrumental\">Instrumental</h3>}\n        {fromFilm && <h3 className=\"fromfilm\">From Film: {fromFilm}</h3>}\n      </ComponentTitleCard>\n      <PerformedByAndRecordingspane>\n        {artists && (\n          <ComponentCard title=\"Performed by: \">\n            <ul style={{ listStyleType: \"none\", margin: 0, padding: 0 }}>\n              {artists.map((artist) => (\n                <li key={artist.id}>\n                  <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n                    <a>{artist.name}</a>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </ComponentCard>\n        )}\n        {albums && (\n          <ComponentCard\n            title={`Can be heard on the album${albums.length > 1 ? \"s\" : \"\"}:`}\n          >\n            {albumsCards}\n          </ComponentCard>\n        )}\n      </PerformedByAndRecordingspane>\n    </>\n  );\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}