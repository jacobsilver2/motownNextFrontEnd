{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nimport Song from \"./styles/song/songStyles\";\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_ARTISTS_QUERY = gql`\n  query SEARCH_ARTISTS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\nconst SEARCH_ALBUMS_QUERY = gql`\n  query SEARCH_ALBUMS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ title_contains: $searchTerm }] }) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_COMPOSERS_QUERY = gql`\n  query SEARCH_COMPOSERS_QUERY($searchTerm: String!) {\n    composers(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  item && Router.push({\n    pathname: `/${item}`,\n    query: {\n      id: item.id\n    }\n  });\n}\n\nfunction returnQuery(item) {\n  console.log(item);\n\n  if (item === \"song\") {\n    return SEARCH_SONGS_QUERY;\n  }\n\n  if (item === \"album\") {\n    return SEARCH_ALBUMS_QUERY;\n  }\n\n  if (item === \"artist\") {\n    return SEARCH_ARTISTS_QUERY;\n  }\n\n  if (item === \"composer\") {\n    return SEARCH_COMPOSERS_QUERY;\n  }\n}\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false,\n      item: \"song\"\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      this.setState({\n        loading: true\n      });\n      const response = e.target.value && (await client.query({\n        query: () => returnQuery(this.state.item),\n        variables: {\n          searchTerm: e.target.value\n        }\n      }));\n      e.target.value && this.setState({\n        items: response.data.songs || response.data.albums || response.data.composers || response.data.artists,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(Downshift, {\n      onChange: routeToItem,\n      itemToString: item => item === null ? \"\" : item.title || item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, __jsx(ApolloConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, client => __jsx(\"input\", _extends({}, getInputProps({\n      type: \"search\",\n      placeholder: \"Search\",\n      id: \"search\",\n      className: this.state.loading ? \"loading\" : \"\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))), isOpen ? __jsx(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      key: item.id,\n      index,\n      item\n    }), {\n      highlighted: index === highlightedIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), __jsx(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, item.title || item.name)))) : null)));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Search.js"],"names":["React","Downshift","resetIdCounter","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","SongStyles","Title","Song","SEARCH_SONGS_QUERY","SEARCH_ARTISTS_QUERY","SEARCH_ALBUMS_QUERY","SEARCH_COMPOSERS_QUERY","routeToItem","item","push","pathname","query","id","returnQuery","console","log","AutoComplete","Component","items","loading","e","client","setState","response","target","value","state","variables","searchTerm","data","songs","albums","composers","artists","render","title","name","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","onChange","persist","map","index","key"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nimport Song from \"./styles/song/songStyles\";\n\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_ARTISTS_QUERY = gql`\n  query SEARCH_ARTISTS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nconst SEARCH_ALBUMS_QUERY = gql`\n  query SEARCH_ALBUMS_QUERY($searchTerm: String!) {\n    artists(where: { OR: [{ title_contains: $searchTerm }] }) {\n      id\n      title\n    }\n  }\n`;\nconst SEARCH_COMPOSERS_QUERY = gql`\n  query SEARCH_COMPOSERS_QUERY($searchTerm: String!) {\n    composers(where: { OR: [{ name_contains: $searchTerm }] }) {\n      id\n      name\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  item &&\n    Router.push({\n      pathname: `/${item}`,\n      query: {\n        id: item.id\n      }\n    });\n}\n\nfunction returnQuery(item) {\n  console.log(item);\n  if (item === \"song\") {\n    return SEARCH_SONGS_QUERY;\n  }\n  if (item === \"album\") {\n    return SEARCH_ALBUMS_QUERY;\n  }\n  if (item === \"artist\") {\n    return SEARCH_ARTISTS_QUERY;\n  }\n  if (item === \"composer\") {\n    return SEARCH_COMPOSERS_QUERY;\n  }\n}\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false,\n    item: \"song\"\n  };\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const response =\n      e.target.value &&\n      (await client.query({\n        query: () => returnQuery(this.state.item),\n        variables: { searchTerm: e.target.value }\n      }));\n    e.target.value &&\n      this.setState({\n        items:\n          response.data.songs ||\n          response.data.albums ||\n          response.data.composers ||\n          response.data.artists,\n        loading: false\n      });\n  }, 350);\n\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n        <Downshift\n          onChange={routeToItem}\n          itemToString={item => (item === null ? \"\" : item.title || item.name)}\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            isOpen,\n            inputValue,\n            highlightedIndex\n          }) => (\n            <div>\n              <ApolloConsumer>\n                {client => (\n                  <input\n                    {...getInputProps({\n                      type: \"search\",\n                      placeholder: \"Search\",\n                      id: \"search\",\n                      className: this.state.loading ? \"loading\" : \"\",\n                      onChange: e => {\n                        e.persist();\n                        this.onChange(e, client);\n                      }\n                    })}\n                  />\n                )}\n              </ApolloConsumer>\n              {isOpen ? (\n                <DropDown>\n                  {this.state.items.map((item, index) => (\n                    <DropDownItem\n                      {...getItemProps({ key: item.id, index, item })}\n                      highlighted={index === highlightedIndex}\n                    >\n                      <Title>{item.title || item.name}</Title>\n                    </DropDownItem>\n                  ))}\n                </DropDown>\n              ) : null}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}