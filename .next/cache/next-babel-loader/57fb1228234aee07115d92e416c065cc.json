{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Downshift from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      songs: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      this.setState({\n        loading: true\n      });\n      const response = await client.query({\n        query: SEARCH_SONGS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        songs: response.data.songs,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    console.log(this.state.songs);\n    return __jsx(SearchStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(ApolloConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, client => __jsx(\"input\", {\n      type: \"search\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), __jsx(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.state.songs.map(song => __jsx(DropDownItem, {\n      key: song.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, __jsx(SongStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, song.title)))))));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Search.js"],"names":["React","Downshift","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","SongStyles","Title","SEARCH_SONGS_QUERY","AutoComplete","Component","songs","loading","e","client","setState","response","query","variables","searchTerm","target","value","data","render","console","log","state","persist","onChange","map","song","id","title"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,MAAMC,kBAAkB,GAAGP,GAAI;;;;;;;;;;;;;;;CAA/B;;AAiBA,MAAMQ,YAAN,SAA2BZ,KAAK,CAACa,SAAjC,CAA2C;AAAA;AAAA;;AAAA,mCACjC;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH,KADiC;;AAAA,sCAK9BV,QAAQ,CAAC,OAAOW,CAAP,EAAUC,MAAV,KAAqB;AACvC,WAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,YAAMI,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CAAa;AAClCA,QAAAA,KAAK,EAAET,kBAD2B;AAElCU,QAAAA,SAAS,EAAE;AAAEC,UAAAA,UAAU,EAAEN,CAAC,CAACO,MAAF,CAASC;AAAvB;AAFuB,OAAb,CAAvB;AAIA,WAAKN,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAEK,QAAQ,CAACM,IAAT,CAAcX,KAAvB;AAA8BC,QAAAA,OAAO,EAAE;AAAvC,OAAd;AACD,KAPkB,EAOhB,GAPgB,CALsB;AAAA;;AAczCW,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWf,KAAvB;AACA,WACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,MAAM,IACL;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,QAAQ,EAAED,CAAC,IAAI;AACbA,QAAAA,CAAC,CAACc,OAAF;AACA,aAAKC,QAAL,CAAcf,CAAd,EAAiBC,MAAjB;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADF,EAYE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKY,KAAL,CAAWf,KAAX,CAAiBkB,GAAjB,CAAqBC,IAAI,IACxB,MAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQD,IAAI,CAACE,KAAb,CADF,CADF,CADD,CADH,CAZF,CADF,CADF;AA0BD;;AA1CwC;;AA6C3C,eAAevB,YAAf","sourcesContent":["import React from \"react\";\nimport Downshift from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\n\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nclass AutoComplete extends React.Component {\n  state = {\n    songs: [],\n    loading: false\n  };\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const response = await client.query({\n      query: SEARCH_SONGS_QUERY,\n      variables: { searchTerm: e.target.value }\n    });\n    this.setState({ songs: response.data.songs, loading: false });\n  }, 350);\n\n  render() {\n    console.log(this.state.songs);\n    return (\n      <SearchStyles>\n        <div>\n          <ApolloConsumer>\n            {client => (\n              <input\n                type=\"search\"\n                onChange={e => {\n                  e.persist();\n                  this.onChange(e, client);\n                }}\n              />\n            )}\n          </ApolloConsumer>\n          <DropDown>\n            {this.state.songs.map(song => (\n              <DropDownItem key={song.id}>\n                <SongStyles>\n                  <Title>{song.title}</Title>\n                </SongStyles>\n              </DropDownItem>\n            ))}\n          </DropDown>\n        </div>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}