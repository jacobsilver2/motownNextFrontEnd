{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport { RadioButton } from \"primereact/radiobutton\";\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $altTitle: String\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      altTitle: $altTitle\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst UpdateSong = ({\n  id\n}) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const {\n    loading,\n    error,\n    data = {\n      song: {}\n    }\n  } = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  });\n  const [updateSongMutation, {\n    loading: mutationLoading,\n    error: mutationError\n  }] = useMutation(UPDATE_SONG_MUTATION);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n\n  function handleChange(e) {\n    e.preventDefault();\n    const {\n      name,\n      type,\n      value\n    } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, {\n      [name]: val\n    }));\n  }\n\n  async function updateSong(e) {\n    e.preventDefault();\n    updateSongMutation({\n      variables: _objectSpread({\n        id\n      }, state)\n    });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: updateSong,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"content-section implementation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: \"first\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Title\")), __jsx(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.song.title,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"publisher\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Publisher\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"publisher\",\n    name: \"publisher\",\n    placeholder: \"Title\",\n    defaultValue: data.song.publisher,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"altTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Alt Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"altTitle\",\n    name: \"altTitle\",\n    placeholder: \"Alt Title\",\n    defaultValue: data.song.altTitle,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"fromFilm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"From Film:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"fromFilm\",\n    name: \"fromFilm\",\n    placeholder: \"From Film\",\n    defaultValue: data.song.fromFilm,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"tribute\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Tribute To:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"tribute\",\n    name: \"tribute\",\n    placeholder: \"Tribute\",\n    defaultValue: data.song.tribute,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Sav\", mutationLoading ? \"ing\" : \"e\", \" Changes\")));\n};\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js"],"names":["React","useState","useQuery","useMutation","gql","Router","Form","Error","InputText","Button","Checkbox","RadioButton","SINGLE_SONG_QUERY","UPDATE_SONG_MUTATION","UpdateSong","id","loading","error","data","song","variables","updateSongMutation","mutationLoading","mutationError","state","setState","handleChange","e","preventDefault","name","type","value","target","val","parseFloat","updateSong","console","log","title","publisher","altTitle","fromFilm","tribute"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport { RadioButton } from \"primereact/radiobutton\";\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\n\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $altTitle: String\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      altTitle: $altTitle\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst UpdateSong = ({ id }) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const { loading, error, data = { song: {} } } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id: id },\n  });\n  const [\n    updateSongMutation,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(UPDATE_SONG_MUTATION);\n\n  const [state, setState] = useState({});\n\n  function handleChange(e) {\n    e.preventDefault();\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState({ ...state, [name]: val });\n  }\n\n  async function updateSong(e) {\n    e.preventDefault();\n    updateSongMutation({ variables: { id, ...state } });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return <p>Loading</p>;\n  return (\n    <Form onSubmit={updateSong}>\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <div className=\"content-section implementation\">\n          <h3 className=\"first\">Title</h3>\n        </div>\n\n        <label htmlFor=\"title\">\n          Title\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n            defaultValue={data.song.title}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"publisher\">\n          Publisher\n          <input\n            type=\"text\"\n            id=\"publisher\"\n            name=\"publisher\"\n            placeholder=\"Title\"\n            defaultValue={data.song.publisher}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"altTitle\">\n          Alt Title\n          <input\n            type=\"text\"\n            id=\"altTitle\"\n            name=\"altTitle\"\n            placeholder=\"Alt Title\"\n            defaultValue={data.song.altTitle}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"fromFilm\">\n          From Film:\n          <input\n            type=\"text\"\n            id=\"fromFilm\"\n            name=\"fromFilm\"\n            placeholder=\"From Film\"\n            defaultValue={data.song.fromFilm}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"tribute\">\n          Tribute To:\n          <input\n            type=\"text\"\n            id=\"tribute\"\n            name=\"tribute\"\n            placeholder=\"Tribute\"\n            defaultValue={data.song.tribute}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">\n          Sav{mutationLoading ? \"ing\" : \"e\"} Changes\n        </button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };\n"]},"metadata":{},"sourceType":"module"}