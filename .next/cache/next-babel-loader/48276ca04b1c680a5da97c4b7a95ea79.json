{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Albums.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY {\n    albums {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n    }\n  }\n`;\nconst AlbumsList = styled.div.withConfig({\n  displayName: \"Albums__AlbumsList\",\n  componentId: \"sc-1rsazgb-0\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\nconst Center = styled.div.withConfig({\n  displayName: \"Albums__Center\",\n  componentId: \"sc-1rsazgb-1\"\n})([\"text-align:center;\"]);\n\nconst Albums = ({}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_ALBUMS_QUERY);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Error :(\");\n  const albums = data.albums.map(album => __jsx(Album, {\n    key: album.id,\n    album: album,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"I found \", albums.length, \" albums.\")), __jsx(AlbumsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, albums));\n};\n\nexport default Albums;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Albums.js"],"names":["React","useQuery","gql","styled","Album","ALL_ALBUMS_QUERY","AlbumsList","div","props","theme","maxWidth","Center","Albums","loading","error","data","albums","map","album","id","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,gBAAgB,GAAGH,GAAI;;;;;;;;;;CAA7B;AAYA,MAAMI,UAAU,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,+FAIDC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,QAJpB,CAAhB;AAQA,MAAMC,MAAM,GAAGR,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,0BAAZ;;AAIA,MAAMK,MAAM,GAAG,CAAC,EAAD,KAAQ;AACrB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bd,QAAQ,CAACI,gBAAD,CAAzC;AACA,MAAIQ,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,QAAME,MAAM,GAAGD,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgBC,KAAK,IAClC,MAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,IAAA,KAAK,EAAED,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADa,CAAf;AAIA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYF,MAAM,CAACI,MAAnB,aADF,CADF,EAIE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaJ,MAAb,CAJF,CADF;AAQD,CAjBD;;AAmBA,eAAeJ,MAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\n\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY {\n    albums {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n    }\n  }\n`;\n\nconst AlbumsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${props => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst Albums = ({}) => {\n  const { loading, error, data } = useQuery(ALL_ALBUMS_QUERY);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const albums = data.albums.map(album => (\n    <Album key={album.id} album={album} />\n  ));\n\n  return (\n    <Center>\n      <p>\n        <b>I found {albums.length} albums.</b>\n      </p>\n      <AlbumsList>{albums}</AlbumsList>\n    </Center>\n  );\n};\n\nexport default Albums;\n"]},"metadata":{},"sourceType":"module"}