{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Album.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport moment from \"moment\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport { Button } from \"primereact/button\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\n\nfunction isJanFirst(date) {\n  // if the record was released on Jan 1, it probably wasn't and only\n  // the year was available.  So we return true and format just the year.\n  if (moment(date).month() === 0 && moment(date).dayOfYear() === 0) {\n    console.log(\"yup\");\n  } else {\n    console.log(\"nope\");\n  }\n}\n\nconst Album = ({\n  album\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CURRENT_USER_QUERY);\n  isJanFirst(album.releaseDate);\n  const footer = data.me ? __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/update\",\n      query: {\n        id: album.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(Button, {\n    label: \"Edit\",\n    icon: \"pi pi-pencil\",\n    style: {\n      marginRight: \".25em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })))) : null;\n\n  const title = __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/album\",\n      query: {\n        id: album.id\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, album.title)));\n\n  return __jsx(Card, {\n    title: title,\n    footer: footer,\n    subTitle: album.releaseDate ? `released ${moment(album.releaseDate).format(\"MMMM Do, YYYY\")}` : \"no release date information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n}; // const Album = ({ album }) => (\n//   <AlbumStyles>\n//     <Title>\n//       <Link href={{ pathname: \"/album\", query: { id: album.id } }}>\n//         <a>{album.title}</a>\n//       </Link>\n//     </Title>\n//     <PleaseSignIn>\n//       <div className=\"buttonList\">\n//         <Link href={{ pathname: \"update\", query: { id: album.id } }}>\n//           <a>Edit Album</a>\n//         </Link>\n//       </div>\n//     </PleaseSignIn>\n//   </AlbumStyles>\n// );\n\n\nexport default Album;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Album.js"],"names":["React","useQuery","moment","Link","Card","Button","CURRENT_USER_QUERY","isJanFirst","date","month","dayOfYear","console","log","Album","album","loading","error","data","releaseDate","footer","me","pathname","query","id","marginRight","title","format"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB;AACA;AACA,MAAIN,MAAM,CAACM,IAAD,CAAN,CAAaC,KAAb,OAAyB,CAAzB,IAA8BP,MAAM,CAACM,IAAD,CAAN,CAAaE,SAAb,OAA6B,CAA/D,EAAkE;AAChEC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACF;;AAED,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC3B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BhB,QAAQ,CAACK,kBAAD,CAAzC;AACAC,EAAAA,UAAU,CAACO,KAAK,CAACI,WAAP,CAAV;AACA,QAAMC,MAAM,GAAGF,IAAI,CAACG,EAAL,GACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAE,SAAZ;AAAuBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,EAAE,EAAET,KAAK,CAACS;AAAZ;AAA9B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,IAAI,EAAC,cAFP;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADa,GAYX,IAZJ;;AAaA,QAAMC,KAAK,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAEJ,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,EAAE,EAAET,KAAK,CAACS;AAAZ;AAA7B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIT,KAAK,CAACW,KAAV,CADF,CADF,CADF;;AAQA,SACE,MAAC,IAAD;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,MAAM,EAAEN,MAFV;AAGE,IAAA,QAAQ,EACNL,KAAK,CAACI,WAAN,GACK,YAAWhB,MAAM,CAACY,KAAK,CAACI,WAAP,CAAN,CAA0BQ,MAA1B,CAAiC,eAAjC,CAAkD,EADlE,GAEI,6BANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAnCD,C,CAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeb,KAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport moment from \"moment\";\n\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport { Button } from \"primereact/button\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\n\nfunction isJanFirst(date) {\n  // if the record was released on Jan 1, it probably wasn't and only\n  // the year was available.  So we return true and format just the year.\n  if (moment(date).month() === 0 && moment(date).dayOfYear() === 0) {\n    console.log(\"yup\");\n  } else {\n    console.log(\"nope\");\n  }\n}\n\nconst Album = ({ album }) => {\n  const { loading, error, data } = useQuery(CURRENT_USER_QUERY);\n  isJanFirst(album.releaseDate);\n  const footer = data.me ? (\n    <span>\n      <Link href={{ pathname: \"/update\", query: { id: album.id } }}>\n        <a>\n          <Button\n            label=\"Edit\"\n            icon=\"pi pi-pencil\"\n            style={{ marginRight: \".25em\" }}\n          />\n        </a>\n      </Link>\n    </span>\n  ) : null;\n  const title = (\n    <span>\n      <Link href={{ pathname: \"/album\", query: { id: album.id } }}>\n        <a>{album.title}</a>\n      </Link>\n    </span>\n  );\n\n  return (\n    <Card\n      title={title}\n      footer={footer}\n      subTitle={\n        album.releaseDate\n          ? `released ${moment(album.releaseDate).format(\"MMMM Do, YYYY\")}`\n          : \"no release date information\"\n      }\n    />\n  );\n};\n\n// const Album = ({ album }) => (\n//   <AlbumStyles>\n//     <Title>\n//       <Link href={{ pathname: \"/album\", query: { id: album.id } }}>\n//         <a>{album.title}</a>\n//       </Link>\n//     </Title>\n//     <PleaseSignIn>\n//       <div className=\"buttonList\">\n//         <Link href={{ pathname: \"update\", query: { id: album.id } }}>\n//           <a>Edit Album</a>\n//         </Link>\n//       </div>\n//     </PleaseSignIn>\n//   </AlbumStyles>\n// );\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}