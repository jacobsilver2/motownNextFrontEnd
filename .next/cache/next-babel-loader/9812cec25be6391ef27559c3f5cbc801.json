{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/pages/_document.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Document, { Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheet } from \"styled-components\";\nimport React from \"react\";\nexport default class MyDocument extends Document {\n  // static getInitialProps({ renderPage }) {\n  //   const sheet = new ServerStyleSheet();\n  //   const page = renderPage(App => props =>\n  //     sheet.collectStyles(<App {...props} />)\n  //   );\n  //   const styleTags = sheet.getStyleElement();\n  //   return { ...page, styleTags };\n  // }\n  render() {\n    return __jsx(\"html\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, this.props.styleTags), __jsx(\"body\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, __jsx(Main, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), __jsx(NextScript, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })));\n  }\n\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheet();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collectStyles(__jsx(App, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread({}, initialProps, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n  });\n};","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/pages/_document.js"],"names":["Document","Head","Main","NextScript","ServerStyleSheet","React","MyDocument","render","props","styleTags","getInitialProps","ctx","sheets","originalRenderPage","renderPage","enhanceApp","App","collectStyles","initialProps","styles","Children","toArray","getStyleElement"],"mappings":";;;;;;;;;;;AAAA,OAAOA,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,eAAjD;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,UAAN,SAAyBN,QAAzB,CAAkC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKC,KAAL,CAAWC,SAAlB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CADF;AASD;;AApB8C;;AAuBjDH,UAAU,CAACI,eAAX,GAA6B,MAAMC,GAAN,IAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAAMC,MAAM,GAAG,IAAIR,gBAAJ,EAAf;AACA,QAAMS,kBAAkB,GAAGF,GAAG,CAACG,UAA/B;;AAEAH,EAAAA,GAAG,CAACG,UAAJ,GAAiB,MACfD,kBAAkB,CAAC;AACjBE,IAAAA,UAAU,EAAEC,GAAG,IAAIR,KAAK,IAAII,MAAM,CAACK,aAAP,CAAqB,MAAC,GAAD,eAAST,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;AADX,GAAD,CADpB;;AAKA,QAAMU,YAAY,GAAG,MAAMlB,QAAQ,CAACU,eAAT,CAAyBC,GAAzB,CAA3B;AAEA,2BACKO,YADL;AAEE;AACAC,IAAAA,MAAM,EAAE,CACN,GAAGd,KAAK,CAACe,QAAN,CAAeC,OAAf,CAAuBH,YAAY,CAACC,MAApC,CADG,EAENP,MAAM,CAACU,eAAP,EAFM;AAHV;AAQD,CA1CD","sourcesContent":["import Document, { Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheet } from \"styled-components\";\nimport React from \"react\";\n\nexport default class MyDocument extends Document {\n  // static getInitialProps({ renderPage }) {\n  //   const sheet = new ServerStyleSheet();\n  //   const page = renderPage(App => props =>\n  //     sheet.collectStyles(<App {...props} />)\n  //   );\n  //   const styleTags = sheet.getStyleElement();\n  //   return { ...page, styleTags };\n  // }\n\n  render() {\n    return (\n      <html>\n        <Head>{this.props.styleTags}</Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </html>\n    );\n  }\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheet();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () =>\n    originalRenderPage({\n      enhanceApp: App => props => sheets.collectStyles(<App {...props} />)\n    });\n\n  const initialProps = await Document.getInitialProps(ctx);\n\n  return {\n    ...initialProps,\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [\n      ...React.Children.toArray(initialProps.styles),\n      sheets.getStyleElement()\n    ]\n  };\n};\n"]},"metadata":{},"sourceType":"module"}