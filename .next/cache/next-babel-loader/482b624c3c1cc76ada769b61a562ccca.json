{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Songs.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: SongOrderByInput!) {\n    songs(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: SongOrderByInput!) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nconst Center = styled.div.withConfig({\n  displayName: \"Songs__Center\",\n  componentId: \"sc-16ll7z0-0\"\n})([\"text-align:center;\"]);\nconst SongsList = styled.div.withConfig({\n  displayName: \"Songs__SongsList\",\n  componentId: \"sc-16ll7z0-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\nconst sortBySelectItems = [{\n  label: \"Title, ascending\",\n  value: \"title_ASC\"\n}, {\n  label: \"Title, descending\",\n  value: \"title_DESC\"\n}, {\n  label: \"Publisher, ascending\",\n  value: \"publisher_ASC\"\n}, {\n  label: \"Publisher, descending\",\n  value: \"publisher_DESC\"\n}, {\n  label: \"Published Date, ascending\",\n  value: \"publishedDate_ASC\"\n}, {\n  label: \"Published Date, descending\",\n  value: \"publishedDate_DESC\"\n}];\n\nconst Songs = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState(\"title_ASC\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      sortBy\n    }\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy\n    }\n  });\n  if (allSongsLoading || songsBeginningWithLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Loading...\");\n  if (allSongsError || songsBeginningWithError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Error :(\");\n  const songs = !letter ? allSongsData.songs.map(song => __jsx(Song, {\n    key: song.id,\n    song: song,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })) : songsBeginningWithData.songs.map(song => __jsx(Song, {\n    key: song.id,\n    song: song,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZWithNumber,\n    onChange: e => setLetter(e.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), __jsx(Dropdown, {\n    value: sortBy,\n    options: sortBySelectItems,\n    onChange: e => setSortBy(e.value),\n    placeholder: \"Sort By\\u2026\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), __jsx(SongsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, songs), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n};\n\nexport default Songs;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Songs.js"],"names":["React","Component","useState","useQuery","gql","styled","Song","Pagination","perPage","SelectButton","Dropdown","selectButtonsAthruZWithNumber","ALL_SONGS_QUERY","ALL_SONGS_BEGINNING_WITH_QUERY","Center","div","SongsList","props","theme","maxWidth","sortBySelectItems","label","value","Songs","page","letter","setLetter","sortBy","setSortBy","loading","allSongsLoading","error","allSongsError","data","allSongsData","variables","skip","first","songsBeginningWithLoading","songsBeginningWithError","songsBeginningWithData","songs","map","song","id","e"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { selectButtonsAthruZWithNumber } from \"../lib/selectButtons\";\n\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}, $sortBy: SongOrderByInput!) {\n    songs(first: $first, skip: $skip, orderBy: $sortBy ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String, $sortBy: SongOrderByInput!) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: $sortBy) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst SongsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst sortBySelectItems = [\n  { label: \"Title, ascending\", value: \"title_ASC\" },\n  { label: \"Title, descending\", value: \"title_DESC\" },\n  { label: \"Publisher, ascending\", value: \"publisher_ASC\" },\n  { label: \"Publisher, descending\", value: \"publisher_DESC\" },\n  { label: \"Published Date, ascending\", value: \"publishedDate_ASC\" },\n  { label: \"Published Date, descending\", value: \"publishedDate_DESC\" },\n];\n\nconst Songs = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"title_ASC\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData,\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, sortBy },\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData,\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter,\n      sortBy,\n    },\n  });\n  if (allSongsLoading || songsBeginningWithLoading) return <p>Loading...</p>;\n  if (allSongsError || songsBeginningWithError) return <p>Error :(</p>;\n\n  const songs = !letter\n    ? allSongsData.songs.map((song) => <Song key={song.id} song={song} />)\n    : songsBeginningWithData.songs.map((song) => (\n        <Song key={song.id} song={song} />\n      ));\n\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZWithNumber}\n        onChange={(e) => setLetter(e.value)}\n      />\n      <br />\n      <Dropdown\n        value={sortBy}\n        options={sortBySelectItems}\n        onChange={(e) => setSortBy(e.value)}\n        placeholder=\"Sort By…\"\n      />\n      <br />\n      <Pagination page={page} model=\"songs\" letter={letter} />\n      <SongsList>{songs}</SongsList>\n      <Pagination page={page} model=\"songs\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}