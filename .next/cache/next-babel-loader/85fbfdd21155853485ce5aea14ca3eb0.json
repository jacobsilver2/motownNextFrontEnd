{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_SONG_MUTATION(\\n    $id: ID!\\n    $title: String!\\n    $publisher: String\\n    $altTitle: String\\n    $fromFilm: String\\n    $tribute: String\\n  ) {\\n    updateSong(\\n      id: $id\\n      title: $title\\n      publisher: $publisher\\n      altTitle: $altTitle\\n      fromFilm: $fromFilm\\n      tribute: $tribute\\n    ) {\\n      id\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      publisher\\n      altTitle\\n      fromFilm\\n      tribute\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nvar SINGLE_SONG_QUERY = gql(_templateObject());\nvar UPDATE_SONG_MUTATION = gql(_templateObject2());\n\nvar UpdateSong = function UpdateSong(_ref) {\n  var id = _ref.id;\n\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {\n    song: {}\n  } : _useQuery$data;\n\n  var _useMutation = useMutation(UPDATE_SONG_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateSongMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      mutationLoading = _useMutation2$.loading,\n      mutationError = _useMutation2$.error;\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  function handleChange(e) {\n    e.preventDefault();\n    var _e$target = e.target,\n        name = _e$target.name,\n        type = _e$target.type,\n        value = _e$target.value;\n    var val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, _defineProperty({}, name, val)));\n  }\n\n  function updateSong(e) {\n    return _regeneratorRuntime.async(function updateSong$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            updateSongMutation({\n              variables: _objectSpread({\n                id: id\n              }, state)\n            });\n            mutationError && console.log(mutationError);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (loading) return __jsx(\"p\", null, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: updateSong\n  }, __jsx(Error, {\n    error: error\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading\n  }, __jsx(\"label\", {\n    htmlFor: \"title\"\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.song.title,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"publisher\"\n  }, \"Publisher\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"publisher\",\n    name: \"publisher\",\n    placeholder: \"Title\",\n    defaultValue: data.song.publisher,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"altTitle\"\n  }, \"Alt Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"altTitle\",\n    name: \"altTitle\",\n    placeholder: \"Alt Title\",\n    defaultValue: data.song.altTitle,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"fromFilm\"\n  }, \"From Film:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"fromFilm\",\n    name: \"fromFilm\",\n    placeholder: \"From Film\",\n    defaultValue: data.song.fromFilm,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"tribute\"\n  }, \"Tribute To:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"tribute\",\n    name: \"tribute\",\n    placeholder: \"Tribute\",\n    defaultValue: data.song.tribute,\n    onChange: handleChange\n  })), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Sav\", mutationLoading ? \"ing\" : \"e\", \" Changes\")));\n};\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };","map":null,"metadata":{},"sourceType":"module"}