{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/pages/albums.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_ALBUMS_QUERY {\\n    albums {\\n      id\\n      title\\n      recordLabel\\n      releaseDate\\n      format\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nvar ALL_ALBUMS_QUERY = gql(_templateObject());\n\nvar Albums = function Albums(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useQuery = useQuery(ALL_ALBUMS_QUERY),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Error :(\");\n  var albums = data.albums.map(function (album) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, album.title);\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, albums);\n};\n\nexport default Albums;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/pages/albums.js"],"names":["React","useQuery","gql","ALL_ALBUMS_QUERY","Albums","loading","error","data","albums","map","album","title"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;;AAYA,IAAME,MAAM,GAAG,SAATA,MAAS,OAAQ;AAAA;;AAAA,kBACYH,QAAQ,CAACE,gBAAD,CADpB;AAAA,MACbE,OADa,aACbA,OADa;AAAA,MACJC,KADI,aACJA,KADI;AAAA,MACGC,IADH,aACGA,IADH;;AAErB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,MAAME,MAAM,GAAGD,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,UAAAC,KAAK;AAAA,WAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACC,KAAV,CAAJ;AAAA,GAArB,CAAf;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMH,MAAN,CAAP;AACD,CARD;;AAUA,eAAeJ,MAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY {\n    albums {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n    }\n  }\n`;\n\nconst Albums = ({}) => {\n  const { loading, error, data } = useQuery(ALL_ALBUMS_QUERY);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const albums = data.albums.map(album => <p>{album.title}</p>);\n\n  return <div>{albums}</div>;\n};\n\nexport default Albums;\n"]},"metadata":{},"sourceType":"module"}