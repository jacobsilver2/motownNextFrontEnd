{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateArtist.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n    }\n  }\n`;\nconst UPDATE_ARTIST_MUTATION = gql`\n  mutation UPDATE_ARTIST_MUTATION($id: ID!, $name: String!) {\n    updateArtist(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nconst UpdateArtist = ({\n  id\n}) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const {\n    loading,\n    error,\n    data = {\n      artist: {}\n    }\n  } = useQuery(SINGLE_ARTIST_QUERY, {\n    variables: {\n      id: id\n    }\n  });\n  const [updateArtistMutation, {\n    loading: mutationLoading,\n    error: mutationError\n  }] = useMutation(UPDATE_ARTIST_MUTATION);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n\n  function handleChange(e) {\n    e.preventDefault();\n    const {\n      name,\n      type,\n      value\n    } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, {\n      [name]: val\n    }));\n  }\n\n  async function updateArtist(e) {\n    e.preventDefault();\n    updateArtistMutation({\n      variables: _objectSpread({\n        id\n      }, state)\n    });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: updateArtist,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Name\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    placeholder: \"Name\",\n    required: true,\n    defaultValue: data.artist.name,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))));\n};\n\nexport default UpdateArtist;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateArtist.js"],"names":["React","useState","useQuery","useMutation","gql","Router","Form","Error","SINGLE_ARTIST_QUERY","UPDATE_ARTIST_MUTATION","UpdateArtist","id","loading","error","data","artist","variables","updateArtistMutation","mutationLoading","mutationError","state","setState","handleChange","e","preventDefault","name","type","value","target","val","parseFloat","updateArtist","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MAAMC,mBAAmB,GAAGJ,GAAI;;;;;;;CAAhC;AASA,MAAMK,sBAAsB,GAAGL,GAAI;;;;;;;CAAnC;;AASA,MAAMM,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC/B;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAI,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAAV;AAAzB,MAA4Cb,QAAQ,CACxDM,mBADwD,EAExD;AACEQ,IAAAA,SAAS,EAAE;AAAEL,MAAAA,EAAE,EAAEA;AAAN;AADb,GAFwD,CAA1D;AAMA,QAAM,CACJM,oBADI,EAEJ;AAAEL,IAAAA,OAAO,EAAEM,eAAX;AAA4BL,IAAAA,KAAK,EAAEM;AAAnC,GAFI,IAGFhB,WAAW,CAACM,sBAAD,CAHf;AAKA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,QAAQ,CAAC,EAAD,CAAlC;;AACA,WAASqB,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBJ,CAAC,CAACK,MAAhC;AACA,UAAMC,GAAG,GAAGH,IAAI,KAAK,QAAT,GAAoBI,UAAU,CAACH,KAAD,CAA9B,GAAwCA,KAApD;AACAN,IAAAA,QAAQ,mBAAMD,KAAN;AAAa,OAACK,IAAD,GAAQI;AAArB,OAAR;AACD;;AAED,iBAAeE,YAAf,CAA4BR,CAA5B,EAA+B;AAC7BA,IAAAA,CAAC,CAACC,cAAF;AACAP,IAAAA,oBAAoB,CAAC;AAAED,MAAAA,SAAS;AAAIL,QAAAA;AAAJ,SAAWS,KAAX;AAAX,KAAD,CAApB;AACAD,IAAAA,aAAa,IAAIa,OAAO,CAACC,GAAR,CAAYd,aAAZ,CAAjB;AACD;;AAED,MAAIP,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEmB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAElB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAU,IAAA,QAAQ,EAAED,OAApB;AAA6B,iBAAWA,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,MAJd;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,YAAY,EAAEE,IAAI,CAACC,MAAL,CAAYU,IAN5B;AAOE,IAAA,QAAQ,EAAEH,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CAFF,CADF;AAmBD,CAhDD;;AAkDA,eAAeZ,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_ARTIST_QUERY = gql`\n  query SINGLE_ARTIST_QUERY($id: ID!) {\n    artist(where: { id: $id }) {\n      id\n      name\n    }\n  }\n`;\n\nconst UPDATE_ARTIST_MUTATION = gql`\n  mutation UPDATE_ARTIST_MUTATION($id: ID!, $name: String!) {\n    updateArtist(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nconst UpdateArtist = ({ id }) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const { loading, error, data = { artist: {} } } = useQuery(\n    SINGLE_ARTIST_QUERY,\n    {\n      variables: { id: id },\n    }\n  );\n  const [\n    updateArtistMutation,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(UPDATE_ARTIST_MUTATION);\n\n  const [state, setState] = useState({});\n  function handleChange(e) {\n    e.preventDefault();\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState({ ...state, [name]: val });\n  }\n\n  async function updateArtist(e) {\n    e.preventDefault();\n    updateArtistMutation({ variables: { id, ...state } });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return <p>Loading</p>;\n  return (\n    <Form onSubmit={updateArtist}>\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            required\n            defaultValue={data.artist.name}\n            onChange={handleChange}\n          />\n        </label>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default UpdateArtist;\n"]},"metadata":{},"sourceType":"module"}