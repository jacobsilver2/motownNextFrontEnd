{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nimport Song from \"./styles/song/songStyles\";\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nfunction routeToSong(song) {\n  song && Router.push({\n    pathname: \"/song\",\n    query: {\n      id: song.id\n    }\n  });\n}\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      songs: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      this.setState({\n        loading: true\n      });\n      const response = await client.query({\n        query: SEARCH_SONGS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        songs: response.data.songs,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, __jsx(Downshift, {\n      onChange: routeToSong,\n      itemToString: song => song === null ? \"\" : song.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(ApolloConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, client => __jsx(\"input\", _extends({}, getInputProps({\n      type: \"search\",\n      placeholder: \"Search\",\n      id: \"search\",\n      className: this.state.loading ? \"loading\" : \"\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), isOpen ? __jsx(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.songs.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      key: item.id,\n      index,\n      item\n    }), {\n      highlighted: index === highlightedIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), __jsx(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, item.title)))) : null)));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Search.js"],"names":["React","Downshift","resetIdCounter","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","SongStyles","Title","Song","SEARCH_SONGS_QUERY","routeToSong","song","push","pathname","query","id","AutoComplete","Component","songs","loading","e","client","setState","response","variables","searchTerm","target","value","data","render","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","state","onChange","persist","map","item","index","key"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport Router from \"next/router\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport debounce from \"lodash.debounce\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nimport SongStyles from \"./styles/song/songStyles\";\nimport Title from \"./styles/song/title\";\nimport Song from \"./styles/song/songStyles\";\n\nconst SEARCH_SONGS_QUERY = gql`\n  query SEARCH_SONGS_QUERY($searchTerm: String!) {\n    songs(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { altTitle_contains: $searchTerm }\n          { fromFilm_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nfunction routeToSong(song) {\n  song &&\n    Router.push({\n      pathname: \"/song\",\n      query: {\n        id: song.id\n      }\n    });\n}\n\nclass AutoComplete extends React.Component {\n  state = {\n    songs: [],\n    loading: false\n  };\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const response = await client.query({\n      query: SEARCH_SONGS_QUERY,\n      variables: { searchTerm: e.target.value }\n    });\n    this.setState({ songs: response.data.songs, loading: false });\n  }, 350);\n\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n        <Downshift\n          onChange={routeToSong}\n          itemToString={song => (song === null ? \"\" : song.title)}\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            isOpen,\n            inputValue,\n            highlightedIndex\n          }) => (\n            <div>\n              <ApolloConsumer>\n                {client => (\n                  <input\n                    {...getInputProps({\n                      type: \"search\",\n                      placeholder: \"Search\",\n                      id: \"search\",\n                      className: this.state.loading ? \"loading\" : \"\",\n                      onChange: e => {\n                        e.persist();\n                        this.onChange(e, client);\n                      }\n                    })}\n                  />\n                )}\n              </ApolloConsumer>\n              {isOpen ? (\n                <DropDown>\n                  {this.state.songs.map((item, index) => (\n                    <DropDownItem\n                      {...getItemProps({ key: item.id, index, item })}\n                      highlighted={index === highlightedIndex}\n                    >\n                      <Title>{item.title}</Title>\n                    </DropDownItem>\n                  ))}\n                </DropDown>\n              ) : null}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}