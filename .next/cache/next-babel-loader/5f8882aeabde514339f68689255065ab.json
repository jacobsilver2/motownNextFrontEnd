{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Signin.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\nconst SIGNIN_MUTATION = gql`\n  mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n    signin(email: $email, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Signin = () => {\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  const [signinMutation, {\n    loading: mutationLoading,\n    error: mutationError\n  }] = useMutation(SIGNIN_MUTATION);\n\n  function saveToState(e) {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  }\n\n  return __jsx(Form, {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault();\n      await signinMutation({\n        variables: _objectSpread({}, state),\n        refetchQueries: [{\n          query: CURRENT_USER_QUERY\n        }]\n      });\n      setState({});\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"fieldset\", {\n    disabled: mutationLoading,\n    \"aria-busy\": mutationLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Sign into your account\"), __jsx(Error, {\n    error: mutationError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Email\", __jsx(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"email\",\n    value: state.email,\n    onChange: saveToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Password\", __jsx(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"password\",\n    value: state.password,\n    onChange: saveToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Sign In!\")));\n};\n\nexport default Signin;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Signin.js"],"names":["React","useState","useMutation","gql","Form","Error","CURRENT_USER_QUERY","SIGNIN_MUTATION","Signin","state","setState","signinMutation","loading","mutationLoading","error","mutationError","saveToState","e","target","name","value","preventDefault","variables","refetchQueries","query","email","password"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,MAAMC,eAAe,GAAGJ,GAAI;;;;;;;;CAA5B;;AAUA,MAAMK,MAAM,GAAG,MAAM;AACnB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CACJU,cADI,EAEJ;AAAEC,IAAAA,OAAO,EAAEC,eAAX;AAA4BC,IAAAA,KAAK,EAAEC;AAAnC,GAFI,IAGFb,WAAW,CAACK,eAAD,CAHf;;AAKA,WAASS,WAAT,CAAqBC,CAArB,EAAwB;AACtBP,IAAAA,QAAQ,mBAAMD,KAAN;AAAa,OAACQ,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAvC,OAAR;AACD;;AAED,SACE,MAAC,IAAD;AACE,IAAA,MAAM,EAAC,MADT;AAEE,IAAA,QAAQ,EAAE,MAAMH,CAAN,IAAW;AACnBA,MAAAA,CAAC,CAACI,cAAF;AACA,YAAMV,cAAc,CAAC;AACnBW,QAAAA,SAAS,oBAAOb,KAAP,CADU;AAEnBc,QAAAA,cAAc,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAElB;AAAT,SAAD;AAFG,OAAD,CAApB;AAIAI,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE;AAAU,IAAA,QAAQ,EAAEG,eAApB;AAAqC,iBAAWA,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,OAHd;AAIE,IAAA,KAAK,EAAEN,KAAK,CAACgB,KAJf;AAKE,IAAA,QAAQ,EAAET,WALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHF,EAaE;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,KAAK,EAAEP,KAAK,CAACiB,QAJf;AAKE,IAAA,QAAQ,EAAEV,WALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAbF,EAwBE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxBF,CAXF,CADF;AAwCD,CAnDD;;AAqDA,eAAeR,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nimport { CURRENT_USER_QUERY } from \"./Nav\";\n\nconst SIGNIN_MUTATION = gql`\n  mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n    signin(email: $email, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Signin = () => {\n  const [state, setState] = useState({});\n  const [\n    signinMutation,\n    { loading: mutationLoading, error: mutationError }\n  ] = useMutation(SIGNIN_MUTATION);\n\n  function saveToState(e) {\n    setState({ ...state, [e.target.name]: e.target.value });\n  }\n\n  return (\n    <Form\n      method=\"post\"\n      onSubmit={async e => {\n        e.preventDefault();\n        await signinMutation({\n          variables: { ...state },\n          refetchQueries: [{ query: CURRENT_USER_QUERY }]\n        });\n        setState({});\n      }}\n    >\n      <fieldset disabled={mutationLoading} aria-busy={mutationLoading}>\n        <h2>Sign into your account</h2>\n        <Error error={mutationError} />\n        <label htmlFor=\"email\">\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"email\"\n            value={state.email}\n            onChange={saveToState}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            value={state.password}\n            onChange={saveToState}\n          />\n        </label>\n\n        <button type=\"submit\">Sign In!</button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default Signin;\n"]},"metadata":{},"sourceType":"module"}