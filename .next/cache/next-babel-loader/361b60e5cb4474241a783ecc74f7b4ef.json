{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      composer {\\n        id\\n        name\\n      }\\n      publisher\\n      publishedDate\\n      altTitle\\n      instrumental\\n      fromFilm\\n      tribute\\n      artists {\\n        id\\n        name\\n      }\\n      albums {\\n        id\\n        title\\n      }\\n      recordings {\\n        id\\n        producer\\n        location\\n        completed\\n        albums {\\n          id\\n          title\\n        }\\n        song {\\n          id\\n          title\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport formatDate from \"../lib/formatDate\";\nvar SingleSongStyles = styled.div.withConfig({\n  displayName: \"SingleSong__SingleSongStyles\",\n  componentId: \"sc-1e0bt3h-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], function (props) {\n  return props.theme.bs;\n});\nvar TitleCard = styled(Card).withConfig({\n  displayName: \"SingleSong__TitleCard\",\n  componentId: \"sc-1e0bt3h-1\"\n})([\"text-align:center;\"]);\nvar PerformedByAndRecordingspane = styled.div.withConfig({\n  displayName: \"SingleSong__PerformedByAndRecordingspane\",\n  componentId: \"sc-1e0bt3h-2\"\n})([\"display:grid;grid-template-columns:1fr 1fr;\"]);\nvar SINGLE_SONG_QUERY = gql(_templateObject());\n\nvar SingleSong = function SingleSong(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(\"list\"),\n      layout = _useState[0],\n      setLayout = _useState[1];\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"No song found for \", id); // console.log(data.song);\n\n  var _data$song = data.song,\n      title = _data$song.title,\n      composer = _data$song.composer,\n      publisher = _data$song.publisher,\n      publishedDate = _data$song.publishedDate,\n      altTitle = _data$song.altTitle,\n      instrumental = _data$song.instrumental,\n      fromFilm = _data$song.fromFilm,\n      tribute = _data$song.tribute,\n      artists = _data$song.artists,\n      albums = _data$song.albums,\n      recordings = _data$song.recordings;\n  var composerNames = composer.map(function (comp, index) {\n    var trailingChar = \", \";\n\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: comp.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/composer\",\n        query: {\n          id: comp.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, comp.name, \" \")), trailingChar);\n  });\n  var albumsCards = albums.map(function (album) {\n    return __jsx(Card, {\n      key: album.id,\n      title: __jsx(Link, {\n        href: {\n          pathname: \"album\",\n          query: {\n            id: album.id\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, album.title)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    });\n  }); // const matchedAlbumRecording = recordings.filter(recording => {\n  //   recording.albums.forEach(album => (\n  //     album.title ===\n  //   ))\n  // })\n\n  function renderAlbumRecordings() {\n    var matchedAlbumRecording = [];\n    albums.forEach(function (theAlbum) {\n      recordings.forEach(function (recording) {\n        recording.albums.forEach(function (album) {\n          if (album.id === theAlbum.id) {\n            console.log(recording.id);\n          }\n        });\n      });\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(TitleCard, {\n    title: title,\n    subTitle: composerNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, altTitle && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Alt Title: \", altTitle), publisher && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Publisher: \", publisher), publishedDate && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Published Date: \", formatDate(publishedDate)), instrumental && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Instrumental\"), fromFilm && __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"From Film: \", fromFilm)), __jsx(PerformedByAndRecordingspane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, artists && __jsx(Card, {\n    title: \"Performed by: \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      margin: 0,\n      padding: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, artists.map(function (artist) {\n    return __jsx(\"li\", {\n      key: artist.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"artist\",\n        query: {\n          id: artist.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, artist.name)));\n  }))), albums && __jsx(Card, {\n    title: \"Can be heard on the album\".concat(albums.length > 1 ? \"s\" : \"\", \":\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, albumsCards))) //   <SingleSongStyles>\n  //     <div className=\"details\">\n  //       <h1 className=\"title\">{title}</h1>\n  //       {composer &&\n  //         composer.map((comp) => (\n  //           <h2 key={comp.id}>\n  //             <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n  //               <a>Composer: {comp.name}</a>\n  //             </Link>\n  //           </h2>\n  //         ))}\n  //       {publisher && <h2>Publisher: {publisher}</h2>}\n  //       {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n  //       {altTitle && <h2>Alt Title: {altTitle}</h2>}\n  //       {instrumental && <h2>Instrumental</h2>}\n  //       {fromFilm && <h2>From Film: {fromFilm}</h2>}\n  //       {tribute && <h2>{tribute}</h2>}\n  //       {artists && (\n  //         <h2>\n  //           Performed by:{\" \"}\n  //           {artists.map((artist) => (\n  //             <p key={artist.id}>\n  //               <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n  //                 <a>{artist.name}</a>\n  //               </Link>\n  //             </p>\n  //           ))}\n  //         </h2>\n  //       )}\n  //       {albums && (\n  //         <h2>\n  //           Can be heard on the albums:{\" \"}\n  //           {albums.map((album) => (\n  //             <p key={album.id}>\n  //               <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n  //                 <a>{album.title}</a>\n  //               </Link>\n  //             </p>\n  //           ))}\n  //         </h2>\n  //       )}\n  //     </div>\n  //   </SingleSongStyles>\n  // );\n  ;\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","useState","gql","useQuery","ErrorMessage","styled","Link","Card","formatDate","SingleSongStyles","div","props","theme","bs","TitleCard","PerformedByAndRecordingspane","SINGLE_SONG_QUERY","SingleSong","id","variables","loading","error","data","layout","setLayout","song","title","composer","publisher","publishedDate","altTitle","instrumental","fromFilm","tribute","artists","albums","recordings","composerNames","map","comp","index","trailingChar","length","pathname","query","name","albumsCards","album","renderAlbumRecordings","matchedAlbumRecording","forEach","theAlbum","recording","console","log","listStyleType","margin","padding","artist"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nimport formatDate from \"../lib/formatDate\";\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst TitleCard = styled(Card)`\n  text-align: center;\n`;\n\nconst PerformedByAndRecordingspane = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n        song {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id },\n  });\n  const [layout, setLayout] = useState(\"list\");\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  // console.log(data.song);\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings,\n  } = data.song;\n\n  const composerNames = composer.map((comp, index) => {\n    let trailingChar = \", \";\n    if (composer && index === composer.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (composer && !composer[index + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={comp.id}>\n        <Link href={{ pathname: \"/composer\", query: { id: comp.id } }}>\n          <a>{comp.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n\n  const albumsCards = albums.map((album) => {\n    return (\n      <Card\n        key={album.id}\n        title={\n          <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n            <a>{album.title}</a>\n          </Link>\n        }\n      ></Card>\n    );\n  });\n\n  // const matchedAlbumRecording = recordings.filter(recording => {\n  //   recording.albums.forEach(album => (\n  //     album.title ===\n  //   ))\n  // })\n\n  function renderAlbumRecordings() {\n    const matchedAlbumRecording = [];\n\n    albums.forEach((theAlbum) => {\n      recordings.forEach((recording) => {\n        recording.albums.forEach((album) => {\n          if (album.id === theAlbum.id) {\n            console.log(recording.id);\n          }\n        });\n      });\n    });\n  }\n\n  return (\n    <>\n      <TitleCard title={title} subTitle={composerNames}>\n        {altTitle && <h3>Alt Title: {altTitle}</h3>}\n        {publisher && <h3>Publisher: {publisher}</h3>}\n        {publishedDate && <h3>Published Date: {formatDate(publishedDate)}</h3>}\n        {instrumental && <h3>Instrumental</h3>}\n        {fromFilm && <h3>From Film: {fromFilm}</h3>}\n      </TitleCard>\n      <PerformedByAndRecordingspane>\n        {artists && (\n          <Card title=\"Performed by: \">\n            <ul style={{ listStyleType: \"none\", margin: 0, padding: 0 }}>\n              {artists.map((artist) => (\n                <li key={artist.id}>\n                  <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n                    <a>{artist.name}</a>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </Card>\n        )}\n        {albums && (\n          <Card\n            title={`Can be heard on the album${albums.length > 1 ? \"s\" : \"\"}:`}\n          >\n            {albumsCards}\n          </Card>\n        )}\n      </PerformedByAndRecordingspane>\n    </>\n    //   <SingleSongStyles>\n    //     <div className=\"details\">\n    //       <h1 className=\"title\">{title}</h1>\n    //       {composer &&\n    //         composer.map((comp) => (\n    //           <h2 key={comp.id}>\n    //             <Link href={{ pathname: \"composer\", query: { id: comp.id } }}>\n    //               <a>Composer: {comp.name}</a>\n    //             </Link>\n    //           </h2>\n    //         ))}\n    //       {publisher && <h2>Publisher: {publisher}</h2>}\n    //       {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n    //       {altTitle && <h2>Alt Title: {altTitle}</h2>}\n    //       {instrumental && <h2>Instrumental</h2>}\n    //       {fromFilm && <h2>From Film: {fromFilm}</h2>}\n    //       {tribute && <h2>{tribute}</h2>}\n    //       {artists && (\n    //         <h2>\n    //           Performed by:{\" \"}\n    //           {artists.map((artist) => (\n    //             <p key={artist.id}>\n    //               <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n    //                 <a>{artist.name}</a>\n    //               </Link>\n    //             </p>\n    //           ))}\n    //         </h2>\n    //       )}\n    //       {albums && (\n    //         <h2>\n    //           Can be heard on the albums:{\" \"}\n    //           {albums.map((album) => (\n    //             <p key={album.id}>\n    //               <Link href={{ pathname: \"album\", query: { id: album.id } }}>\n    //                 <a>{album.title}</a>\n    //               </Link>\n    //             </p>\n    //           ))}\n    //         </h2>\n    //       )}\n    //     </div>\n    //   </SingleSongStyles>\n    // );\n  );\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}