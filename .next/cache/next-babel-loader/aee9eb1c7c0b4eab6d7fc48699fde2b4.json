{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      composer {\\n        id\\n        name\\n      }\\n      publisher\\n      publishedDate\\n      altTitle\\n      instrumental\\n      fromFilm\\n      tribute\\n      artists {\\n        id\\n        name\\n      }\\n      albums {\\n        id\\n        title\\n      }\\n      recordings {\\n        id\\n        producer\\n        location\\n        completed\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 1200px;\\n  margin: 2rem auto;\\n  box-shadow: \", \";\\n  display: grid;\\n  grid-auto-columns: 1fr;\\n  grid-auto-flow: column;\\n  min-height: 800px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nvar SingleSongStyles = styled.div(_templateObject(), function (props) {\n  return props.theme.bs;\n});\nvar SINGLE_SONG_QUERY = gql(_templateObject2());\n\nvar SingleSong = function SingleSong(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"No song found for \", id); // console.log(data.song);\n\n  var _data$song = data.song,\n      title = _data$song.title,\n      composer = _data$song.composer,\n      publisher = _data$song.publisher,\n      publishedDate = _data$song.publishedDate,\n      altTitle = _data$song.altTitle,\n      instrumental = _data$song.instrumental,\n      fromFilm = _data$song.fromFilm,\n      tribute = _data$song.tribute,\n      artists = _data$song.artists,\n      albums = _data$song.albums,\n      recordings = _data$song.recordings;\n  return __jsx(SingleSongStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, title), composer && composer.map(function (comp) {\n    return __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Composer: \", comp.name);\n  }), publisher && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Publisher: \", publisher), publishedDate && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Published Date: \", publishedDate), altTitle && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Alt Title: \", altTitle), instrumental && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Instrumental\"), fromFilm && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"From Film: \", fromFilm), tribute && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, tribute), artists && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Performed by:\", \" \", artists.map(function (artist) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, artist.name);\n  })), albums && __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Can be heard on the albums:\", \" \", albums.map(function (album) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, album.title);\n  })));\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","gql","useQuery","ErrorMessage","styled","SingleSongStyles","div","props","theme","bs","SINGLE_SONG_QUERY","SingleSong","id","variables","loading","error","data","song","title","composer","publisher","publishedDate","altTitle","instrumental","fromFilm","tribute","artists","albums","recordings","map","comp","name","artist","album"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\n\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id }\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  // console.log(data.song);\n  const {\n    title,\n    composer,\n    publisher,\n    publishedDate,\n    altTitle,\n    instrumental,\n    fromFilm,\n    tribute,\n    artists,\n    albums,\n    recordings\n  } = data.song;\n  return (\n    <SingleSongStyles>\n      <h1>{title}</h1>\n      {composer && composer.map(comp => <h2>Composer: {comp.name}</h2>)}\n      {publisher && <h2>Publisher: {publisher}</h2>}\n      {publishedDate && <h2>Published Date: {publishedDate}</h2>}\n      {altTitle && <h2>Alt Title: {altTitle}</h2>}\n      {instrumental && <h2>Instrumental</h2>}\n      {fromFilm && <h2>From Film: {fromFilm}</h2>}\n      {tribute && <h2>{tribute}</h2>}\n      {artists && (\n        <h2>\n          Performed by:{\" \"}\n          {artists.map(artist => (\n            <p>{artist.name}</p>\n          ))}\n        </h2>\n      )}\n      {albums && (\n        <h2>\n          Can be heard on the albums:{\" \"}\n          {albums.map(album => (\n            <p>{album.title}</p>\n          ))}\n        </h2>\n      )}\n    </SingleSongStyles>\n  );\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}