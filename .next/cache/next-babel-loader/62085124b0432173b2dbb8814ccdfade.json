{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Albums.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    albums(first: $first, skip: $skip, orderBy: title_ASC ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: title_ASC) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\nconst AlbumsList = styled.div.withConfig({\n  displayName: \"Albums__AlbumsList\",\n  componentId: \"sc-1rsazgb-0\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\nconst Center = styled.div.withConfig({\n  displayName: \"Albums__Center\",\n  componentId: \"sc-1rsazgb-1\"\n})([\"text-align:center;\"]);\n\nconst Albums = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter\n    }\n  });\n  if (albumsBeginningWithLoading || allAlbumsLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Loading...\");\n  if (albumsBeginningWithError || allAlbumsError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Error :(\");\n  const albums = !letter ? allAlbumsData.albums.map(album => __jsx(Album, {\n    key: album.id,\n    album: album,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })) : albumsBeginningWithData.albums.map(album => __jsx(Album, {\n    key: album.id,\n    album: album,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(AlbumsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, albums), __jsx(Pagination, {\n    page: page,\n    model: \"albums\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nexport default Albums;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Albums.js"],"names":["React","useState","useQuery","gql","styled","Album","Pagination","perPage","ALL_ALBUMS_QUERY","ALL_ALBUMS_BEGINNING_WITH_QUERY","AlbumsList","div","props","theme","maxWidth","Center","Albums","page","letter","setLetter","loading","allAlbumsLoading","error","allAlbumsError","data","allAlbumsData","variables","skip","first","albumsBeginningWithLoading","albumsBeginningWithError","albumsBeginningWithData","albums","map","album","id"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Album from \"./Album\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\n\nconst ALL_ALBUMS_QUERY = gql`\n  query ALL_ALBUMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    albums(first: $first, skip: $skip, orderBy: title_ASC ) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ALL_ALBUMS_BEGINNING_WITH_QUERY = gql`\n  query ALL_ALBUMS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: title_ASC) {\n      id\n      title\n      recordLabel\n      releaseDate\n      format\n      artists {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst AlbumsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst Albums = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const {\n    loading: allAlbumsLoading,\n    error: allAlbumsError,\n    data: allAlbumsData,\n  } = useQuery(ALL_ALBUMS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage },\n  });\n  const {\n    loading: albumsBeginningWithLoading,\n    error: albumsBeginningWithError,\n    data: albumsBeginningWithData,\n  } = useQuery(ALL_ALBUMS_BEGINNING_WITH_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, letter },\n  });\n  if (albumsBeginningWithLoading || allAlbumsLoading) return <p>Loading...</p>;\n  if (albumsBeginningWithError || allAlbumsError) return <p>Error :(</p>;\n\n  const albums = !letter\n    ? allAlbumsData.albums.map((album) => (\n        <Album key={album.id} album={album} />\n      ))\n    : albumsBeginningWithData.albums.map((album) => (\n        <Album key={album.id} album={album} />\n      ));\n\n  return (\n    <Center>\n      <Pagination page={page} model=\"albums\" letter={letter} />\n      <AlbumsList>{albums}</AlbumsList>\n      <Pagination page={page} model=\"albums\" letter={letter} />\n    </Center>\n  );\n};\n\nexport default Albums;\n"]},"metadata":{},"sourceType":"module"}