{"ast":null,"code":"import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint, prodEndpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    //    uri: process.env.NODE_ENV === \"development\" ? endpoint : endpoint,\n    uri: prodEndpoint,\n    onError: ({\n      networkError,\n      graphQLErrors\n    }) => {\n      graphQLErrors && graphQLErrors.forEach(gqlErr => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: operation => {\n      operation.setContext({\n        //        fetchOptions: {\n        //         credentials: \"include\",\n        //      },\n        headers\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addOrRemoveLocalIdSelection(_, variables, {\n            cache\n          }) {\n            // read the selectedIds value from the cache\n            const {\n              selectedIds\n            } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }); // remove id from local state\n\n            if (selectedIds.includes(variables.id)) {\n              const newData = selectedIds.filter(id => id !== variables.id);\n              const data = {\n                data: {\n                  selectedIds: newData\n                }\n              };\n              cache.writeData(data);\n              return null;\n            } // add id to local state\n\n\n            const newData = [...selectedIds, variables.id];\n            const data = {\n              data: {\n                selectedIds: newData\n              }\n            };\n            cache.writeData(data);\n            return null;\n          },\n\n          clearSelectedIds(_, variables, {\n            cache\n          }) {\n            const {\n              selectedIds\n            } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            });\n            const data = {\n              data: {\n                selectedIds: []\n              }\n            };\n            cache.writeData(data);\n            return null;\n          }\n\n        }\n      },\n      defaults: {\n        selectedIds: []\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":null,"metadata":{},"sourceType":"module"}