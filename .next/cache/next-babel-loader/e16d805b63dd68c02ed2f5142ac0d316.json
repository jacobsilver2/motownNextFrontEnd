{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_SONG_QUERY($id: ID!) {\\n    song(where: { id: $id }) {\\n      id\\n      title\\n      composer {\\n        id\\n        name\\n      }\\n      publisher\\n      publishedDate\\n      altTitle\\n      instrumental\\n      fromFilm\\n      tribute\\n      artists {\\n        id\\n        name\\n      }\\n      albums {\\n        id\\n        title\\n      }\\n      recordings {\\n        id\\n        producer\\n        location\\n        completed\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 1200px;\\n  margin: 2rem auto;\\n  box-shadow: \", \";\\n  display: grid;\\n  grid-auto-columns: 1fr;\\n  grid-auto-flow: column;\\n  min-height: 800px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nvar SingleSongStyles = styled.div(_templateObject(), function (props) {\n  return props.theme.bs;\n});\nvar SINGLE_SONG_QUERY = gql(_templateObject2());\n\nvar SingleSong = function SingleSong(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"No song found for \", id);\n  console.log(data.song);\n  return __jsx(SingleSongStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Single Song\");\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","gql","useQuery","ErrorMessage","styled","SingleSongStyles","div","props","theme","bs","SINGLE_SONG_QUERY","SingleSong","id","variables","loading","error","data","song","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,gBAAgB,GAAGD,MAAM,CAACE,GAAV,oBAGN,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,EAAhB;AAAA,CAHC,CAAtB;AAUA,IAAMC,iBAAiB,GAAGT,GAAH,oBAAvB;;AAiCA,IAAMU,UAAU,GAAG,SAAbA,UAAa,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACIV,QAAQ,CAACQ,iBAAD,EAAoB;AAC3DG,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADgD,GAApB,CADZ;AAAA,MACrBE,OADqB,aACrBA,OADqB;AAAA,MACZC,KADY,aACZA,KADY;AAAA,MACLC,IADK,aACLA,IADK;;AAI7B,MAAID,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAI,CAACE,IAAI,CAACC,IAAV,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBL,EAAtB,CAAP;AAChBM,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,IAAjB;AACA,SAAO,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,CATD;;AAWA,eAAeN,UAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\n\nconst SingleSongStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id }\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  console.log(data.song);\n  return <SingleSongStyles>Single Song</SingleSongStyles>;\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}