{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/Songs.js\";\nvar __jsx = React.createElement;\nimport React, { Component, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZ } from \"../lib/selectButtons\";\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    songs(first: $first, skip: $skip, orderBy: title_ASC ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: title_ASC) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\nconst Center = styled.div.withConfig({\n  displayName: \"Songs__Center\",\n  componentId: \"sc-16ll7z0-0\"\n})([\"text-align:center;\"]);\nconst SongsList = styled.div.withConfig({\n  displayName: \"Songs__SongsList\",\n  componentId: \"sc-16ll7z0-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\n\nconst Songs = ({\n  page\n}) => {\n  const {\n    0: letter,\n    1: setLetter\n  } = useState(\"\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage,\n      letter\n    }\n  });\n  if (allSongsLoading || songsBeginningWithLoading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Loading...\");\n  if (allSongsError || songsBeginningWithError) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Error :(\");\n  const songs = !letter ? allSongsData.songs.map(song => __jsx(Song, {\n    key: song.id,\n    song: song,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })) : songsBeginningWithData.songs.map(song => __jsx(Song, {\n    key: song.id,\n    song: song,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n  const count = letter ? songsBeginningWithData.songs.length : allSongsData.songs.length;\n  return __jsx(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(SelectButton, {\n    value: letter,\n    options: selectButtonsAthruZ,\n    onChange: e => setLetter(e.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    letter: letter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), __jsx(SongsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, songs), __jsx(Pagination, {\n    page: page,\n    model: \"songs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n\nexport default Songs;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/Songs.js"],"names":["React","Component","useState","useQuery","gql","styled","Song","Pagination","perPage","SelectButton","selectButtonsAthruZ","ALL_SONGS_QUERY","ALL_SONGS_BEGINNING_WITH_QUERY","Center","div","SongsList","props","theme","maxWidth","Songs","page","letter","setLetter","loading","allSongsLoading","error","allSongsError","data","allSongsData","variables","skip","first","songsBeginningWithLoading","songsBeginningWithError","songsBeginningWithData","songs","map","song","id","count","length","e","value"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport styled from \"styled-components\";\nimport Song from \"../components/Song\";\nimport Pagination from \"../components/Pagination\";\nimport { perPage } from \"../config\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { selectButtonsAthruZ } from \"../lib/selectButtons\";\n\nexport const ALL_SONGS_QUERY = gql`\n  query ALL_SONGS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    songs(first: $first, skip: $skip, orderBy: title_ASC ) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nexport const ALL_SONGS_BEGINNING_WITH_QUERY = gql`\n  query ALL_SONGS_BEGINNING_WITH_QUERY($skip: Int = 0, $first: Int = ${perPage}, $letter: String) {\n    songs(where: {title_starts_with: $letter}, first: $first, skip: $skip, orderBy: title_ASC) {\n      id\n      title\n      publisher\n      publishedDate\n      composer {\n        name\n        id\n      }\n    }\n  }\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst SongsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${(props) => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Songs = ({ page }) => {\n  const [letter, setLetter] = useState(\"\");\n  const {\n    loading: allSongsLoading,\n    error: allSongsError,\n    data: allSongsData,\n  } = useQuery(ALL_SONGS_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage },\n  });\n  const {\n    loading: songsBeginningWithLoading,\n    error: songsBeginningWithError,\n    data: songsBeginningWithData,\n  } = useQuery(ALL_SONGS_BEGINNING_WITH_QUERY, {\n    variables: { skip: page * perPage - perPage, first: perPage, letter },\n  });\n  if (allSongsLoading || songsBeginningWithLoading) return <p>Loading...</p>;\n  if (allSongsError || songsBeginningWithError) return <p>Error :(</p>;\n\n  const songs = !letter\n    ? allSongsData.songs.map((song) => <Song key={song.id} song={song} />)\n    : songsBeginningWithData.songs.map((song) => (\n        <Song key={song.id} song={song} />\n      ));\n\n  const count = letter\n    ? songsBeginningWithData.songs.length\n    : allSongsData.songs.length;\n  return (\n    <Center>\n      <SelectButton\n        value={letter}\n        options={selectButtonsAthruZ}\n        onChange={(e) => setLetter(e.value)}\n      />\n      <Pagination page={page} model=\"songs\" letter={letter} />\n      <SongsList>{songs}</SongsList>\n      <Pagination page={page} model=\"songs\" />\n    </Center>\n  );\n};\n\nexport default Songs;\n"]},"metadata":{},"sourceType":"module"}