{"ast":null,"code":"import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint, prodEndpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    uri: true ? endpoint : prodEndpoint,\n    onError: ({\n      networkError,\n      graphQLErrors\n    }) => {\n      graphQLErrors && graphQLErrors.forEach(gqlErr => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addOrRemoveLocalIdSelection(_, variables, {\n            cache\n          }) {\n            // read the selectedIds value from the cache\n            const {\n              selectedIds\n            } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }); // remove id from local state\n\n            if (selectedIds.includes(variables.id)) {\n              const newData = selectedIds.filter(id => id !== variables.id);\n              const data = {\n                data: {\n                  selectedIds: newData\n                }\n              };\n              cache.writeData(data);\n              return null;\n            } // add id to local state\n\n\n            const newData = [...selectedIds, variables.id];\n            const data = {\n              data: {\n                selectedIds: newData\n              }\n            };\n            cache.writeData(data);\n            return null;\n          },\n\n          clearSelectedIds(_, variables, {\n            cache\n          }) {\n            const {\n              selectedIds\n            } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            });\n            const data = {\n              data: {\n                selectedIds: []\n              }\n            };\n            cache.writeData(data);\n            return null;\n          }\n\n        }\n      },\n      defaults: {\n        selectedIds: []\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","prodEndpoint","LOCAL_STATE_QUERY","ADD_TO_LOCAL_ID_SELECTION_MUTATION","createClient","headers","uri","onError","networkError","graphQLErrors","forEach","gqlErr","console","log","request","operation","setContext","fetchOptions","credentials","clientState","resolvers","Mutation","addOrRemoveLocalIdSelection","_","variables","cache","selectedIds","readQuery","query","includes","id","newData","filter","data","writeData","clearSelectedIds","defaults"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,kCAAT,QAAmD,qBAAnD;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIN,YAAJ,CAAiB;AACtBO,IAAAA,GAAG,EAAE,OAAyCN,QAAzC,GAAoDC,YADnC;AAEtBM,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,KAAqC;AAC5CA,MAAAA,aAAa,IAAIA,aAAa,CAACC,OAAd,CAAuBC,MAAD,IAAYC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAlC,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBL,YAAa,EAA1C;AACD,KALqB;AAMtBM,IAAAA,OAAO,EAAGC,SAAD,IAAe;AACtBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBb,QAAAA;AAJmB,OAArB;AAMD,KAbqB;AActB;AACAc,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,2BAA2B,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAAEC,YAAAA;AAAF,WAAf,EAA0B;AACnD;AACA,kBAAM;AAAEC,cAAAA;AAAF,gBAAkBD,KAAK,CAACE,SAAN,CAAgB;AACtCC,cAAAA,KAAK,EAAE1B;AAD+B,aAAhB,CAAxB,CAFmD,CAKnD;;AACA,gBAAIwB,WAAW,CAACG,QAAZ,CAAqBL,SAAS,CAACM,EAA/B,CAAJ,EAAwC;AACtC,oBAAMC,OAAO,GAAGL,WAAW,CAACM,MAAZ,CAAoBF,EAAD,IAAQA,EAAE,KAAKN,SAAS,CAACM,EAA5C,CAAhB;AACA,oBAAMG,IAAI,GAAG;AAAEA,gBAAAA,IAAI,EAAE;AAAEP,kBAAAA,WAAW,EAAEK;AAAf;AAAR,eAAb;AACAN,cAAAA,KAAK,CAACS,SAAN,CAAgBD,IAAhB;AACA,qBAAO,IAAP;AACD,aAXkD,CAYnD;;;AACA,kBAAMF,OAAO,GAAG,CAAC,GAAGL,WAAJ,EAAiBF,SAAS,CAACM,EAA3B,CAAhB;AACA,kBAAMG,IAAI,GAAG;AAAEA,cAAAA,IAAI,EAAE;AAAEP,gBAAAA,WAAW,EAAEK;AAAf;AAAR,aAAb;AACAN,YAAAA,KAAK,CAACS,SAAN,CAAgBD,IAAhB;AACA,mBAAO,IAAP;AACD,WAlBO;;AAmBRE,UAAAA,gBAAgB,CAACZ,CAAD,EAAIC,SAAJ,EAAe;AAAEC,YAAAA;AAAF,WAAf,EAA0B;AACxC,kBAAM;AAAEC,cAAAA;AAAF,gBAAkBD,KAAK,CAACE,SAAN,CAAgB;AACtCC,cAAAA,KAAK,EAAE1B;AAD+B,aAAhB,CAAxB;AAGA,kBAAM+B,IAAI,GAAG;AAAEA,cAAAA,IAAI,EAAE;AAAEP,gBAAAA,WAAW,EAAE;AAAf;AAAR,aAAb;AACAD,YAAAA,KAAK,CAACS,SAAN,CAAgBD,IAAhB;AACA,mBAAO,IAAP;AACD;;AA1BO;AADD,OADA;AA+BXG,MAAAA,QAAQ,EAAE;AACRV,QAAAA,WAAW,EAAE;AADL;AA/BC;AAfS,GAAjB,CAAP;AAmDD;;AAED,eAAe5B,UAAU,CAACM,YAAD,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { endpoint, prodEndpoint } from \"../config\";\nimport { LOCAL_STATE_QUERY } from \"../components/Singles\";\nimport { ADD_TO_LOCAL_ID_SELECTION_MUTATION } from \"../components/Album\";\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === \"development\" ? endpoint : prodEndpoint,\n    onError: ({ networkError, graphQLErrors }) => {\n      graphQLErrors && graphQLErrors.forEach((gqlErr) => console.log(gqlErr));\n      console.log(`NetworkError: ${networkError}`);\n    },\n    request: (operation) => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\",\n        },\n        headers,\n      });\n    },\n    // local state\n    clientState: {\n      resolvers: {\n        Mutation: {\n          addOrRemoveLocalIdSelection(_, variables, { cache }) {\n            // read the selectedIds value from the cache\n            const { selectedIds } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            // remove id from local state\n            if (selectedIds.includes(variables.id)) {\n              const newData = selectedIds.filter((id) => id !== variables.id);\n              const data = { data: { selectedIds: newData } };\n              cache.writeData(data);\n              return null;\n            }\n            // add id to local state\n            const newData = [...selectedIds, variables.id];\n            const data = { data: { selectedIds: newData } };\n            cache.writeData(data);\n            return null;\n          },\n          clearSelectedIds(_, variables, { cache }) {\n            const { selectedIds } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            const data = { data: { selectedIds: [] } };\n            cache.writeData(data);\n            return null;\n          },\n        },\n      },\n      defaults: {\n        selectedIds: [],\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}