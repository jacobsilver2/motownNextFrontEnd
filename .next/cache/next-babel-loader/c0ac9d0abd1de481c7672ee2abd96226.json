{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      recordLabel\n    }\n  }\n`;\nconst UPDATE_ALBUM_MUTATION = gql`\n  mutation UPDATE_ALBUM_MUTATION(\n    $id: ID!\n    $title: String!\n    $catalogNumber: String\n    $format: String\n    $info: String\n    $recordLabel: StringA\n  ) {\n    updateAlbum(\n      id: $id\n      title: $title\n      catalogNumber: $catalogNumber\n      format: $format\n      info: $info\n      recordLabel: $recordLabel\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst UpdateAlbum = ({\n  id\n}) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const {\n    loading,\n    error,\n    data = {\n      album: {}\n    }\n  } = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: {\n      id: id\n    }\n  });\n  const [updateAlbumMutation, {\n    loading: mutationLoading,\n    error: mutationError\n  }] = useMutation(UPDATE_ALBUM_MUTATION);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n\n  function handleChange(e) {\n    e.preventDefault();\n    const {\n      name,\n      type,\n      value\n    } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, {\n      [name]: val\n    }));\n  }\n\n  async function updateAlbum(e) {\n    e.preventDefault();\n    updateAlbumMutation({\n      variables: _objectSpread({\n        id\n      }, state)\n    });\n    mutationError && console.log(mutationError);\n  }\n\n  if (loading) return __jsx(\"p\", null, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: e => updateAlbum(e)\n  }, __jsx(Error, {\n    error: error\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading\n  }, __jsx(\"label\", {\n    htmlFor: \"title\"\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.album.title,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"catalogNumber\"\n  }, \"Catalog Number\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"catalogNumber\",\n    name: \"catalogNumber\",\n    placeholder: \"Catalog Number\",\n    required: true,\n    defaultValue: data.album.catalogNumber,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"format\"\n  }, \"Format\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"format\",\n    name: \"format\",\n    placeholder: \"Format\",\n    required: true,\n    defaultValue: data.album.format,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"info\"\n  }, \"Info\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"info\",\n    name: \"info\",\n    placeholder: \"Info\",\n    required: true,\n    defaultValue: data.album.info,\n    onChange: handleChange\n  })), __jsx(\"label\", {\n    htmlFor: \"recordLabel\"\n  }, \"Record Label\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"recordLabel\",\n    name: \"recordLabel\",\n    placeholder: \"Record Label\",\n    defaultValue: data.album.recordLabel,\n    onChange: handleChange\n  })), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Sav\", mutationLoading ? \"ing\" : \"e\", \" Changes\")));\n};\n\nexport default UpdateAlbum;","map":null,"metadata":{},"sourceType":"module"}