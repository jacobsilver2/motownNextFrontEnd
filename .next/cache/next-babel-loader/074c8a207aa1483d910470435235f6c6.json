{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $publishedDate: DateTime\n    $altTitle: String\n    $instrumental: Boolean\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      publishedDate: $publishedDate\n      altTitle: $altTitle\n      instrumental: $instrumental\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateSong = ({\n  id\n}) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const {\n    loading,\n    error,\n    data = {\n      song: {}\n    }\n  } = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id: id\n    }\n  });\n  const [updateSongMutation] = useMutation(UPDATE_SONG_MUTATION);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n\n  function handleChange(e) {\n    console.log(\"we are changin\");\n    e.preventDefault();\n    const {\n      name,\n      type,\n      value\n    } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState(_objectSpread({}, state, {\n      [name]: val\n    }));\n  }\n\n  async function updateSong(e) {\n    e.preventDefault();\n    console.log(\"from update song\");\n    console.log(`state: ${state}`);\n    console.log(`id: ${id}`);\n    console.log(\"running update song\");\n    updateSongMutation({\n      variables: _objectSpread({\n        id: id\n      }, state)\n    });\n    console.log(\"updated!\");\n  }\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Loading\");\n  return __jsx(Form, {\n    onSubmit: updateSong,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.song.title,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"publisher\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Publisher\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"publisher\",\n    name: \"publisher\",\n    placeholder: \"Title\",\n    defaultValue: data.song.publisher,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"altTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Alt Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"altTitle\",\n    name: \"altTitle\",\n    placeholder: \"Alt Title\",\n    defaultValue: data.song.altTitle,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"fromFilm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"From Film:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"fromFilm\",\n    name: \"fromFilm\",\n    placeholder: \"From Film\",\n    defaultValue: data.song.fromFilm,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"tribute\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Tribute To:\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"tribute\",\n    name: \"tribute\",\n    placeholder: \"Tribute\",\n    defaultValue: data.song.tribute,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Sav\", loading ? \"ing\" : \"e\", \" Changes\")));\n}; // class UpdateSong extends Component {\n//   state = {};\n//   handleChange = e => {\n//     const { name, type, value } = e.target;\n//     const val = type === \"number\" ? parseFloat(value) : value;\n//     this.setState({ [name]: val });\n//   };\n//   updateSong = async (e, updateSongMutation) => {\n//     console.log(updateSongMutation);\n//     e.preventDefault();\n//     console.log(\"Updating Song!!\");\n//     console.log(this.state);\n//     const res = await updateSongMutation({\n//       variables: {\n//         id: this.props.id,\n//         ...this.state\n//       }\n//     });\n//     console.log(\"Updated!!\");\n//   };\n//   render() {\n//     return (\n//       <Query\n//         query={SINGLE_SONG_QUERY}\n//         variables={{\n//           id: this.props.id\n//         }}\n//       >\n//         {({ data, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (!data.song) return <p>No Item Found for ID {this.props.id}</p>;\n//           return (\n//             <Mutation mutation={UPDATE_SONG_MUTATION} variables={this.state}>\n//               {(updateSong, { loading, error }) => (\n//                 <Form onSubmit={e => this.updateSong(e, updateSong)}>\n//                   <Error error={error} />\n//                   <fieldset disabled={loading} aria-busy={loading}>\n//                     <label htmlFor=\"title\">\n//                       Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"title\"\n//                         name=\"title\"\n//                         placeholder=\"Title\"\n//                         required\n//                         defaultValue={data.song.title}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"publisher\">\n//                       Publisher\n//                       <input\n//                         type=\"text\"\n//                         id=\"publisher\"\n//                         name=\"publisher\"\n//                         placeholder=\"Title\"\n//                         defaultValue={data.song.publisher}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"altTitle\">\n//                       Alt Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"altTitle\"\n//                         name=\"altTitle\"\n//                         placeholder=\"Alt Title\"\n//                         defaultValue={data.song.altTitle}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"fromFilm\">\n//                       From Film:\n//                       <input\n//                         type=\"text\"\n//                         id=\"fromFilm\"\n//                         name=\"fromFilm\"\n//                         placeholder=\"From Film\"\n//                         defaultValue={data.song.fromFilm}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <label htmlFor=\"tribute\">\n//                       Tribute To:\n//                       <input\n//                         type=\"text\"\n//                         id=\"tribute\"\n//                         name=\"tribute\"\n//                         placeholder=\"Tribute\"\n//                         defaultValue={data.song.tribute}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n//                     <button type=\"submit\">\n//                       Sav{loading ? \"ing\" : \"e\"} Changes\n//                     </button>\n//                   </fieldset>\n//                 </Form>\n//               )}\n//             </Mutation>\n//           );\n//         }}\n//       </Query>\n//     );\n//   }\n// }\n\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/UpdateSong.js"],"names":["React","useState","Mutation","Query","useQuery","useMutation","gql","Router","Form","Error","SINGLE_SONG_QUERY","UPDATE_SONG_MUTATION","UpdateSong","id","loading","error","data","song","variables","updateSongMutation","state","setState","handleChange","e","console","log","preventDefault","name","type","value","target","val","parseFloat","updateSong","title","publisher","altTitle","fromFilm","tribute"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MAAMC,iBAAiB,GAAGJ,GAAI;;;;;;;;;;;CAA9B;AAaA,MAAMK,oBAAoB,GAAGL,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAjC;;AA6BA,MAAMM,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC7B;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAI,GAAG;AAAEC,MAAAA,IAAI,EAAE;AAAR;AAAzB,MAA0Cb,QAAQ,CAACM,iBAAD,EAAoB;AAC1EQ,IAAAA,SAAS,EAAE;AAAEL,MAAAA,EAAE,EAAEA;AAAN;AAD+D,GAApB,CAAxD;AAGA,QAAM,CAACM,kBAAD,IAAuBd,WAAW,CAACM,oBAAD,CAAxC;AAEA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,QAAQ,CAAC,EAAD,CAAlC;;AAEA,WAASqB,YAAT,CAAsBC,CAAtB,EAAyB;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAF,IAAAA,CAAC,CAACG,cAAF;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBN,CAAC,CAACO,MAAhC;AACA,UAAMC,GAAG,GAAGH,IAAI,KAAK,QAAT,GAAoBI,UAAU,CAACH,KAAD,CAA9B,GAAwCA,KAApD;AACAR,IAAAA,QAAQ,mBAAMD,KAAN;AAAa,OAACO,IAAD,GAAQI;AAArB,OAAR;AACD;;AAED,iBAAeE,UAAf,CAA0BV,CAA1B,EAA6B;AAC3BA,IAAAA,CAAC,CAACG,cAAF;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASL,KAAM,EAA5B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAa,OAAMZ,EAAG,EAAtB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAN,IAAAA,kBAAkB,CAAC;AAAED,MAAAA,SAAS;AAAIL,QAAAA,EAAE,EAAEA;AAAR,SAAeO,KAAf;AAAX,KAAD,CAAlB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;;AAED,MAAIX,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEmB,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAElB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAU,IAAA,QAAQ,EAAED,OAApB;AAA6B,iBAAWA,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,WAAW,EAAC,OAJd;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,YAAY,EAAEE,IAAI,CAACC,IAAL,CAAUiB,KAN1B;AAOE,IAAA,QAAQ,EAAEZ,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAcE;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,WAFL;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,WAAW,EAAC,OAJd;AAKE,IAAA,YAAY,EAAEN,IAAI,CAACC,IAAL,CAAUkB,SAL1B;AAME,IAAA,QAAQ,EAAEb,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAdF,EA0BE;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,WAAW,EAAC,WAJd;AAKE,IAAA,YAAY,EAAEN,IAAI,CAACC,IAAL,CAAUmB,QAL1B;AAME,IAAA,QAAQ,EAAEd,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CA1BF,EAsCE;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,WAAW,EAAC,WAJd;AAKE,IAAA,YAAY,EAAEN,IAAI,CAACC,IAAL,CAAUoB,QAL1B;AAME,IAAA,QAAQ,EAAEf,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAtCF,EAkDE;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,SAFL;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,WAAW,EAAC,SAJd;AAKE,IAAA,YAAY,EAAEN,IAAI,CAACC,IAAL,CAAUqB,OAL1B;AAME,IAAA,QAAQ,EAAEhB,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAlDF,EA8DE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA0BR,OAAO,GAAG,KAAH,GAAW,GAA5C,aA9DF,CAFF,CADF;AAqED,CAlGD,C,CAoeAAeF,UAAf;AACA,SAASD,oBAAT","sourcesContent":["import React, { useState } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport Form from \"./styles/Form\";\nimport Error from \"./ErrorMessage\";\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      publisher\n      altTitle\n      fromFilm\n      tribute\n    }\n  }\n`;\n\nconst UPDATE_SONG_MUTATION = gql`\n  mutation UPDATE_SONG_MUTATION(\n    $id: ID!\n    $title: String!\n    $publisher: String\n    $publishedDate: DateTime\n    $altTitle: String\n    $instrumental: Boolean\n    $fromFilm: String\n    $tribute: String\n  ) {\n    updateSong(\n      id: $id\n      title: $title\n      publisher: $publisher\n      publishedDate: $publishedDate\n      altTitle: $altTitle\n      instrumental: $instrumental\n      fromFilm: $fromFilm\n      tribute: $tribute\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateSong = ({ id }) => {\n  // seems like you have to do this dumb thing where you initialize the\n  // data object to how you want it, because useQuery is returning null at first.\n  const { loading, error, data = { song: {} } } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id: id }\n  });\n  const [updateSongMutation] = useMutation(UPDATE_SONG_MUTATION);\n\n  const [state, setState] = useState({});\n\n  function handleChange(e) {\n    console.log(\"we are changin\");\n    e.preventDefault();\n    const { name, type, value } = e.target;\n    const val = type === \"number\" ? parseFloat(value) : value;\n    setState({ ...state, [name]: val });\n  }\n\n  async function updateSong(e) {\n    e.preventDefault();\n    console.log(\"from update song\");\n    console.log(`state: ${state}`);\n    console.log(`id: ${id}`);\n    console.log(\"running update song\");\n    updateSongMutation({ variables: { id: id, ...state } });\n    console.log(\"updated!\");\n  }\n\n  if (loading) return <p>Loading</p>;\n  return (\n    <Form onSubmit={updateSong}>\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"title\">\n          Title\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n            defaultValue={data.song.title}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"publisher\">\n          Publisher\n          <input\n            type=\"text\"\n            id=\"publisher\"\n            name=\"publisher\"\n            placeholder=\"Title\"\n            defaultValue={data.song.publisher}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"altTitle\">\n          Alt Title\n          <input\n            type=\"text\"\n            id=\"altTitle\"\n            name=\"altTitle\"\n            placeholder=\"Alt Title\"\n            defaultValue={data.song.altTitle}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"fromFilm\">\n          From Film:\n          <input\n            type=\"text\"\n            id=\"fromFilm\"\n            name=\"fromFilm\"\n            placeholder=\"From Film\"\n            defaultValue={data.song.fromFilm}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"tribute\">\n          Tribute To:\n          <input\n            type=\"text\"\n            id=\"tribute\"\n            name=\"tribute\"\n            placeholder=\"Tribute\"\n            defaultValue={data.song.tribute}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Sav{loading ? \"ing\" : \"e\"} Changes</button>\n      </fieldset>\n    </Form>\n  );\n};\n\n// class UpdateSong extends Component {\n//   state = {};\n//   handleChange = e => {\n//     const { name, type, value } = e.target;\n//     const val = type === \"number\" ? parseFloat(value) : value;\n//     this.setState({ [name]: val });\n//   };\n//   updateSong = async (e, updateSongMutation) => {\n//     console.log(updateSongMutation);\n//     e.preventDefault();\n//     console.log(\"Updating Song!!\");\n//     console.log(this.state);\n//     const res = await updateSongMutation({\n//       variables: {\n//         id: this.props.id,\n//         ...this.state\n//       }\n//     });\n//     console.log(\"Updated!!\");\n//   };\n//   render() {\n//     return (\n//       <Query\n//         query={SINGLE_SONG_QUERY}\n//         variables={{\n//           id: this.props.id\n//         }}\n//       >\n//         {({ data, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (!data.song) return <p>No Item Found for ID {this.props.id}</p>;\n//           return (\n//             <Mutation mutation={UPDATE_SONG_MUTATION} variables={this.state}>\n//               {(updateSong, { loading, error }) => (\n//                 <Form onSubmit={e => this.updateSong(e, updateSong)}>\n//                   <Error error={error} />\n//                   <fieldset disabled={loading} aria-busy={loading}>\n//                     <label htmlFor=\"title\">\n//                       Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"title\"\n//                         name=\"title\"\n//                         placeholder=\"Title\"\n//                         required\n//                         defaultValue={data.song.title}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"publisher\">\n//                       Publisher\n//                       <input\n//                         type=\"text\"\n//                         id=\"publisher\"\n//                         name=\"publisher\"\n//                         placeholder=\"Title\"\n//                         defaultValue={data.song.publisher}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"altTitle\">\n//                       Alt Title\n//                       <input\n//                         type=\"text\"\n//                         id=\"altTitle\"\n//                         name=\"altTitle\"\n//                         placeholder=\"Alt Title\"\n//                         defaultValue={data.song.altTitle}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"fromFilm\">\n//                       From Film:\n//                       <input\n//                         type=\"text\"\n//                         id=\"fromFilm\"\n//                         name=\"fromFilm\"\n//                         placeholder=\"From Film\"\n//                         defaultValue={data.song.fromFilm}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <label htmlFor=\"tribute\">\n//                       Tribute To:\n//                       <input\n//                         type=\"text\"\n//                         id=\"tribute\"\n//                         name=\"tribute\"\n//                         placeholder=\"Tribute\"\n//                         defaultValue={data.song.tribute}\n//                         onChange={this.handleChange}\n//                       />\n//                     </label>\n\n//                     <button type=\"submit\">\n//                       Sav{loading ? \"ing\" : \"e\"} Changes\n//                     </button>\n//                   </fieldset>\n//                 </Form>\n//               )}\n//             </Mutation>\n//           );\n//         }}\n//       </Query>\n//     );\n//   }\n// }\n\nexport default UpdateSong;\nexport { UPDATE_SONG_MUTATION };\n"]},"metadata":{},"sourceType":"module"}