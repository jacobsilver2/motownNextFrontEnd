{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleAlbum.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\nconst SingleAlbumStyles = styled.div.withConfig({\n  displayName: \"SingleAlbum__SingleAlbumStyles\",\n  componentId: \"gstqrx-0\"\n})([\"max-width:1200px;margin:2rem auto;box-shadow:\", \";display:grid;grid-auto-columns:1fr;grid-auto-flow:column;min-height:800px;.title{text-align:center;}.details{margin:3rem;font-size:2rem;}\"], props => props.theme.bs);\nconst TitleCard = styled(Card).withConfig({\n  displayName: \"SingleAlbum__TitleCard\",\n  componentId: \"gstqrx-1\"\n})([\"text-align:center;\"]);\nconst AlbumsAndSongs = styled.div.withConfig({\n  displayName: \"SingleAlbum__AlbumsAndSongs\",\n  componentId: \"gstqrx-2\"\n})([\"display:grid;grid-template-columns:1fr 1fr;\"]);\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      releaseDate\n      recordLabel\n      songs {\n        id\n        title\n      }\n      artists {\n        id\n        name\n      }\n      recordings {\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleAlbum = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.album) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"No album found for \", id);\n  const {\n    title,\n    catalogNumber,\n    format,\n    info,\n    releaseDate,\n    recordLabel,\n    songs,\n    artists,\n    recordings\n  } = data.album;\n  const artistNames = artists.map((artist, index) => {\n    let trailingChar = \", \";\n\n    if (artists && index === artists.length - 2) {\n      trailingChar = \"& \";\n    }\n\n    if (artists && !artists[index + 1]) {\n      trailingChar = \"\";\n    }\n\n    return __jsx(\"span\", {\n      key: artist.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/artist\",\n        query: {\n          id: artist.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, artist.name, \" \")), trailingChar);\n  });\n  return __jsx(React.Fragment, null, __jsx(TitleCard, {\n    title: title,\n    subTitle: artistNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })) // <SingleAlbumStyles>\n  //   <div className=\"details\">\n  //     <h1 className=\"title\">{title}</h1>\n  //     {catalogNumber && <h2>Catalog Number: {catalogNumber}</h2>}\n  //     {format && <h2>Format: {format}</h2>}\n  //     {releaseDate && <h2>Release Date: {releaseDate}</h2>}\n  //     {recordLabel && <h2>Record Label: {recordLabel}</h2>}\n  //     {info && <h2>Additional Info: {info}</h2>}\n  //     {songs && (\n  //       <h2>\n  //         Songs:{\" \"}\n  //         {songs.map((song) => (\n  //           <p key={song.id}>\n  //             <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n  //               <a>{song.title}</a>\n  //             </Link>\n  //           </p>\n  //         ))}\n  //       </h2>\n  //     )}\n  //     {artists && (\n  //       <h2>\n  //         Artists on this album:{\" \"}\n  //         {artists.map((artist) => (\n  //           <p key={artist.id}>\n  //             <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n  //               <a>{artist.name}</a>\n  //             </Link>\n  //           </p>\n  //         ))}\n  //       </h2>\n  //     )}\n  //     {recordings && (\n  //       <h2>\n  //         Recordings:{\" \"}\n  //         {recordings.map((recording) => (\n  //           <div key={recording.id}>\n  //             {recording.producer && <h2>Producer: {recording.producer}</h2>}\n  //             {recording.location && <h2>Location: {recording.location}</h2>}\n  //             {recording.completed && (\n  //               <h2>Completed: {recording.completed}</h2>\n  //             )}\n  //           </div>\n  //         ))}\n  //       </h2>\n  //     )}\n  //   </div>\n  // </SingleAlbumStyles>\n  ;\n};\n\nexport default SingleAlbum;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleAlbum.js"],"names":["React","gql","useQuery","ErrorMessage","styled","Link","Card","SingleAlbumStyles","div","props","theme","bs","TitleCard","AlbumsAndSongs","SINGLE_ALBUM_QUERY","SingleAlbum","id","loading","error","data","variables","album","title","catalogNumber","format","info","releaseDate","recordLabel","songs","artists","recordings","artistNames","map","artist","index","trailingChar","length","pathname","query","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { Card } from \"primereact/card\";\n\nconst SingleAlbumStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${(props) => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n  .title {\n    text-align: center;\n  }\n  .details {\n    margin: 3rem;\n    font-size: 2rem;\n  }\n`;\n\nconst TitleCard = styled(Card)`\n  text-align: center;\n`;\n\nconst AlbumsAndSongs = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst SINGLE_ALBUM_QUERY = gql`\n  query SINGLE_ALBUM_QUERY($id: ID!) {\n    album(where: { id: $id }) {\n      id\n      title\n      catalogNumber\n      format\n      info\n      releaseDate\n      recordLabel\n      songs {\n        id\n        title\n      }\n      artists {\n        id\n        name\n      }\n      recordings {\n        producer\n        location\n        completed\n        albums {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst SingleAlbum = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_ALBUM_QUERY, {\n    variables: { id },\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.album) return <p>No album found for {id}</p>;\n  const {\n    title,\n    catalogNumber,\n    format,\n    info,\n    releaseDate,\n    recordLabel,\n    songs,\n    artists,\n    recordings,\n  } = data.album;\n  const artistNames = artists.map((artist, index) => {\n    let trailingChar = \", \";\n    if (artists && index === artists.length - 2) {\n      trailingChar = \"& \";\n    }\n    if (artists && !artists[index + 1]) {\n      trailingChar = \"\";\n    }\n    return (\n      <span key={artist.id}>\n        <Link href={{ pathname: \"/artist\", query: { id: artist.id } }}>\n          <a>{artist.name} </a>\n        </Link>\n        {trailingChar}\n      </span>\n    );\n  });\n  return (\n    <>\n      <TitleCard title={title} subTitle={artistNames} />\n    </>\n    // <SingleAlbumStyles>\n    //   <div className=\"details\">\n    //     <h1 className=\"title\">{title}</h1>\n    //     {catalogNumber && <h2>Catalog Number: {catalogNumber}</h2>}\n    //     {format && <h2>Format: {format}</h2>}\n    //     {releaseDate && <h2>Release Date: {releaseDate}</h2>}\n    //     {recordLabel && <h2>Record Label: {recordLabel}</h2>}\n    //     {info && <h2>Additional Info: {info}</h2>}\n    //     {songs && (\n    //       <h2>\n    //         Songs:{\" \"}\n    //         {songs.map((song) => (\n    //           <p key={song.id}>\n    //             <Link href={{ pathname: \"song\", query: { id: song.id } }}>\n    //               <a>{song.title}</a>\n    //             </Link>\n    //           </p>\n    //         ))}\n    //       </h2>\n    //     )}\n    //     {artists && (\n    //       <h2>\n    //         Artists on this album:{\" \"}\n    //         {artists.map((artist) => (\n    //           <p key={artist.id}>\n    //             <Link href={{ pathname: \"artist\", query: { id: artist.id } }}>\n    //               <a>{artist.name}</a>\n    //             </Link>\n    //           </p>\n    //         ))}\n    //       </h2>\n    //     )}\n    //     {recordings && (\n    //       <h2>\n    //         Recordings:{\" \"}\n    //         {recordings.map((recording) => (\n    //           <div key={recording.id}>\n    //             {recording.producer && <h2>Producer: {recording.producer}</h2>}\n    //             {recording.location && <h2>Location: {recording.location}</h2>}\n    //             {recording.completed && (\n    //               <h2>Completed: {recording.completed}</h2>\n    //             )}\n    //           </div>\n    //         ))}\n    //       </h2>\n    //     )}\n    //   </div>\n    // </SingleAlbumStyles>\n  );\n};\n\nexport default SingleAlbum;\n"]},"metadata":{},"sourceType":"module"}