{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\nconst SingleItemStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n`;\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({\n  id\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SINGLE_SONG_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Loading...\");\n  if (!data.song) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"No song found for \", id);\n  console.log(data.song);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Single Song\");\n};\n\nexport default SingleSong;","map":{"version":3,"sources":["/Users/jake/Development/projects/motownNext/frontend/components/SingleSong.js"],"names":["React","gql","useQuery","ErrorMessage","styled","SingleItemStyles","div","props","theme","bs","SINGLE_SONG_QUERY","SingleSong","id","loading","error","data","variables","song","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,GAAI;;;gBAGpBC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,EAAG;;;;;CAHxC;AAUA,MAAMC,iBAAiB,GAAGT,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA9B;;AAiCA,MAAMU,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC7B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bb,QAAQ,CAACQ,iBAAD,EAAoB;AAC3DM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADgD,GAApB,CAAzC;AAGA,MAAIE,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAI,CAACE,IAAI,CAACE,IAAV,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBL,EAAtB,CAAP;AAChBM,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACE,IAAjB;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,CATD;;AAWA,eAAeN,UAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport styled from \"styled-components\";\n\nconst SingleItemStyles = styled.div`\n  max-width: 1200px;\n  margin: 2rem auto;\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  min-height: 800px;\n`;\n\nconst SINGLE_SONG_QUERY = gql`\n  query SINGLE_SONG_QUERY($id: ID!) {\n    song(where: { id: $id }) {\n      id\n      title\n      composer {\n        id\n        name\n      }\n      publisher\n      publishedDate\n      altTitle\n      instrumental\n      fromFilm\n      tribute\n      artists {\n        id\n        name\n      }\n      albums {\n        id\n        title\n      }\n      recordings {\n        id\n        producer\n        location\n        completed\n      }\n    }\n  }\n`;\n\nconst SingleSong = ({ id }) => {\n  const { loading, error, data } = useQuery(SINGLE_SONG_QUERY, {\n    variables: { id }\n  });\n  if (error) return <ErrorMessage error={error} />;\n  if (loading) return <p>Loading...</p>;\n  if (!data.song) return <p>No song found for {id}</p>;\n  console.log(data.song);\n  return <div>Single Song</div>;\n};\n\nexport default SingleSong;\n"]},"metadata":{},"sourceType":"module"}